
MainController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fac  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008184  08008184  00009184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081c4  080081c4  0000a20c  2**0
                  CONTENTS
  4 .ARM          00000008  080081c4  080081c4  000091c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081cc  080081cc  0000a20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081cc  080081cc  000091cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081d0  080081d0  000091d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  080081d4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000de8  2000020c  080083e0  0000a20c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ff4  080083e0  0000aff4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d71  00000000  00000000  0000a23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002915  00000000  00000000  0001ffad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  000228c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dcb  00000000  00000000  00023a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263cf  00000000  00000000  00024823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d11  00000000  00000000  0004abf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc260  00000000  00000000  0005f903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015bb63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad0  00000000  00000000  0015bba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00160678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000020c 	.word	0x2000020c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800816c 	.word	0x0800816c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000210 	.word	0x20000210
 8000214:	0800816c 	.word	0x0800816c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800050c:	4b0d      	ldr	r3, [pc, #52]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2201      	movs	r2, #1
 8000512:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000514:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	691b      	ldr	r3, [r3, #16]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2200      	movs	r2, #0
 800051e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	691b      	ldr	r3, [r3, #16]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	691b      	ldr	r3, [r3, #16]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f042 0201 	orr.w	r2, r2, #1
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000228 	.word	0x20000228

08000548 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000550:	4b04      	ldr	r3, [pc, #16]	@ (8000564 <modbus_3t5_Timeout+0x1c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2201      	movs	r2, #1
 8000556:	755a      	strb	r2, [r3, #21]

}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	20000228 	.word	0x20000228

08000568 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f006 fc99 	bl	8006ea8 <HAL_UART_GetError>
 8000576:	4603      	mov	r3, r0
 8000578:	2b20      	cmp	r3, #32
 800057a:	d101      	bne.n	8000580 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 800057c:	f7ff ffc4 	bl	8000508 <modbus_1t5_Timeout>

	}
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000592:	4a25      	ldr	r2, [pc, #148]	@ (8000628 <Modbus_init+0xa0>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000598:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <Modbus_init+0xa0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	683a      	ldr	r2, [r7, #0]
 800059e:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	691b      	ldr	r3, [r3, #16]
 80005a4:	4a21      	ldr	r2, [pc, #132]	@ (800062c <Modbus_init+0xa4>)
 80005a6:	210e      	movs	r1, #14
 80005a8:	4618      	mov	r0, r3
 80005aa:	f004 fd9f 	bl	80050ec <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	2110      	movs	r1, #16
 80005b4:	4618      	mov	r0, r3
 80005b6:	f006 fc21 	bl	8006dfc <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	4618      	mov	r0, r3
 80005c0:	f006 fc38 	bl	8006e34 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a19      	ldr	r2, [pc, #100]	@ (8000630 <Modbus_init+0xa8>)
 80005ca:	2104      	movs	r1, #4
 80005cc:	4618      	mov	r0, r3
 80005ce:	f005 feff 	bl	80063d0 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80005d2:	4b15      	ldr	r3, [pc, #84]	@ (8000628 <Modbus_init+0xa0>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80005d8:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <Modbus_init+0xa0>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <Modbus_init+0xa0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80005e4:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80005e8:	4413      	add	r3, r2
 80005ea:	3302      	adds	r3, #2
 80005ec:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80005f0:	4619      	mov	r1, r3
 80005f2:	f006 f827 	bl	8006644 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <Modbus_init+0xa0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b01      	cmp	r3, #1
 8000604:	d10c      	bne.n	8000620 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000606:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <Modbus_init+0xa0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	691b      	ldr	r3, [r3, #16]
 800060c:	4618      	mov	r0, r3
 800060e:	f003 fc4b 	bl	8003ea8 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000612:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <Modbus_init+0xa0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 ffa2 	bl	8004564 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000228 	.word	0x20000228
 800062c:	08000549 	.word	0x08000549
 8000630:	08000569 	.word	0x08000569

08000634 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000640:	23ff      	movs	r3, #255	@ 0xff
 8000642:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000644:	23ff      	movs	r3, #255	@ 0xff
 8000646:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000648:	e013      	b.n	8000672 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	781a      	ldrb	r2, [r3, #0]
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	4053      	eors	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800065a:	4a0f      	ldr	r2, [pc, #60]	@ (8000698 <CRC16+0x64>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4413      	add	r3, r2
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	4053      	eors	r3, r2
 8000666:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000668:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <CRC16+0x68>)
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000672:	883b      	ldrh	r3, [r7, #0]
 8000674:	1e5a      	subs	r2, r3, #1
 8000676:	803a      	strh	r2, [r7, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1e6      	bne.n	800064a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21a      	sxth	r2, r3
 8000682:	7bbb      	ldrb	r3, [r7, #14]
 8000684:	b21b      	sxth	r3, r3
 8000686:	4313      	orrs	r3, r2
 8000688:	b21b      	sxth	r3, r3
 800068a:	b29b      	uxth	r3, r3
}
 800068c:	4618      	mov	r0, r3
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	20000100 	.word	0x20000100
 800069c:	20000000 	.word	0x20000000

080006a0 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80006a6:	4b7e      	ldr	r3, [pc, #504]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	7ddb      	ldrb	r3, [r3, #23]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d80a      	bhi.n	80006c8 <Modbus_Protocal_Worker+0x28>
 80006b2:	a201      	add	r2, pc, #4	@ (adr r2, 80006b8 <Modbus_Protocal_Worker+0x18>)
 80006b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b8:	080006d3 	.word	0x080006d3
 80006bc:	08000867 	.word	0x08000867
 80006c0:	0800075f 	.word	0x0800075f
 80006c4:	080007a3 	.word	0x080007a3
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80006c8:	4b75      	ldr	r3, [pc, #468]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2201      	movs	r2, #1
 80006ce:	75da      	strb	r2, [r3, #23]
		break;
 80006d0:	e0e1      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80006d2:	4b73      	ldr	r3, [pc, #460]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80006de:	4b70      	ldr	r3, [pc, #448]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2202      	movs	r2, #2
 80006e4:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80006e6:	f000 f9cd 	bl	8000a84 <Modbus_Emission>
 80006ea:	e018      	b.n	800071e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80006ec:	4b6c      	ldr	r3, [pc, #432]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80006f6:	4b6a      	ldr	r3, [pc, #424]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000700:	b29b      	uxth	r3, r3
 8000702:	429a      	cmp	r2, r3
 8000704:	d00b      	beq.n	800071e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000706:	4b66      	ldr	r3, [pc, #408]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2200      	movs	r2, #0
 800070c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800070e:	4b64      	ldr	r3, [pc, #400]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000716:	4b62      	ldr	r3, [pc, #392]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2203      	movs	r2, #3
 800071c:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800071e:	4b60      	ldr	r3, [pc, #384]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000728:	2b20      	cmp	r3, #32
 800072a:	f040 80ad 	bne.w	8000888 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800072e:	4b5c      	ldr	r3, [pc, #368]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2200      	movs	r2, #0
 8000734:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000738:	4b59      	ldr	r3, [pc, #356]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800073e:	4b58      	ldr	r3, [pc, #352]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4b57      	ldr	r3, [pc, #348]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800074a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800074e:	4413      	add	r3, r2
 8000750:	3302      	adds	r3, #2
 8000752:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000756:	4619      	mov	r1, r3
 8000758:	f005 ff74 	bl	8006644 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 800075c:	e094      	b.n	8000888 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800075e:	4b50      	ldr	r3, [pc, #320]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	7d1b      	ldrb	r3, [r3, #20]
 8000764:	2b00      	cmp	r3, #0
 8000766:	f000 8091 	beq.w	800088c <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800076a:	4b4d      	ldr	r3, [pc, #308]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	22fe      	movs	r2, #254	@ 0xfe
 8000770:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000772:	4b4b      	ldr	r3, [pc, #300]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 800077c:	4b48      	ldr	r3, [pc, #288]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	68db      	ldr	r3, [r3, #12]
 8000782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 800078c:	4b44      	ldr	r3, [pc, #272]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800078e:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000790:	1a8a      	subs	r2, r1, r2
 8000792:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8000794:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000798:	4b41      	ldr	r3, [pc, #260]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2204      	movs	r2, #4
 800079e:	75da      	strb	r2, [r3, #23]
		}
		break;
 80007a0:	e074      	b.n	800088c <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80007a2:	4b3f      	ldr	r3, [pc, #252]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80007aa:	f113 0f02 	cmn.w	r3, #2
 80007ae:	d150      	bne.n	8000852 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80007b0:	4b3b      	ldr	r3, [pc, #236]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2200      	movs	r2, #0
 80007b6:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80007b8:	4b39      	ldr	r3, [pc, #228]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80007c0:	4b37      	ldr	r3, [pc, #220]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007c8:	3b02      	subs	r3, #2
 80007ca:	4619      	mov	r1, r3
 80007cc:	4610      	mov	r0, r2
 80007ce:	f7ff ff31 	bl	8000634 <CRC16>
 80007d2:	4603      	mov	r3, r0
 80007d4:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80007d6:	793a      	ldrb	r2, [r7, #4]
 80007d8:	4b31      	ldr	r3, [pc, #196]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007da:	6819      	ldr	r1, [r3, #0]
 80007dc:	4b30      	ldr	r3, [pc, #192]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007e4:	3b02      	subs	r3, #2
 80007e6:	440b      	add	r3, r1
 80007e8:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d10c      	bne.n	800080a <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80007f0:	797a      	ldrb	r2, [r7, #5]
 80007f2:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007f4:	6819      	ldr	r1, [r3, #0]
 80007f6:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007fe:	3b01      	subs	r3, #1
 8000800:	440b      	add	r3, r1
 8000802:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000806:	429a      	cmp	r2, r3
 8000808:	d004      	beq.n	8000814 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800080a:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	22ff      	movs	r2, #255	@ 0xff
 8000810:	759a      	strb	r2, [r3, #22]
				break;
 8000812:	e040      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000814:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 800081c:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	429a      	cmp	r2, r3
 8000824:	d113      	bne.n	800084e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000826:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800082e:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000836:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000840:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000842:	461a      	mov	r2, r3
 8000844:	f007 fc84 	bl	8008150 <memcpy>

			//execute command
			Modbus_frame_response();
 8000848:	f000 f904 	bl	8000a54 <Modbus_frame_response>
 800084c:	e001      	b.n	8000852 <Modbus_Protocal_Worker+0x1b2>
				break;
 800084e:	bf00      	nop
					}
		break;


	}
}
 8000850:	e021      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	7d5b      	ldrb	r3, [r3, #21]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d019      	beq.n	8000890 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 800085c:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2201      	movs	r2, #1
 8000862:	75da      	strb	r2, [r3, #23]
		break;
 8000864:	e014      	b.n	8000890 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000870:	2b20      	cmp	r3, #32
 8000872:	d10f      	bne.n	8000894 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2201      	movs	r2, #1
 8000884:	75da      	strb	r2, [r3, #23]
		break;
 8000886:	e005      	b.n	8000894 <Modbus_Protocal_Worker+0x1f4>
		break;
 8000888:	bf00      	nop
 800088a:	e004      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 800088c:	bf00      	nop
 800088e:	e002      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000890:	bf00      	nop
 8000892:	e000      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000894:	bf00      	nop
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000228 	.word	0x20000228

080008a4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	7e5b      	ldrb	r3, [r3, #25]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008b6:	6812      	ldr	r2, [r2, #0]
 80008b8:	7e92      	ldrb	r2, [r2, #26]
 80008ba:	4413      	add	r3, r2
 80008bc:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80008be:	88fa      	ldrh	r2, [r7, #6]
 80008c0:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d903      	bls.n	80008d2 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80008ca:	2002      	movs	r0, #2
 80008cc:	f000 f8a0 	bl	8000a10 <ModbusErrorReply>
			 return;
 80008d0:	e023      	b.n	800091a <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6859      	ldr	r1, [r3, #4]
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	440b      	add	r3, r1
 80008e2:	7ed2      	ldrb	r2, [r2, #27]
 80008e4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	6859      	ldr	r1, [r3, #4]
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	440b      	add	r3, r1
 80008f6:	7f12      	ldrb	r2, [r2, #28]
 80008f8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8000902:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <modbusWrite1Register+0x7c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8000908:	2208      	movs	r2, #8
 800090a:	4619      	mov	r1, r3
 800090c:	f007 fc20 	bl	8008150 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000910:	4b03      	ldr	r3, [pc, #12]	@ (8000920 <modbusWrite1Register+0x7c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2205      	movs	r2, #5
 8000916:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000228 	.word	0x20000228

08000924 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800092a:	4b38      	ldr	r3, [pc, #224]	@ (8000a0c <modbusRead1Register+0xe8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	7edb      	ldrb	r3, [r3, #27]
 8000930:	021b      	lsls	r3, r3, #8
 8000932:	b29b      	uxth	r3, r3
 8000934:	4a35      	ldr	r2, [pc, #212]	@ (8000a0c <modbusRead1Register+0xe8>)
 8000936:	6812      	ldr	r2, [r2, #0]
 8000938:	7f12      	ldrb	r2, [r2, #28]
 800093a:	4413      	add	r3, r2
 800093c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800093e:	4b33      	ldr	r3, [pc, #204]	@ (8000a0c <modbusRead1Register+0xe8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	7e5b      	ldrb	r3, [r3, #25]
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	b29b      	uxth	r3, r3
 8000948:	4a30      	ldr	r2, [pc, #192]	@ (8000a0c <modbusRead1Register+0xe8>)
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	7e92      	ldrb	r2, [r2, #26]
 800094e:	4413      	add	r3, r2
 8000950:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <modbusRead1Register+0x3a>
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	2b7d      	cmp	r3, #125	@ 0x7d
 800095c:	d903      	bls.n	8000966 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800095e:	2003      	movs	r0, #3
 8000960:	f000 f856 	bl	8000a10 <ModbusErrorReply>
		 return;
 8000964:	e04e      	b.n	8000a04 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000966:	88ba      	ldrh	r2, [r7, #4]
 8000968:	4b28      	ldr	r3, [pc, #160]	@ (8000a0c <modbusRead1Register+0xe8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	429a      	cmp	r2, r3
 8000970:	d808      	bhi.n	8000984 <modbusRead1Register+0x60>
 8000972:	88ba      	ldrh	r2, [r7, #4]
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	4413      	add	r3, r2
 8000978:	461a      	mov	r2, r3
 800097a:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <modbusRead1Register+0xe8>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	429a      	cmp	r2, r3
 8000982:	d903      	bls.n	800098c <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000984:	2002      	movs	r0, #2
 8000986:	f000 f843 	bl	8000a10 <ModbusErrorReply>
		 return;
 800098a:	e03b      	b.n	8000a04 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800098c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <modbusRead1Register+0xe8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2203      	movs	r2, #3
 8000992:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <modbusRead1Register+0xe8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	0052      	lsls	r2, r2, #1
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80009a6:	2400      	movs	r4, #0
 80009a8:	e020      	b.n	80009ec <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	685a      	ldr	r2, [r3, #4]
 80009b0:	88bb      	ldrh	r3, [r7, #4]
 80009b2:	4423      	add	r3, r4
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	18d1      	adds	r1, r2, r3
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	1c63      	adds	r3, r4, #1
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	7849      	ldrb	r1, [r1, #1]
 80009c2:	4413      	add	r3, r2
 80009c4:	460a      	mov	r2, r1
 80009c6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	88bb      	ldrh	r3, [r7, #4]
 80009d2:	4423      	add	r3, r4
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	18d1      	adds	r1, r2, r3
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	0063      	lsls	r3, r4, #1
 80009de:	3303      	adds	r3, #3
 80009e0:	7809      	ldrb	r1, [r1, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	460a      	mov	r2, r1
 80009e6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80009ea:	3401      	adds	r4, #1
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	429c      	cmp	r4, r3
 80009f0:	dbdb      	blt.n	80009aa <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	3301      	adds	r3, #1
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	0052      	lsls	r2, r2, #1
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000228 	.word	0x20000228

08000a10 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	7e1a      	ldrb	r2, [r3, #24]
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000228 	.word	0x20000228

08000a54 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <Modbus_frame_response+0x2c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	7e1b      	ldrb	r3, [r3, #24]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d004      	beq.n	8000a6c <Modbus_frame_response+0x18>
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d105      	bne.n	8000a72 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000a66:	f7ff ff1d 	bl	80008a4 <modbusWrite1Register>
		break;
 8000a6a:	e006      	b.n	8000a7a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000a6c:	f7ff ff5a 	bl	8000924 <modbusRead1Register>
		break;
 8000a70:	e003      	b.n	8000a7a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff ffcc 	bl	8000a10 <ModbusErrorReply>
		break;
 8000a78:	bf00      	nop

	}
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000228 	.word	0x20000228

08000a84 <Modbus_Emission>:

void Modbus_Emission()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000a8a:	4b38      	ldr	r3, [pc, #224]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a94:	2b20      	cmp	r3, #32
 8000a96:	d15d      	bne.n	8000b54 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000a98:	4b34      	ldr	r3, [pc, #208]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b33      	ldr	r3, [pc, #204]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000aa6:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000aae:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f007 fb45 	bl	8008150 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000ac6:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3203      	adds	r2, #3
 8000ad6:	b292      	uxth	r2, r2
 8000ad8:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000adc:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000aec:	3b02      	subs	r3, #2
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f7ff fd9f 	bl	8000634 <CRC16>
 8000af6:	4603      	mov	r3, r0
 8000af8:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000afa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b06:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000b08:	7939      	ldrb	r1, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b1e:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000b20:	7979      	ldrb	r1, [r7, #5]
 8000b22:	4413      	add	r3, r2
 8000b24:	460a      	mov	r2, r1
 8000b26:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b34:	2b20      	cmp	r3, #32
 8000b36:	d10d      	bne.n	8000b54 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000b46:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b4a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f005 fcf8 	bl	8006544 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2200      	movs	r2, #0
 8000b62:	755a      	strb	r2, [r3, #21]

}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000228 	.word	0x20000228

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f001 fa2e 	bl	8001fd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 fa4d 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f000 fd9d 	bl	80016bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000b82:	f000 fd4d 	bl	8001620 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000b86:	f000 fcb1 	bl	80014ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b8a:	f000 fcfb 	bl	8001584 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000b8e:	f000 fa8f 	bl	80010b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b92:	f000 fb61 	bl	8001258 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b96:	f000 fbb3 	bl	8001300 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000b9a:	f000 fc27 	bl	80013ec <MX_TIM5_Init>
  MX_TIM16_Init();
 8000b9e:	f000 fc75 	bl	800148c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // @User: Setup UART 1 for communication with joy stick
  HAL_UART_Receive_DMA(&huart1, joystickPayload, 10);
 8000ba2:	220a      	movs	r2, #10
 8000ba4:	497e      	ldr	r1, [pc, #504]	@ (8000da0 <main+0x230>)
 8000ba6:	487f      	ldr	r0, [pc, #508]	@ (8000da4 <main+0x234>)
 8000ba8:	f005 fd4c 	bl	8006644 <HAL_UART_Receive_DMA>

  // @User: Setup UART 2 for communication with Base system
  HAL_TIM_Base_Start_IT(&htim5); //open Timer 5 (interrupt)
 8000bac:	487e      	ldr	r0, [pc, #504]	@ (8000da8 <main+0x238>)
 8000bae:	f003 f97b 	bl	8003ea8 <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 8000bb2:	4b7e      	ldr	r3, [pc, #504]	@ (8000dac <main+0x23c>)
 8000bb4:	4a7e      	ldr	r2, [pc, #504]	@ (8000db0 <main+0x240>)
 8000bb6:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8000bb8:	4b7c      	ldr	r3, [pc, #496]	@ (8000dac <main+0x23c>)
 8000bba:	4a7e      	ldr	r2, [pc, #504]	@ (8000db4 <main+0x244>)
 8000bbc:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8000bbe:	4b7b      	ldr	r3, [pc, #492]	@ (8000dac <main+0x23c>)
 8000bc0:	2215      	movs	r2, #21
 8000bc2:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8000bc4:	4b79      	ldr	r3, [pc, #484]	@ (8000dac <main+0x23c>)
 8000bc6:	22c8      	movs	r2, #200	@ 0xc8
 8000bc8:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8000bca:	497b      	ldr	r1, [pc, #492]	@ (8000db8 <main+0x248>)
 8000bcc:	4877      	ldr	r0, [pc, #476]	@ (8000dac <main+0x23c>)
 8000bce:	f7ff fcdb 	bl	8000588 <Modbus_init>
  reed = 0;
 8000bd2:	4b7a      	ldr	r3, [pc, #488]	@ (8000dbc <main+0x24c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]

  shelfPos[0] = 1;
 8000bd8:	4b79      	ldr	r3, [pc, #484]	@ (8000dc0 <main+0x250>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	801a      	strh	r2, [r3, #0]
  shelfPos[1] = 2;
 8000bde:	4b78      	ldr	r3, [pc, #480]	@ (8000dc0 <main+0x250>)
 8000be0:	2202      	movs	r2, #2
 8000be2:	805a      	strh	r2, [r3, #2]
  shelfPos[2] = 3;
 8000be4:	4b76      	ldr	r3, [pc, #472]	@ (8000dc0 <main+0x250>)
 8000be6:	2203      	movs	r2, #3
 8000be8:	809a      	strh	r2, [r3, #4]
  shelfPos[3] = 4;
 8000bea:	4b75      	ldr	r3, [pc, #468]	@ (8000dc0 <main+0x250>)
 8000bec:	2204      	movs	r2, #4
 8000bee:	80da      	strh	r2, [r3, #6]
  shelfPos[4] = 5;
 8000bf0:	4b73      	ldr	r3, [pc, #460]	@ (8000dc0 <main+0x250>)
 8000bf2:	2205      	movs	r2, #5
 8000bf4:	811a      	strh	r2, [r3, #8]

  // @User: Setup Timer 1 for Motor drive
  HAL_TIM_Base_Start(&htim1);
 8000bf6:	4873      	ldr	r0, [pc, #460]	@ (8000dc4 <main+0x254>)
 8000bf8:	f003 f8e6 	bl	8003dc8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4871      	ldr	r0, [pc, #452]	@ (8000dc4 <main+0x254>)
 8000c00:	f003 fa38 	bl	8004074 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c04:	2104      	movs	r1, #4
 8000c06:	486f      	ldr	r0, [pc, #444]	@ (8000dc4 <main+0x254>)
 8000c08:	f003 fa34 	bl	8004074 <HAL_TIM_PWM_Start>

  // @User: Setup Timer 2 as encoder interface
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000c0c:	213c      	movs	r1, #60	@ 0x3c
 8000c0e:	486e      	ldr	r0, [pc, #440]	@ (8000dc8 <main+0x258>)
 8000c10:	f003 fdea 	bl	80047e8 <HAL_TIM_Encoder_Start>


  // @User: Setup Timer 3 for sending led data
  HAL_TIM_Base_Start(&htim3);
 8000c14:	486d      	ldr	r0, [pc, #436]	@ (8000dcc <main+0x25c>)
 8000c16:	f003 f8d7 	bl	8003dc8 <HAL_TIM_Base_Start>
    /* USER CODE BEGIN 3 */



	  // TODO: Test encoder QEI, remove later
	  qeiRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000c1a:	4b6b      	ldr	r3, [pc, #428]	@ (8000dc8 <main+0x258>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c20:	4a6b      	ldr	r2, [pc, #428]	@ (8000dd0 <main+0x260>)
 8000c22:	6013      	str	r3, [r2, #0]

	  Modbus_Protocal_Worker();
 8000c24:	f7ff fd3c 	bl	80006a0 <Modbus_Protocal_Worker>
	  vacuum = registerFrame[0x02].U16;
 8000c28:	4b63      	ldr	r3, [pc, #396]	@ (8000db8 <main+0x248>)
 8000c2a:	889b      	ldrh	r3, [r3, #4]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b69      	ldr	r3, [pc, #420]	@ (8000dd4 <main+0x264>)
 8000c30:	701a      	strb	r2, [r3, #0]
	  gripper = registerFrame[0x03].U16;
 8000c32:	4b61      	ldr	r3, [pc, #388]	@ (8000db8 <main+0x248>)
 8000c34:	88db      	ldrh	r3, [r3, #6]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	4b67      	ldr	r3, [pc, #412]	@ (8000dd8 <main+0x268>)
 8000c3a:	701a      	strb	r2, [r3, #0]
	  registerFrame[0x04].U16 = reed;
 8000c3c:	4b5f      	ldr	r3, [pc, #380]	@ (8000dbc <main+0x24c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b5d      	ldr	r3, [pc, #372]	@ (8000db8 <main+0x248>)
 8000c44:	811a      	strh	r2, [r3, #8]

	  ///*MODBUS PART
	  if(registerFrame[0x00].U16 != 22881){
 8000c46:	4b5c      	ldr	r3, [pc, #368]	@ (8000db8 <main+0x248>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	f645 1261 	movw	r2, #22881	@ 0x5961
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d009      	beq.n	8000c66 <main+0xf6>
		  registerFrame[0x00].U16 = 22881;
 8000c52:	4b59      	ldr	r3, [pc, #356]	@ (8000db8 <main+0x248>)
 8000c54:	f645 1261 	movw	r2, #22881	@ 0x5961
 8000c58:	801a      	strh	r2, [r3, #0]
		  deb++;
 8000c5a:	4b60      	ldr	r3, [pc, #384]	@ (8000ddc <main+0x26c>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b5e      	ldr	r3, [pc, #376]	@ (8000ddc <main+0x26c>)
 8000c64:	701a      	strb	r2, [r3, #0]
	  }


 	  static uint16_t timestamp = 0;
 	  //Set shelves
 	  if(registerFrame[0x01].U16 == 1)
 8000c66:	4b54      	ldr	r3, [pc, #336]	@ (8000db8 <main+0x248>)
 8000c68:	885b      	ldrh	r3, [r3, #2]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d127      	bne.n	8000cbe <main+0x14e>
 	  {
 		  registerFrame[0x01].U16 = 0;
 8000c6e:	4b52      	ldr	r3, [pc, #328]	@ (8000db8 <main+0x248>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	805a      	strh	r2, [r3, #2]
 		  registerFrame[0x10].U16 = 1;
 8000c74:	4b50      	ldr	r3, [pc, #320]	@ (8000db8 <main+0x248>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	841a      	strh	r2, [r3, #32]
 		  registerFrame[0x23].U16 = shelfPos[0];
 8000c7a:	4b51      	ldr	r3, [pc, #324]	@ (8000dc0 <main+0x250>)
 8000c7c:	881a      	ldrh	r2, [r3, #0]
 8000c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8000db8 <main+0x248>)
 8000c80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 		  registerFrame[0x24].U16 = shelfPos[1];
 8000c84:	4b4e      	ldr	r3, [pc, #312]	@ (8000dc0 <main+0x250>)
 8000c86:	885a      	ldrh	r2, [r3, #2]
 8000c88:	4b4b      	ldr	r3, [pc, #300]	@ (8000db8 <main+0x248>)
 8000c8a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 		  registerFrame[0x25].U16 = shelfPos[2];
 8000c8e:	4b4c      	ldr	r3, [pc, #304]	@ (8000dc0 <main+0x250>)
 8000c90:	889a      	ldrh	r2, [r3, #4]
 8000c92:	4b49      	ldr	r3, [pc, #292]	@ (8000db8 <main+0x248>)
 8000c94:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
 		  registerFrame[0x26].U16 = shelfPos[3];
 8000c98:	4b49      	ldr	r3, [pc, #292]	@ (8000dc0 <main+0x250>)
 8000c9a:	88da      	ldrh	r2, [r3, #6]
 8000c9c:	4b46      	ldr	r3, [pc, #280]	@ (8000db8 <main+0x248>)
 8000c9e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 		  registerFrame[0x27].U16 = shelfPos[4];
 8000ca2:	4b47      	ldr	r3, [pc, #284]	@ (8000dc0 <main+0x250>)
 8000ca4:	891a      	ldrh	r2, [r3, #8]
 8000ca6:	4b44      	ldr	r3, [pc, #272]	@ (8000db8 <main+0x248>)
 8000ca8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 		  //delay 2000ms
 		  timestamp = HAL_GetTick()+2000;
 8000cac:	f001 f9f8 	bl	80020a0 <HAL_GetTick>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	4b49      	ldr	r3, [pc, #292]	@ (8000de0 <main+0x270>)
 8000cbc:	801a      	strh	r2, [r3, #0]
 	  }
 	  if(HAL_GetTick() >= timestamp && (registerFrame[0x10].U16 == 1))
 8000cbe:	f001 f9ef 	bl	80020a0 <HAL_GetTick>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4a46      	ldr	r2, [pc, #280]	@ (8000de0 <main+0x270>)
 8000cc6:	8812      	ldrh	r2, [r2, #0]
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d306      	bcc.n	8000cda <main+0x16a>
 8000ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8000db8 <main+0x248>)
 8000cce:	8c1b      	ldrh	r3, [r3, #32]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d102      	bne.n	8000cda <main+0x16a>
 	  {
 		  registerFrame[0x10].U16 = 0;
 8000cd4:	4b38      	ldr	r3, [pc, #224]	@ (8000db8 <main+0x248>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	841a      	strh	r2, [r3, #32]
 	  }
 	  //Home
 	  if(registerFrame[0x01].U16 == 2)
 8000cda:	4b37      	ldr	r3, [pc, #220]	@ (8000db8 <main+0x248>)
 8000cdc:	885b      	ldrh	r3, [r3, #2]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d109      	bne.n	8000cf6 <main+0x186>
 	  {
 		  registerFrame[0x01].U16 = 0;
 8000ce2:	4b35      	ldr	r3, [pc, #212]	@ (8000db8 <main+0x248>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	805a      	strh	r2, [r3, #2]
 		  registerFrame[0x10].U16 = 2;
 8000ce8:	4b33      	ldr	r3, [pc, #204]	@ (8000db8 <main+0x248>)
 8000cea:	2202      	movs	r2, #2
 8000cec:	841a      	strh	r2, [r3, #32]
 		  setPos =  shelfPos[0];
 8000cee:	4b34      	ldr	r3, [pc, #208]	@ (8000dc0 <main+0x250>)
 8000cf0:	881a      	ldrh	r2, [r3, #0]
 8000cf2:	4b3c      	ldr	r3, [pc, #240]	@ (8000de4 <main+0x274>)
 8000cf4:	801a      	strh	r2, [r3, #0]
 	  }
 	  //point mode
 	  if(registerFrame[0x01].U16 == 8)
 8000cf6:	4b30      	ldr	r3, [pc, #192]	@ (8000db8 <main+0x248>)
 8000cf8:	885b      	ldrh	r3, [r3, #2]
 8000cfa:	2b08      	cmp	r3, #8
 8000cfc:	d10a      	bne.n	8000d14 <main+0x1a4>
 	  {
 		  registerFrame[0x01].U16 = 0;
 8000cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8000db8 <main+0x248>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	805a      	strh	r2, [r3, #2]
 		  registerFrame[0x10].U16 = 16;
 8000d04:	4b2c      	ldr	r3, [pc, #176]	@ (8000db8 <main+0x248>)
 8000d06:	2210      	movs	r2, #16
 8000d08:	841a      	strh	r2, [r3, #32]
 		  setPos =  registerFrame[0x30].U16;
 8000d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000db8 <main+0x248>)
 8000d0c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8000d10:	4b34      	ldr	r3, [pc, #208]	@ (8000de4 <main+0x274>)
 8000d12:	801a      	strh	r2, [r3, #0]
 	  }
 	  //reset
 	  if(piingpong == 1 && (registerFrame[0x10].U16 == 2 || registerFrame[0x10].U16 == 16) )//check piingpong status
 8000d14:	4b34      	ldr	r3, [pc, #208]	@ (8000de8 <main+0x278>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d10a      	bne.n	8000d32 <main+0x1c2>
 8000d1c:	4b26      	ldr	r3, [pc, #152]	@ (8000db8 <main+0x248>)
 8000d1e:	8c1b      	ldrh	r3, [r3, #32]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d003      	beq.n	8000d2c <main+0x1bc>
 8000d24:	4b24      	ldr	r3, [pc, #144]	@ (8000db8 <main+0x248>)
 8000d26:	8c1b      	ldrh	r3, [r3, #32]
 8000d28:	2b10      	cmp	r3, #16
 8000d2a:	d102      	bne.n	8000d32 <main+0x1c2>
 	  {
 		  registerFrame[0x10].U16 = 0;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	@ (8000db8 <main+0x248>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	841a      	strh	r2, [r3, #32]
 	  }
 	  //jog mode
 	  if((registerFrame[0x01].U16 == 4))
 8000d32:	4b21      	ldr	r3, [pc, #132]	@ (8000db8 <main+0x248>)
 8000d34:	885b      	ldrh	r3, [r3, #2]
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	f040 809d 	bne.w	8000e76 <main+0x306>
 	  {
 		  registerFrame[0x01].U16 = 0; //reset status
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000db8 <main+0x248>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	805a      	strh	r2, [r3, #2]

 	      temPick = (registerFrame[0x21].U16);
 8000d42:	4b1d      	ldr	r3, [pc, #116]	@ (8000db8 <main+0x248>)
 8000d44:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8000d48:	4b28      	ldr	r3, [pc, #160]	@ (8000dec <main+0x27c>)
 8000d4a:	801a      	strh	r2, [r3, #0]
 	      temPlace = (registerFrame[0x22].U16);
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <main+0x248>)
 8000d4e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <main+0x280>)
 8000d54:	801a      	strh	r2, [r3, #0]
 	      round = 0;
 8000d56:	4b27      	ldr	r3, [pc, #156]	@ (8000df4 <main+0x284>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
 	      ////// Convert to string
 	      for(uint16_t i = 10000;i>=1;i/=10)
 8000d5c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000d60:	80fb      	strh	r3, [r7, #6]
 8000d62:	e083      	b.n	8000e6c <main+0x2fc>
 	      {
 	    	  if(temPick/i == 0 || temPick/i > 5 || temPlace/i == 0 || temPlace/i > 5) // check if 0 or > 5
 8000d64:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <main+0x27c>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	88fa      	ldrh	r2, [r7, #6]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d814      	bhi.n	8000d98 <main+0x228>
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <main+0x27c>)
 8000d70:	881a      	ldrh	r2, [r3, #0]
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	2b05      	cmp	r3, #5
 8000d7c:	d80c      	bhi.n	8000d98 <main+0x228>
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000df0 <main+0x280>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	88fa      	ldrh	r2, [r7, #6]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d807      	bhi.n	8000d98 <main+0x228>
 8000d88:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <main+0x280>)
 8000d8a:	881a      	ldrh	r2, [r3, #0]
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	2b05      	cmp	r3, #5
 8000d96:	d92f      	bls.n	8000df8 <main+0x288>
 	    	  {
 	    		  round = 0;
 8000d98:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <main+0x284>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
 	    		  break;
 8000d9e:	e11f      	b.n	8000fe0 <main+0x470>
 8000da0:	20000940 	.word	0x20000940
 8000da4:	20000688 	.word	0x20000688
 8000da8:	20000490 	.word	0x20000490
 8000dac:	20000954 	.word	0x20000954
 8000db0:	20000754 	.word	0x20000754
 8000db4:	2000055c 	.word	0x2000055c
 8000db8:	20000e30 	.word	0x20000e30
 8000dbc:	20000e2e 	.word	0x20000e2e
 8000dc0:	20000fc0 	.word	0x20000fc0
 8000dc4:	2000022c 	.word	0x2000022c
 8000dc8:	200002f8 	.word	0x200002f8
 8000dcc:	200003c4 	.word	0x200003c4
 8000dd0:	2000094c 	.word	0x2000094c
 8000dd4:	20000e2c 	.word	0x20000e2c
 8000dd8:	20000e2d 	.word	0x20000e2d
 8000ddc:	20000fce 	.word	0x20000fce
 8000de0:	20000fec 	.word	0x20000fec
 8000de4:	20000fcc 	.word	0x20000fcc
 8000de8:	20000fca 	.word	0x20000fca
 8000dec:	20000fd0 	.word	0x20000fd0
 8000df0:	20000fd2 	.word	0x20000fd2
 8000df4:	20000fea 	.word	0x20000fea
 	    	  }
 	    	  pick[round] = temPick/i; // use this for pick
 8000df8:	4b7a      	ldr	r3, [pc, #488]	@ (8000fe4 <main+0x474>)
 8000dfa:	881a      	ldrh	r2, [r3, #0]
 8000dfc:	4b7a      	ldr	r3, [pc, #488]	@ (8000fe8 <main+0x478>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	4b78      	ldr	r3, [pc, #480]	@ (8000fec <main+0x47c>)
 8000e0c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 	    	  place[round] = temPlace/i; // use this for place
 8000e10:	4b77      	ldr	r3, [pc, #476]	@ (8000ff0 <main+0x480>)
 8000e12:	881a      	ldrh	r2, [r3, #0]
 8000e14:	4b74      	ldr	r3, [pc, #464]	@ (8000fe8 <main+0x478>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	4b74      	ldr	r3, [pc, #464]	@ (8000ff4 <main+0x484>)
 8000e24:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 	    	  temPick = temPick%i;
 8000e28:	4b6e      	ldr	r3, [pc, #440]	@ (8000fe4 <main+0x474>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	88fa      	ldrh	r2, [r7, #6]
 8000e2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e32:	fb01 f202 	mul.w	r2, r1, r2
 8000e36:	1a9b      	subs	r3, r3, r2
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	4b6a      	ldr	r3, [pc, #424]	@ (8000fe4 <main+0x474>)
 8000e3c:	801a      	strh	r2, [r3, #0]
 	    	  temPlace = temPlace%i;
 8000e3e:	4b6c      	ldr	r3, [pc, #432]	@ (8000ff0 <main+0x480>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	88fa      	ldrh	r2, [r7, #6]
 8000e44:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e48:	fb01 f202 	mul.w	r2, r1, r2
 8000e4c:	1a9b      	subs	r3, r3, r2
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	4b67      	ldr	r3, [pc, #412]	@ (8000ff0 <main+0x480>)
 8000e52:	801a      	strh	r2, [r3, #0]
 	    	  round++;
 8000e54:	4b64      	ldr	r3, [pc, #400]	@ (8000fe8 <main+0x478>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b62      	ldr	r3, [pc, #392]	@ (8000fe8 <main+0x478>)
 8000e5e:	701a      	strb	r2, [r3, #0]
 	      for(uint16_t i = 10000;i>=1;i/=10)
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	4a65      	ldr	r2, [pc, #404]	@ (8000ff8 <main+0x488>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	08db      	lsrs	r3, r3, #3
 8000e6a:	80fb      	strh	r3, [r7, #6]
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f47f af78 	bne.w	8000d64 <main+0x1f4>
 8000e74:	e6d1      	b.n	8000c1a <main+0xaa>
 	      }
 	  }
 	  else if(round > 0) //  run Jog
 8000e76:	4b5c      	ldr	r3, [pc, #368]	@ (8000fe8 <main+0x478>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 809d 	beq.w	8000fba <main+0x44a>
 	  {
 	  		if(registerFrame[0x10].U16 == 0 && round == 5 && gripper == 0 && reed == 1 && vacuum == 0) // first rev
 8000e80:	4b5e      	ldr	r3, [pc, #376]	@ (8000ffc <main+0x48c>)
 8000e82:	8c1b      	ldrh	r3, [r3, #32]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d11f      	bne.n	8000ec8 <main+0x358>
 8000e88:	4b57      	ldr	r3, [pc, #348]	@ (8000fe8 <main+0x478>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b05      	cmp	r3, #5
 8000e8e:	d11b      	bne.n	8000ec8 <main+0x358>
 8000e90:	4b5b      	ldr	r3, [pc, #364]	@ (8001000 <main+0x490>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d117      	bne.n	8000ec8 <main+0x358>
 8000e98:	4b5a      	ldr	r3, [pc, #360]	@ (8001004 <main+0x494>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d113      	bne.n	8000ec8 <main+0x358>
 8000ea0:	4b59      	ldr	r3, [pc, #356]	@ (8001008 <main+0x498>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10f      	bne.n	8000ec8 <main+0x358>
 	  		{
 	  			(registerFrame[0x10].U16) = 4; // Z-go pick
 8000ea8:	4b54      	ldr	r3, [pc, #336]	@ (8000ffc <main+0x48c>)
 8000eaa:	2204      	movs	r2, #4
 8000eac:	841a      	strh	r2, [r3, #32]
 	  			setPos = shelfPos[pick[5-round]-1];
 8000eae:	4b4e      	ldr	r3, [pc, #312]	@ (8000fe8 <main+0x478>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	f1c3 0305 	rsb	r3, r3, #5
 8000eb6:	4a4d      	ldr	r2, [pc, #308]	@ (8000fec <main+0x47c>)
 8000eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	4a53      	ldr	r2, [pc, #332]	@ (800100c <main+0x49c>)
 8000ec0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ec4:	4b52      	ldr	r3, [pc, #328]	@ (8001010 <main+0x4a0>)
 8000ec6:	801a      	strh	r2, [r3, #0]
 	  		}
 	  		if((piingpong && registerFrame[0x10].U16 == 8)) // prev mode: place, do pick
 8000ec8:	4b52      	ldr	r3, [pc, #328]	@ (8001014 <main+0x4a4>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d03c      	beq.n	8000f4a <main+0x3da>
 8000ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8000ffc <main+0x48c>)
 8000ed2:	8c1b      	ldrh	r3, [r3, #32]
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d138      	bne.n	8000f4a <main+0x3da>
 	  		{
 	  			///////place down

 	  			if(reed != 2){
 8000ed8:	4b4a      	ldr	r3, [pc, #296]	@ (8001004 <main+0x494>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d003      	beq.n	8000ee8 <main+0x378>
 	  				registerFrame[0x03].U16 = 1; // gripper forward
 8000ee0:	4b46      	ldr	r3, [pc, #280]	@ (8000ffc <main+0x48c>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	80da      	strh	r2, [r3, #6]
 8000ee6:	e005      	b.n	8000ef4 <main+0x384>
 	  			}
 	  			else //reached
 	  			{
 	  				registerFrame[0x02].U16 = 0; //vacuum off
 8000ee8:	4b44      	ldr	r3, [pc, #272]	@ (8000ffc <main+0x48c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	809a      	strh	r2, [r3, #4]
 	  					//Delay a few sec
 	  				registerFrame[0x03].U16 = 0; //gripper backward
 8000eee:	4b43      	ldr	r3, [pc, #268]	@ (8000ffc <main+0x48c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	80da      	strh	r2, [r3, #6]
 	  			}
 	  			///////finish place -> move on
 	  			if(gripper == 0 && reed == 1 && vacuum == 0)
 8000ef4:	4b42      	ldr	r3, [pc, #264]	@ (8001000 <main+0x490>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d170      	bne.n	8000fde <main+0x46e>
 8000efc:	4b41      	ldr	r3, [pc, #260]	@ (8001004 <main+0x494>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d16c      	bne.n	8000fde <main+0x46e>
 8000f04:	4b40      	ldr	r3, [pc, #256]	@ (8001008 <main+0x498>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d168      	bne.n	8000fde <main+0x46e>
 	  			{
 	  				round--;
 8000f0c:	4b36      	ldr	r3, [pc, #216]	@ (8000fe8 <main+0x478>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b34      	ldr	r3, [pc, #208]	@ (8000fe8 <main+0x478>)
 8000f16:	701a      	strb	r2, [r3, #0]
 	  				if(round>0)
 8000f18:	4b33      	ldr	r3, [pc, #204]	@ (8000fe8 <main+0x478>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d010      	beq.n	8000f42 <main+0x3d2>
 	  				{
 	  					(registerFrame[0x10].U16) = 4; // Z-go pick
 8000f20:	4b36      	ldr	r3, [pc, #216]	@ (8000ffc <main+0x48c>)
 8000f22:	2204      	movs	r2, #4
 8000f24:	841a      	strh	r2, [r3, #32]
 	  					setPos = shelfPos[pick[5-round]-1];
 8000f26:	4b30      	ldr	r3, [pc, #192]	@ (8000fe8 <main+0x478>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	f1c3 0305 	rsb	r3, r3, #5
 8000f2e:	4a2f      	ldr	r2, [pc, #188]	@ (8000fec <main+0x47c>)
 8000f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	4a35      	ldr	r2, [pc, #212]	@ (800100c <main+0x49c>)
 8000f38:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f3c:	4b34      	ldr	r3, [pc, #208]	@ (8001010 <main+0x4a0>)
 8000f3e:	801a      	strh	r2, [r3, #0]
 	  			if(gripper == 0 && reed == 1 && vacuum == 0)
 8000f40:	e04d      	b.n	8000fde <main+0x46e>
 	  				}
 	  				else
 	  				{
 	  					(registerFrame[0x10].U16 = 0); // End Jogs
 8000f42:	4b2e      	ldr	r3, [pc, #184]	@ (8000ffc <main+0x48c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	841a      	strh	r2, [r3, #32]
 	  			if(gripper == 0 && reed == 1 && vacuum == 0)
 8000f48:	e049      	b.n	8000fde <main+0x46e>
 	  				}
 	  			}
 	  			//MoveTosetPos();
 	  		}
 	  		else if(piingpong && registerFrame[0x10].U16 == 4)// prev mode: pick, do place
 8000f4a:	4b32      	ldr	r3, [pc, #200]	@ (8001014 <main+0x4a4>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f43f ae63 	beq.w	8000c1a <main+0xaa>
 8000f54:	4b29      	ldr	r3, [pc, #164]	@ (8000ffc <main+0x48c>)
 8000f56:	8c1b      	ldrh	r3, [r3, #32]
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	f47f ae5e 	bne.w	8000c1a <main+0xaa>
 	  		{
 	  			//////pick up
 	  			if(reed != 2)
 8000f5e:	4b29      	ldr	r3, [pc, #164]	@ (8001004 <main+0x494>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d003      	beq.n	8000f6e <main+0x3fe>
 	  			{
 	  				registerFrame[0x03].U16 = 1; //gripper forward
 8000f66:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <main+0x48c>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	80da      	strh	r2, [r3, #6]
 8000f6c:	e005      	b.n	8000f7a <main+0x40a>
 	  			}
 	  			else
 	  			{
 	  				registerFrame[0x02].U16 = 1; //vacuum on
 8000f6e:	4b23      	ldr	r3, [pc, #140]	@ (8000ffc <main+0x48c>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	809a      	strh	r2, [r3, #4]
 	  				// Delay a few sec
 	  				registerFrame[0x03].U16 = 0; //gripper backward
 8000f74:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <main+0x48c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	80da      	strh	r2, [r3, #6]
 	  			}
 	  			///////finish pick -> move on
 	  			if(gripper == 0 && reed == 1 && vacuum == 1)
 8000f7a:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <main+0x490>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f47f ae4b 	bne.w	8000c1a <main+0xaa>
 8000f84:	4b1f      	ldr	r3, [pc, #124]	@ (8001004 <main+0x494>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	f47f ae46 	bne.w	8000c1a <main+0xaa>
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001008 <main+0x498>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	f47f ae41 	bne.w	8000c1a <main+0xaa>
 	  			{
 	  				(registerFrame[0x10].U16) = 8; // Z-go place
 8000f98:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <main+0x48c>)
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	841a      	strh	r2, [r3, #32]
 	  				setPos = shelfPos[place[5-round]-1];
 8000f9e:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <main+0x478>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	f1c3 0305 	rsb	r3, r3, #5
 8000fa6:	4a13      	ldr	r2, [pc, #76]	@ (8000ff4 <main+0x484>)
 8000fa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	4a17      	ldr	r2, [pc, #92]	@ (800100c <main+0x49c>)
 8000fb0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000fb4:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <main+0x4a0>)
 8000fb6:	801a      	strh	r2, [r3, #0]
 8000fb8:	e62f      	b.n	8000c1a <main+0xaa>
 	  			}
 	  		}

 	  	}

 	  	else if(piingpong && (registerFrame[0x10].U16 == 2 || registerFrame[0x10].U16 == 16))
 8000fba:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <main+0x4a4>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f43f ae2b 	beq.w	8000c1a <main+0xaa>
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ffc <main+0x48c>)
 8000fc6:	8c1b      	ldrh	r3, [r3, #32]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d004      	beq.n	8000fd6 <main+0x466>
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <main+0x48c>)
 8000fce:	8c1b      	ldrh	r3, [r3, #32]
 8000fd0:	2b10      	cmp	r3, #16
 8000fd2:	f47f ae22 	bne.w	8000c1a <main+0xaa>
 	  	{
 	  		//finish point & home mode
 	  		registerFrame[0x10].U16 = 0;
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <main+0x48c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	841a      	strh	r2, [r3, #32]
 8000fdc:	e61d      	b.n	8000c1a <main+0xaa>
 	  			if(gripper == 0 && reed == 1 && vacuum == 0)
 8000fde:	bf00      	nop
  {
 8000fe0:	e61b      	b.n	8000c1a <main+0xaa>
 8000fe2:	bf00      	nop
 8000fe4:	20000fd0 	.word	0x20000fd0
 8000fe8:	20000fea 	.word	0x20000fea
 8000fec:	20000fd4 	.word	0x20000fd4
 8000ff0:	20000fd2 	.word	0x20000fd2
 8000ff4:	20000fe0 	.word	0x20000fe0
 8000ff8:	cccccccd 	.word	0xcccccccd
 8000ffc:	20000e30 	.word	0x20000e30
 8001000:	20000e2d 	.word	0x20000e2d
 8001004:	20000e2e 	.word	0x20000e2e
 8001008:	20000e2c 	.word	0x20000e2c
 800100c:	20000fc0 	.word	0x20000fc0
 8001010:	20000fcc 	.word	0x20000fcc
 8001014:	20000fca 	.word	0x20000fca

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b094      	sub	sp, #80	@ 0x50
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0318 	add.w	r3, r7, #24
 8001022:	2238      	movs	r2, #56	@ 0x38
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f007 f866 	bl	80080f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800103a:	2000      	movs	r0, #0
 800103c:	f001 fe30 	bl	8002ca0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001040:	2302      	movs	r3, #2
 8001042:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001044:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104a:	2340      	movs	r3, #64	@ 0x40
 800104c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001052:	2302      	movs	r3, #2
 8001054:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001056:	2304      	movs	r3, #4
 8001058:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800105a:	2355      	movs	r3, #85	@ 0x55
 800105c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800105e:	2302      	movs	r3, #2
 8001060:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001062:	2302      	movs	r3, #2
 8001064:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001066:	2302      	movs	r3, #2
 8001068:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106a:	f107 0318 	add.w	r3, r7, #24
 800106e:	4618      	mov	r0, r3
 8001070:	f001 feca 	bl	8002e08 <HAL_RCC_OscConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800107a:	f000 fc2d 	bl	80018d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107e:	230f      	movs	r3, #15
 8001080:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001082:	2303      	movs	r3, #3
 8001084:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2104      	movs	r1, #4
 8001096:	4618      	mov	r0, r3
 8001098:	f002 f9c8 	bl	800342c <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010a2:	f000 fc19 	bl	80018d8 <Error_Handler>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3750      	adds	r7, #80	@ 0x50
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b09e      	sub	sp, #120	@ 0x78
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80010d0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	615a      	str	r2, [r3, #20]
 80010ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010f0:	463b      	mov	r3, r7
 80010f2:	2234      	movs	r2, #52	@ 0x34
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f006 fffe 	bl	80080f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010fc:	4b54      	ldr	r3, [pc, #336]	@ (8001250 <MX_TIM1_Init+0x1a0>)
 80010fe:	4a55      	ldr	r2, [pc, #340]	@ (8001254 <MX_TIM1_Init+0x1a4>)
 8001100:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001102:	4b53      	ldr	r3, [pc, #332]	@ (8001250 <MX_TIM1_Init+0x1a0>)
 8001104:	2201      	movs	r2, #1
 8001106:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001108:	4b51      	ldr	r3, [pc, #324]	@ (8001250 <MX_TIM1_Init+0x1a0>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800110e:	4b50      	ldr	r3, [pc, #320]	@ (8001250 <MX_TIM1_Init+0x1a0>)
 8001110:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001114:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001116:	4b4e      	ldr	r3, [pc, #312]	@ (8001250 <MX_TIM1_Init+0x1a0>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800111c:	4b4c      	ldr	r3, [pc, #304]	@ (8001250 <MX_TIM1_Init+0x1a0>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001122:	4b4b      	ldr	r3, [pc, #300]	@ (8001250 <MX_TIM1_Init+0x1a0>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001128:	4849      	ldr	r0, [pc, #292]	@ (8001250 <MX_TIM1_Init+0x1a0>)
 800112a:	f002 fde9 	bl	8003d00 <HAL_TIM_Base_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001134:	f000 fbd0 	bl	80018d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800113c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800113e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001142:	4619      	mov	r1, r3
 8001144:	4842      	ldr	r0, [pc, #264]	@ (8001250 <MX_TIM1_Init+0x1a0>)
 8001146:	f003 fe6b 	bl	8004e20 <HAL_TIM_ConfigClockSource>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001150:	f000 fbc2 	bl	80018d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001154:	483e      	ldr	r0, [pc, #248]	@ (8001250 <MX_TIM1_Init+0x1a0>)
 8001156:	f002 ff1f 	bl	8003f98 <HAL_TIM_PWM_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001160:	f000 fbba 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001164:	2300      	movs	r3, #0
 8001166:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001168:	2300      	movs	r3, #0
 800116a:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001170:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001174:	4619      	mov	r1, r3
 8001176:	4836      	ldr	r0, [pc, #216]	@ (8001250 <MX_TIM1_Init+0x1a0>)
 8001178:	f004 fe2e 	bl	8005dd8 <HAL_TIMEx_MasterConfigSynchronization>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001182:	f000 fba9 	bl	80018d8 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001186:	2301      	movs	r3, #1
 8001188:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800118a:	2301      	movs	r3, #1
 800118c:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 800118e:	2301      	movs	r3, #1
 8001190:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001192:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001196:	461a      	mov	r2, r3
 8001198:	2101      	movs	r1, #1
 800119a:	482d      	ldr	r0, [pc, #180]	@ (8001250 <MX_TIM1_Init+0x1a0>)
 800119c:	f004 ff46 	bl	800602c <HAL_TIMEx_ConfigBreakInput>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80011a6:	f000 fb97 	bl	80018d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011aa:	2360      	movs	r3, #96	@ 0x60
 80011ac:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b2:	2300      	movs	r3, #0
 80011b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011b6:	2300      	movs	r3, #0
 80011b8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011ca:	2200      	movs	r2, #0
 80011cc:	4619      	mov	r1, r3
 80011ce:	4820      	ldr	r0, [pc, #128]	@ (8001250 <MX_TIM1_Init+0x1a0>)
 80011d0:	f003 fd12 	bl	8004bf8 <HAL_TIM_PWM_ConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80011da:	f000 fb7d 	bl	80018d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011e2:	2204      	movs	r2, #4
 80011e4:	4619      	mov	r1, r3
 80011e6:	481a      	ldr	r0, [pc, #104]	@ (8001250 <MX_TIM1_Init+0x1a0>)
 80011e8:	f003 fd06 	bl	8004bf8 <HAL_TIM_PWM_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80011f2:	f000 fb71 	bl	80018d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800121c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001226:	2300      	movs	r3, #0
 8001228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	4619      	mov	r1, r3
 8001232:	4807      	ldr	r0, [pc, #28]	@ (8001250 <MX_TIM1_Init+0x1a0>)
 8001234:	f004 fe66 	bl	8005f04 <HAL_TIMEx_ConfigBreakDeadTime>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 800123e:	f000 fb4b 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001242:	4803      	ldr	r0, [pc, #12]	@ (8001250 <MX_TIM1_Init+0x1a0>)
 8001244:	f000 fc78 	bl	8001b38 <HAL_TIM_MspPostInit>

}
 8001248:	bf00      	nop
 800124a:	3778      	adds	r7, #120	@ 0x78
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	2000022c 	.word	0x2000022c
 8001254:	40012c00 	.word	0x40012c00

08001258 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08c      	sub	sp, #48	@ 0x30
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	2224      	movs	r2, #36	@ 0x24
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f006 ff46 	bl	80080f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126c:	463b      	mov	r3, r7
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001276:	4b21      	ldr	r3, [pc, #132]	@ (80012fc <MX_TIM2_Init+0xa4>)
 8001278:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800127c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800127e:	4b1f      	ldr	r3, [pc, #124]	@ (80012fc <MX_TIM2_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <MX_TIM2_Init+0xa4>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800128a:	4b1c      	ldr	r3, [pc, #112]	@ (80012fc <MX_TIM2_Init+0xa4>)
 800128c:	f04f 32ff 	mov.w	r2, #4294967295
 8001290:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <MX_TIM2_Init+0xa4>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001298:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <MX_TIM2_Init+0xa4>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800129e:	2303      	movs	r3, #3
 80012a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a6:	2301      	movs	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b6:	2301      	movs	r3, #1
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	4619      	mov	r1, r3
 80012c8:	480c      	ldr	r0, [pc, #48]	@ (80012fc <MX_TIM2_Init+0xa4>)
 80012ca:	f003 f9d9 	bl	8004680 <HAL_TIM_Encoder_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80012d4:	f000 fb00 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e0:	463b      	mov	r3, r7
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	@ (80012fc <MX_TIM2_Init+0xa4>)
 80012e6:	f004 fd77 	bl	8005dd8 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80012f0:	f000 faf2 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3730      	adds	r7, #48	@ 0x30
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200002f8 	.word	0x200002f8

08001300 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08e      	sub	sp, #56	@ 0x38
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001320:	463b      	mov	r3, r7
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]
 800132e:	615a      	str	r2, [r3, #20]
 8001330:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001332:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <MX_TIM3_Init+0xe4>)
 8001334:	4a2c      	ldr	r2, [pc, #176]	@ (80013e8 <MX_TIM3_Init+0xe8>)
 8001336:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001338:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <MX_TIM3_Init+0xe4>)
 800133a:	2201      	movs	r2, #1
 800133c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133e:	4b29      	ldr	r3, [pc, #164]	@ (80013e4 <MX_TIM3_Init+0xe4>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 106;
 8001344:	4b27      	ldr	r3, [pc, #156]	@ (80013e4 <MX_TIM3_Init+0xe4>)
 8001346:	226a      	movs	r2, #106	@ 0x6a
 8001348:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134a:	4b26      	ldr	r3, [pc, #152]	@ (80013e4 <MX_TIM3_Init+0xe4>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001350:	4b24      	ldr	r3, [pc, #144]	@ (80013e4 <MX_TIM3_Init+0xe4>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001356:	4823      	ldr	r0, [pc, #140]	@ (80013e4 <MX_TIM3_Init+0xe4>)
 8001358:	f002 fcd2 	bl	8003d00 <HAL_TIM_Base_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001362:	f000 fab9 	bl	80018d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001366:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800136c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001370:	4619      	mov	r1, r3
 8001372:	481c      	ldr	r0, [pc, #112]	@ (80013e4 <MX_TIM3_Init+0xe4>)
 8001374:	f003 fd54 	bl	8004e20 <HAL_TIM_ConfigClockSource>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800137e:	f000 faab 	bl	80018d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001382:	4818      	ldr	r0, [pc, #96]	@ (80013e4 <MX_TIM3_Init+0xe4>)
 8001384:	f002 fe08 	bl	8003f98 <HAL_TIM_PWM_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800138e:	f000 faa3 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	4810      	ldr	r0, [pc, #64]	@ (80013e4 <MX_TIM3_Init+0xe4>)
 80013a2:	f004 fd19 	bl	8005dd8 <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013ac:	f000 fa94 	bl	80018d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b0:	2360      	movs	r3, #96	@ 0x60
 80013b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	2204      	movs	r2, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4807      	ldr	r0, [pc, #28]	@ (80013e4 <MX_TIM3_Init+0xe4>)
 80013c8:	f003 fc16 	bl	8004bf8 <HAL_TIM_PWM_ConfigChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013d2:	f000 fa81 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013d6:	4803      	ldr	r0, [pc, #12]	@ (80013e4 <MX_TIM3_Init+0xe4>)
 80013d8:	f000 fbae 	bl	8001b38 <HAL_TIM_MspPostInit>

}
 80013dc:	bf00      	nop
 80013de:	3738      	adds	r7, #56	@ 0x38
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200003c4 	.word	0x200003c4
 80013e8:	40000400 	.word	0x40000400

080013ec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800140a:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <MX_TIM5_Init+0x98>)
 800140c:	4a1e      	ldr	r2, [pc, #120]	@ (8001488 <MX_TIM5_Init+0x9c>)
 800140e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16999;
 8001410:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <MX_TIM5_Init+0x98>)
 8001412:	f244 2267 	movw	r2, #16999	@ 0x4267
 8001416:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <MX_TIM5_Init+0x98>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <MX_TIM5_Init+0x98>)
 8001420:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001424:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <MX_TIM5_Init+0x98>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142c:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <MX_TIM5_Init+0x98>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001432:	4814      	ldr	r0, [pc, #80]	@ (8001484 <MX_TIM5_Init+0x98>)
 8001434:	f002 fc64 	bl	8003d00 <HAL_TIM_Base_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800143e:	f000 fa4b 	bl	80018d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001442:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001446:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	4619      	mov	r1, r3
 800144e:	480d      	ldr	r0, [pc, #52]	@ (8001484 <MX_TIM5_Init+0x98>)
 8001450:	f003 fce6 	bl	8004e20 <HAL_TIM_ConfigClockSource>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800145a:	f000 fa3d 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	@ (8001484 <MX_TIM5_Init+0x98>)
 800146c:	f004 fcb4 	bl	8005dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001476:	f000 fa2f 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	3720      	adds	r7, #32
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000490 	.word	0x20000490
 8001488:	40000c00 	.word	0x40000c00

0800148c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001490:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <MX_TIM16_Init+0x58>)
 8001492:	4a15      	ldr	r2, [pc, #84]	@ (80014e8 <MX_TIM16_Init+0x5c>)
 8001494:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001496:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <MX_TIM16_Init+0x58>)
 8001498:	22a9      	movs	r2, #169	@ 0xa9
 800149a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <MX_TIM16_Init+0x58>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <MX_TIM16_Init+0x58>)
 80014a4:	f240 4279 	movw	r2, #1145	@ 0x479
 80014a8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <MX_TIM16_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <MX_TIM16_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <MX_TIM16_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014bc:	4809      	ldr	r0, [pc, #36]	@ (80014e4 <MX_TIM16_Init+0x58>)
 80014be:	f002 fc1f 	bl	8003d00 <HAL_TIM_Base_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80014c8:	f000 fa06 	bl	80018d8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80014cc:	2108      	movs	r1, #8
 80014ce:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <MX_TIM16_Init+0x58>)
 80014d0:	f002 ffe0 	bl	8004494 <HAL_TIM_OnePulse_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80014da:	f000 f9fd 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000055c 	.word	0x2000055c
 80014e8:	40014400 	.word	0x40014400

080014ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f0:	4b22      	ldr	r3, [pc, #136]	@ (800157c <MX_USART1_UART_Init+0x90>)
 80014f2:	4a23      	ldr	r2, [pc, #140]	@ (8001580 <MX_USART1_UART_Init+0x94>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <MX_USART1_UART_Init+0x90>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <MX_USART1_UART_Init+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <MX_USART1_UART_Init+0x90>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800150a:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <MX_USART1_UART_Init+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <MX_USART1_UART_Init+0x90>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b19      	ldr	r3, [pc, #100]	@ (800157c <MX_USART1_UART_Init+0x90>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b17      	ldr	r3, [pc, #92]	@ (800157c <MX_USART1_UART_Init+0x90>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b16      	ldr	r3, [pc, #88]	@ (800157c <MX_USART1_UART_Init+0x90>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001528:	4b14      	ldr	r3, [pc, #80]	@ (800157c <MX_USART1_UART_Init+0x90>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152e:	4b13      	ldr	r3, [pc, #76]	@ (800157c <MX_USART1_UART_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001534:	4811      	ldr	r0, [pc, #68]	@ (800157c <MX_USART1_UART_Init+0x90>)
 8001536:	f004 feeb 	bl	8006310 <HAL_UART_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001540:	f000 f9ca 	bl	80018d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001544:	2100      	movs	r1, #0
 8001546:	480d      	ldr	r0, [pc, #52]	@ (800157c <MX_USART1_UART_Init+0x90>)
 8001548:	f006 fd0b 	bl	8007f62 <HAL_UARTEx_SetTxFifoThreshold>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001552:	f000 f9c1 	bl	80018d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001556:	2100      	movs	r1, #0
 8001558:	4808      	ldr	r0, [pc, #32]	@ (800157c <MX_USART1_UART_Init+0x90>)
 800155a:	f006 fd40 	bl	8007fde <HAL_UARTEx_SetRxFifoThreshold>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001564:	f000 f9b8 	bl	80018d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	@ (800157c <MX_USART1_UART_Init+0x90>)
 800156a:	f006 fcc1 	bl	8007ef0 <HAL_UARTEx_DisableFifoMode>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001574:	f000 f9b0 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000688 	.word	0x20000688
 8001580:	40013800 	.word	0x40013800

08001584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001588:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <MX_USART2_UART_Init+0x94>)
 800158a:	4a24      	ldr	r2, [pc, #144]	@ (800161c <MX_USART2_UART_Init+0x98>)
 800158c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800158e:	4b22      	ldr	r3, [pc, #136]	@ (8001618 <MX_USART2_UART_Init+0x94>)
 8001590:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001596:	4b20      	ldr	r3, [pc, #128]	@ (8001618 <MX_USART2_UART_Init+0x94>)
 8001598:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800159c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800159e:	4b1e      	ldr	r3, [pc, #120]	@ (8001618 <MX_USART2_UART_Init+0x94>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80015a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <MX_USART2_UART_Init+0x94>)
 80015a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <MX_USART2_UART_Init+0x94>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <MX_USART2_UART_Init+0x94>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <MX_USART2_UART_Init+0x94>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015be:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <MX_USART2_UART_Init+0x94>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <MX_USART2_UART_Init+0x94>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ca:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <MX_USART2_UART_Init+0x94>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015d0:	4811      	ldr	r0, [pc, #68]	@ (8001618 <MX_USART2_UART_Init+0x94>)
 80015d2:	f004 fe9d 	bl	8006310 <HAL_UART_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80015dc:	f000 f97c 	bl	80018d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e0:	2100      	movs	r1, #0
 80015e2:	480d      	ldr	r0, [pc, #52]	@ (8001618 <MX_USART2_UART_Init+0x94>)
 80015e4:	f006 fcbd 	bl	8007f62 <HAL_UARTEx_SetTxFifoThreshold>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80015ee:	f000 f973 	bl	80018d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f2:	2100      	movs	r1, #0
 80015f4:	4808      	ldr	r0, [pc, #32]	@ (8001618 <MX_USART2_UART_Init+0x94>)
 80015f6:	f006 fcf2 	bl	8007fde <HAL_UARTEx_SetRxFifoThreshold>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001600:	f000 f96a 	bl	80018d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001604:	4804      	ldr	r0, [pc, #16]	@ (8001618 <MX_USART2_UART_Init+0x94>)
 8001606:	f006 fc73 	bl	8007ef0 <HAL_UARTEx_DisableFifoMode>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001610:	f000 f962 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000754 	.word	0x20000754
 800161c:	40004400 	.word	0x40004400

08001620 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001626:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <MX_DMA_Init+0x98>)
 8001628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800162a:	4a23      	ldr	r2, [pc, #140]	@ (80016b8 <MX_DMA_Init+0x98>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6493      	str	r3, [r2, #72]	@ 0x48
 8001632:	4b21      	ldr	r3, [pc, #132]	@ (80016b8 <MX_DMA_Init+0x98>)
 8001634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800163e:	4b1e      	ldr	r3, [pc, #120]	@ (80016b8 <MX_DMA_Init+0x98>)
 8001640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001642:	4a1d      	ldr	r2, [pc, #116]	@ (80016b8 <MX_DMA_Init+0x98>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6493      	str	r3, [r2, #72]	@ 0x48
 800164a:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <MX_DMA_Init+0x98>)
 800164c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001656:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <MX_DMA_Init+0x98>)
 8001658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800165a:	4a17      	ldr	r2, [pc, #92]	@ (80016b8 <MX_DMA_Init+0x98>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6493      	str	r3, [r2, #72]	@ 0x48
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <MX_DMA_Init+0x98>)
 8001664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	200b      	movs	r0, #11
 8001674:	f000 fdfb 	bl	800226e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001678:	200b      	movs	r0, #11
 800167a:	f000 fe12 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	200c      	movs	r0, #12
 8001684:	f000 fdf3 	bl	800226e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001688:	200c      	movs	r0, #12
 800168a:	f000 fe0a 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	200d      	movs	r0, #13
 8001694:	f000 fdeb 	bl	800226e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001698:	200d      	movs	r0, #13
 800169a:	f000 fe02 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	2039      	movs	r0, #57	@ 0x39
 80016a4:	f000 fde3 	bl	800226e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80016a8:	2039      	movs	r0, #57	@ 0x39
 80016aa:	f000 fdfa 	bl	80022a2 <HAL_NVIC_EnableIRQ>

}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000

080016bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	@ 0x28
 80016c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	4b57      	ldr	r3, [pc, #348]	@ (8001830 <MX_GPIO_Init+0x174>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d6:	4a56      	ldr	r2, [pc, #344]	@ (8001830 <MX_GPIO_Init+0x174>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016de:	4b54      	ldr	r3, [pc, #336]	@ (8001830 <MX_GPIO_Init+0x174>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ea:	4b51      	ldr	r3, [pc, #324]	@ (8001830 <MX_GPIO_Init+0x174>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ee:	4a50      	ldr	r2, [pc, #320]	@ (8001830 <MX_GPIO_Init+0x174>)
 80016f0:	f043 0320 	orr.w	r3, r3, #32
 80016f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016f6:	4b4e      	ldr	r3, [pc, #312]	@ (8001830 <MX_GPIO_Init+0x174>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fa:	f003 0320 	and.w	r3, r3, #32
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b4b      	ldr	r3, [pc, #300]	@ (8001830 <MX_GPIO_Init+0x174>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001706:	4a4a      	ldr	r2, [pc, #296]	@ (8001830 <MX_GPIO_Init+0x174>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800170e:	4b48      	ldr	r3, [pc, #288]	@ (8001830 <MX_GPIO_Init+0x174>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	4b45      	ldr	r3, [pc, #276]	@ (8001830 <MX_GPIO_Init+0x174>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	4a44      	ldr	r2, [pc, #272]	@ (8001830 <MX_GPIO_Init+0x174>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001726:	4b42      	ldr	r3, [pc, #264]	@ (8001830 <MX_GPIO_Init+0x174>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	f240 4111 	movw	r1, #1041	@ 0x411
 8001738:	483e      	ldr	r0, [pc, #248]	@ (8001834 <MX_GPIO_Init+0x178>)
 800173a:	f001 fa81 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2180      	movs	r1, #128	@ 0x80
 8001742:	483d      	ldr	r0, [pc, #244]	@ (8001838 <MX_GPIO_Init+0x17c>)
 8001744:	f001 fa7c 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001748:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800174e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4836      	ldr	r0, [pc, #216]	@ (8001838 <MX_GPIO_Init+0x17c>)
 8001760:	f001 f8ec 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001764:	2380      	movs	r3, #128	@ 0x80
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001768:	2300      	movs	r3, #0
 800176a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176c:	2301      	movs	r3, #1
 800176e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800177a:	f001 f8df 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4;
 800177e:	f240 4311 	movw	r3, #1041	@ 0x411
 8001782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	4619      	mov	r1, r3
 8001796:	4827      	ldr	r0, [pc, #156]	@ (8001834 <MX_GPIO_Init+0x178>)
 8001798:	f001 f8d0 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800179c:	2380      	movs	r3, #128	@ 0x80
 800179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	4821      	ldr	r0, [pc, #132]	@ (8001838 <MX_GPIO_Init+0x17c>)
 80017b4:	f001 f8c2 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d2:	f001 f8b3 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017d6:	2320      	movs	r3, #32
 80017d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	4812      	ldr	r0, [pc, #72]	@ (8001834 <MX_GPIO_Init+0x178>)
 80017ec:	f001 f8a6 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017f0:	2340      	movs	r3, #64	@ 0x40
 80017f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	480c      	ldr	r0, [pc, #48]	@ (8001834 <MX_GPIO_Init+0x178>)
 8001804:	f001 f89a 	bl	800293c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	2017      	movs	r0, #23
 800180e:	f000 fd2e 	bl	800226e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001812:	2017      	movs	r0, #23
 8001814:	f000 fd45 	bl	80022a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2100      	movs	r1, #0
 800181c:	2028      	movs	r0, #40	@ 0x28
 800181e:	f000 fd26 	bl	800226e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001822:	2028      	movs	r0, #40	@ 0x28
 8001824:	f000 fd3d 	bl	80022a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	@ 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000
 8001834:	48000400 	.word	0x48000400
 8001838:	48000800 	.word	0x48000800

0800183c <HAL_GPIO_EXTI_Callback>:
uint8_t getZStop(){
	return zStop;
}

// @User : Stop motor when hit the end stop
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_5 || GPIO_Pin == GPIO_PIN_10){
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	2b20      	cmp	r3, #32
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_EXTI_Callback+0x18>
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001852:	d10a      	bne.n	800186a <HAL_GPIO_EXTI_Callback+0x2e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001854:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2200      	movs	r2, #0
 800185a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_GPIO_EXTI_Callback+0x3c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2200      	movs	r2, #0
 8001862:	639a      	str	r2, [r3, #56]	@ 0x38
		zStop = 1;
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <HAL_GPIO_EXTI_Callback+0x40>)
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
	}
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	2000022c 	.word	0x2000022c
 800187c:	20000950 	.word	0x20000950

08001880 <HAL_TIM_PWM_PulseFinishedCallback>:


// @User : Stop timer3 that send data to led
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3){
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d103      	bne.n	800189a <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 8001892:	2104      	movs	r1, #4
 8001894:	4804      	ldr	r0, [pc, #16]	@ (80018a8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8001896:	f002 fcff 	bl	8004298 <HAL_TIM_PWM_Stop_DMA>
	}

}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40000400 	.word	0x40000400
 80018a8:	200003c4 	.word	0x200003c4

080018ac <HAL_TIM_PeriodElapsedCallback>:

//Callback -> Timer finish
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a06      	ldr	r2, [pc, #24]	@ (80018d0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d103      	bne.n	80018c4 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		registerFrame[0x00].U16 = 22881; //send "Ya"
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80018be:	f645 1261 	movw	r2, #22881	@ 0x5961
 80018c2:	801a      	strh	r2, [r3, #0]
	}

}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	20000490 	.word	0x20000490
 80018d4:	20000e30 	.word	0x20000e30

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <Error_Handler+0x8>

080018e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <HAL_MspInit+0x44>)
 80018ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001928 <HAL_MspInit+0x44>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80018f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <HAL_MspInit+0x44>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <HAL_MspInit+0x44>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001906:	4a08      	ldr	r2, [pc, #32]	@ (8001928 <HAL_MspInit+0x44>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800190c:	6593      	str	r3, [r2, #88]	@ 0x58
 800190e:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_MspInit+0x44>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800191a:	f001 fa65 	bl	8002de8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000

0800192c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08c      	sub	sp, #48	@ 0x30
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a54      	ldr	r2, [pc, #336]	@ (8001a9c <HAL_TIM_Base_MspInit+0x170>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d131      	bne.n	80019b2 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800194e:	4b54      	ldr	r3, [pc, #336]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x174>)
 8001950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001952:	4a53      	ldr	r2, [pc, #332]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x174>)
 8001954:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001958:	6613      	str	r3, [r2, #96]	@ 0x60
 800195a:	4b51      	ldr	r3, [pc, #324]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x174>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800195e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	4b4e      	ldr	r3, [pc, #312]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x174>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196a:	4a4d      	ldr	r2, [pc, #308]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x174>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001972:	4b4b      	ldr	r3, [pc, #300]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x174>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800197e:	2340      	movs	r3, #64	@ 0x40
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001982:	2312      	movs	r3, #18
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001986:	2301      	movs	r3, #1
 8001988:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800198e:	2306      	movs	r3, #6
 8001990:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	4619      	mov	r1, r3
 8001998:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800199c:	f000 ffce 	bl	800293c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2100      	movs	r1, #0
 80019a4:	2019      	movs	r0, #25
 80019a6:	f000 fc62 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019aa:	2019      	movs	r0, #25
 80019ac:	f000 fc79 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80019b0:	e06f      	b.n	8001a92 <HAL_TIM_Base_MspInit+0x166>
  else if(htim_base->Instance==TIM3)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a3b      	ldr	r2, [pc, #236]	@ (8001aa4 <HAL_TIM_Base_MspInit+0x178>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d137      	bne.n	8001a2c <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019bc:	4b38      	ldr	r3, [pc, #224]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x174>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c0:	4a37      	ldr	r2, [pc, #220]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x174>)
 80019c2:	f043 0302 	orr.w	r3, r3, #2
 80019c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80019c8:	4b35      	ldr	r3, [pc, #212]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x174>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Channel3;
 80019d4:	4b34      	ldr	r3, [pc, #208]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x17c>)
 80019d6:	4a35      	ldr	r2, [pc, #212]	@ (8001aac <HAL_TIM_Base_MspInit+0x180>)
 80019d8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80019da:	4b33      	ldr	r3, [pc, #204]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x17c>)
 80019dc:	223e      	movs	r2, #62	@ 0x3e
 80019de:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019e0:	4b31      	ldr	r3, [pc, #196]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x17c>)
 80019e2:	2210      	movs	r2, #16
 80019e4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e6:	4b30      	ldr	r3, [pc, #192]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x17c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80019ec:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x17c>)
 80019ee:	2280      	movs	r2, #128	@ 0x80
 80019f0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019f2:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x17c>)
 80019f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019f8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019fa:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x17c>)
 80019fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a00:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8001a02:	4b29      	ldr	r3, [pc, #164]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x17c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001a08:	4b27      	ldr	r3, [pc, #156]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x17c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8001a0e:	4826      	ldr	r0, [pc, #152]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x17c>)
 8001a10:	f000 fc62 	bl	80022d8 <HAL_DMA_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_TIM_Base_MspInit+0xf2>
      Error_Handler();
 8001a1a:	f7ff ff5d 	bl	80018d8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a21      	ldr	r2, [pc, #132]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x17c>)
 8001a22:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a24:	4a20      	ldr	r2, [pc, #128]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x17c>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001a2a:	e032      	b.n	8001a92 <HAL_TIM_Base_MspInit+0x166>
  else if(htim_base->Instance==TIM5)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab0 <HAL_TIM_Base_MspInit+0x184>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d114      	bne.n	8001a60 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a36:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x174>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3a:	4a19      	ldr	r2, [pc, #100]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x174>)
 8001a3c:	f043 0308 	orr.w	r3, r3, #8
 8001a40:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a42:	4b17      	ldr	r3, [pc, #92]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x174>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	2032      	movs	r0, #50	@ 0x32
 8001a54:	f000 fc0b 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a58:	2032      	movs	r0, #50	@ 0x32
 8001a5a:	f000 fc22 	bl	80022a2 <HAL_NVIC_EnableIRQ>
}
 8001a5e:	e018      	b.n	8001a92 <HAL_TIM_Base_MspInit+0x166>
  else if(htim_base->Instance==TIM16)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a13      	ldr	r2, [pc, #76]	@ (8001ab4 <HAL_TIM_Base_MspInit+0x188>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d113      	bne.n	8001a92 <HAL_TIM_Base_MspInit+0x166>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x174>)
 8001a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x174>)
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a74:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a76:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x174>)
 8001a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	2019      	movs	r0, #25
 8001a88:	f000 fbf1 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a8c:	2019      	movs	r0, #25
 8001a8e:	f000 fc08 	bl	80022a2 <HAL_NVIC_EnableIRQ>
}
 8001a92:	bf00      	nop
 8001a94:	3730      	adds	r7, #48	@ 0x30
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40012c00 	.word	0x40012c00
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40000400 	.word	0x40000400
 8001aa8:	20000628 	.word	0x20000628
 8001aac:	40020030 	.word	0x40020030
 8001ab0:	40000c00 	.word	0x40000c00
 8001ab4:	40014400 	.word	0x40014400

08001ab8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	@ 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ad8:	d128      	bne.n	8001b2c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ada:	4b16      	ldr	r3, [pc, #88]	@ (8001b34 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ade:	4a15      	ldr	r2, [pc, #84]	@ (8001b34 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ae6:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af6:	4a0f      	ldr	r2, [pc, #60]	@ (8001b34 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afe:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8001b0a:	2322      	movs	r3, #34	@ 0x22
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b28:	f000 ff08 	bl	800293c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b2c:	bf00      	nop
 8001b2e:	3728      	adds	r7, #40	@ 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000

08001b38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	@ 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a23      	ldr	r2, [pc, #140]	@ (8001be4 <HAL_TIM_MspPostInit+0xac>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d11e      	bne.n	8001b98 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	4b23      	ldr	r3, [pc, #140]	@ (8001be8 <HAL_TIM_MspPostInit+0xb0>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	4a22      	ldr	r2, [pc, #136]	@ (8001be8 <HAL_TIM_MspPostInit+0xb0>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b66:	4b20      	ldr	r3, [pc, #128]	@ (8001be8 <HAL_TIM_MspPostInit+0xb0>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b84:	2306      	movs	r3, #6
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b92:	f000 fed3 	bl	800293c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b96:	e021      	b.n	8001bdc <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a13      	ldr	r2, [pc, #76]	@ (8001bec <HAL_TIM_MspPostInit+0xb4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d11c      	bne.n	8001bdc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <HAL_TIM_MspPostInit+0xb0>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba6:	4a10      	ldr	r2, [pc, #64]	@ (8001be8 <HAL_TIM_MspPostInit+0xb0>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bae:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <HAL_TIM_MspPostInit+0xb0>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bba:	2310      	movs	r3, #16
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bd8:	f000 feb0 	bl	800293c <HAL_GPIO_Init>
}
 8001bdc:	bf00      	nop
 8001bde:	3728      	adds	r7, #40	@ 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40012c00 	.word	0x40012c00
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40000400 	.word	0x40000400

08001bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b0a0      	sub	sp, #128	@ 0x80
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c08:	f107 0318 	add.w	r3, r7, #24
 8001c0c:	2254      	movs	r2, #84	@ 0x54
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f006 fa71 	bl	80080f8 <memset>
  if(huart->Instance==USART1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a80      	ldr	r2, [pc, #512]	@ (8001e1c <HAL_UART_MspInit+0x22c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d161      	bne.n	8001ce4 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c20:	2301      	movs	r3, #1
 8001c22:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c28:	f107 0318 	add.w	r3, r7, #24
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f001 fe19 	bl	8003864 <HAL_RCCEx_PeriphCLKConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c38:	f7ff fe4e 	bl	80018d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c3c:	4b78      	ldr	r3, [pc, #480]	@ (8001e20 <HAL_UART_MspInit+0x230>)
 8001c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c40:	4a77      	ldr	r2, [pc, #476]	@ (8001e20 <HAL_UART_MspInit+0x230>)
 8001c42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c46:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c48:	4b75      	ldr	r3, [pc, #468]	@ (8001e20 <HAL_UART_MspInit+0x230>)
 8001c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c54:	4b72      	ldr	r3, [pc, #456]	@ (8001e20 <HAL_UART_MspInit+0x230>)
 8001c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c58:	4a71      	ldr	r2, [pc, #452]	@ (8001e20 <HAL_UART_MspInit+0x230>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c60:	4b6f      	ldr	r3, [pc, #444]	@ (8001e20 <HAL_UART_MspInit+0x230>)
 8001c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c6c:	2330      	movs	r3, #48	@ 0x30
 8001c6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c7c:	2307      	movs	r3, #7
 8001c7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c80:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c84:	4619      	mov	r1, r3
 8001c86:	4867      	ldr	r0, [pc, #412]	@ (8001e24 <HAL_UART_MspInit+0x234>)
 8001c88:	f000 fe58 	bl	800293c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel2;
 8001c8c:	4b66      	ldr	r3, [pc, #408]	@ (8001e28 <HAL_UART_MspInit+0x238>)
 8001c8e:	4a67      	ldr	r2, [pc, #412]	@ (8001e2c <HAL_UART_MspInit+0x23c>)
 8001c90:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001c92:	4b65      	ldr	r3, [pc, #404]	@ (8001e28 <HAL_UART_MspInit+0x238>)
 8001c94:	2218      	movs	r2, #24
 8001c96:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c98:	4b63      	ldr	r3, [pc, #396]	@ (8001e28 <HAL_UART_MspInit+0x238>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c9e:	4b62      	ldr	r3, [pc, #392]	@ (8001e28 <HAL_UART_MspInit+0x238>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ca4:	4b60      	ldr	r3, [pc, #384]	@ (8001e28 <HAL_UART_MspInit+0x238>)
 8001ca6:	2280      	movs	r2, #128	@ 0x80
 8001ca8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001caa:	4b5f      	ldr	r3, [pc, #380]	@ (8001e28 <HAL_UART_MspInit+0x238>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cb0:	4b5d      	ldr	r3, [pc, #372]	@ (8001e28 <HAL_UART_MspInit+0x238>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001cb6:	4b5c      	ldr	r3, [pc, #368]	@ (8001e28 <HAL_UART_MspInit+0x238>)
 8001cb8:	2220      	movs	r2, #32
 8001cba:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001cbc:	4b5a      	ldr	r3, [pc, #360]	@ (8001e28 <HAL_UART_MspInit+0x238>)
 8001cbe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001cc4:	4858      	ldr	r0, [pc, #352]	@ (8001e28 <HAL_UART_MspInit+0x238>)
 8001cc6:	f000 fb07 	bl	80022d8 <HAL_DMA_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001cd0:	f7ff fe02 	bl	80018d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a54      	ldr	r2, [pc, #336]	@ (8001e28 <HAL_UART_MspInit+0x238>)
 8001cd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001cdc:	4a52      	ldr	r2, [pc, #328]	@ (8001e28 <HAL_UART_MspInit+0x238>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ce2:	e097      	b.n	8001e14 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a51      	ldr	r2, [pc, #324]	@ (8001e30 <HAL_UART_MspInit+0x240>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	f040 8092 	bne.w	8001e14 <HAL_UART_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf8:	f107 0318 	add.w	r3, r7, #24
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f001 fdb1 	bl	8003864 <HAL_RCCEx_PeriphCLKConfig>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8001d08:	f7ff fde6 	bl	80018d8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d0c:	4b44      	ldr	r3, [pc, #272]	@ (8001e20 <HAL_UART_MspInit+0x230>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d10:	4a43      	ldr	r2, [pc, #268]	@ (8001e20 <HAL_UART_MspInit+0x230>)
 8001d12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d16:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d18:	4b41      	ldr	r3, [pc, #260]	@ (8001e20 <HAL_UART_MspInit+0x230>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d24:	4b3e      	ldr	r3, [pc, #248]	@ (8001e20 <HAL_UART_MspInit+0x230>)
 8001d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d28:	4a3d      	ldr	r2, [pc, #244]	@ (8001e20 <HAL_UART_MspInit+0x230>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d30:	4b3b      	ldr	r3, [pc, #236]	@ (8001e20 <HAL_UART_MspInit+0x230>)
 8001d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d3c:	230c      	movs	r3, #12
 8001d3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d4c:	2307      	movs	r3, #7
 8001d4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d50:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d54:	4619      	mov	r1, r3
 8001d56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d5a:	f000 fdef 	bl	800293c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8001d5e:	4b35      	ldr	r3, [pc, #212]	@ (8001e34 <HAL_UART_MspInit+0x244>)
 8001d60:	4a35      	ldr	r2, [pc, #212]	@ (8001e38 <HAL_UART_MspInit+0x248>)
 8001d62:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001d64:	4b33      	ldr	r3, [pc, #204]	@ (8001e34 <HAL_UART_MspInit+0x244>)
 8001d66:	221a      	movs	r2, #26
 8001d68:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d6a:	4b32      	ldr	r3, [pc, #200]	@ (8001e34 <HAL_UART_MspInit+0x244>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d70:	4b30      	ldr	r3, [pc, #192]	@ (8001e34 <HAL_UART_MspInit+0x244>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d76:	4b2f      	ldr	r3, [pc, #188]	@ (8001e34 <HAL_UART_MspInit+0x244>)
 8001d78:	2280      	movs	r2, #128	@ 0x80
 8001d7a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e34 <HAL_UART_MspInit+0x244>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d82:	4b2c      	ldr	r3, [pc, #176]	@ (8001e34 <HAL_UART_MspInit+0x244>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001d88:	4b2a      	ldr	r3, [pc, #168]	@ (8001e34 <HAL_UART_MspInit+0x244>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d8e:	4b29      	ldr	r3, [pc, #164]	@ (8001e34 <HAL_UART_MspInit+0x244>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d94:	4827      	ldr	r0, [pc, #156]	@ (8001e34 <HAL_UART_MspInit+0x244>)
 8001d96:	f000 fa9f 	bl	80022d8 <HAL_DMA_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 8001da0:	f7ff fd9a 	bl	80018d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a23      	ldr	r2, [pc, #140]	@ (8001e34 <HAL_UART_MspInit+0x244>)
 8001da8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001dac:	4a21      	ldr	r2, [pc, #132]	@ (8001e34 <HAL_UART_MspInit+0x244>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8001db2:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <HAL_UART_MspInit+0x24c>)
 8001db4:	4a22      	ldr	r2, [pc, #136]	@ (8001e40 <HAL_UART_MspInit+0x250>)
 8001db6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001db8:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <HAL_UART_MspInit+0x24c>)
 8001dba:	221b      	movs	r2, #27
 8001dbc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <HAL_UART_MspInit+0x24c>)
 8001dc0:	2210      	movs	r2, #16
 8001dc2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <HAL_UART_MspInit+0x24c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <HAL_UART_MspInit+0x24c>)
 8001dcc:	2280      	movs	r2, #128	@ 0x80
 8001dce:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <HAL_UART_MspInit+0x24c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <HAL_UART_MspInit+0x24c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <HAL_UART_MspInit+0x24c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001de2:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <HAL_UART_MspInit+0x24c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001de8:	4814      	ldr	r0, [pc, #80]	@ (8001e3c <HAL_UART_MspInit+0x24c>)
 8001dea:	f000 fa75 	bl	80022d8 <HAL_DMA_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8001df4:	f7ff fd70 	bl	80018d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a10      	ldr	r2, [pc, #64]	@ (8001e3c <HAL_UART_MspInit+0x24c>)
 8001dfc:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8001e3c <HAL_UART_MspInit+0x24c>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2100      	movs	r1, #0
 8001e08:	2026      	movs	r0, #38	@ 0x26
 8001e0a:	f000 fa30 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e0e:	2026      	movs	r0, #38	@ 0x26
 8001e10:	f000 fa47 	bl	80022a2 <HAL_NVIC_EnableIRQ>
}
 8001e14:	bf00      	nop
 8001e16:	3780      	adds	r7, #128	@ 0x80
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40013800 	.word	0x40013800
 8001e20:	40021000 	.word	0x40021000
 8001e24:	48000800 	.word	0x48000800
 8001e28:	20000820 	.word	0x20000820
 8001e2c:	4002041c 	.word	0x4002041c
 8001e30:	40004400 	.word	0x40004400
 8001e34:	20000880 	.word	0x20000880
 8001e38:	4002001c 	.word	0x4002001c
 8001e3c:	200008e0 	.word	0x200008e0
 8001e40:	40020008 	.word	0x40020008

08001e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <NMI_Handler+0x4>

08001e4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <HardFault_Handler+0x4>

08001e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <MemManage_Handler+0x4>

08001e5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <BusFault_Handler+0x4>

08001e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <UsageFault_Handler+0x4>

08001e6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e9a:	f000 f8ef 	bl	800207c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ea8:	4802      	ldr	r0, [pc, #8]	@ (8001eb4 <DMA1_Channel1_IRQHandler+0x10>)
 8001eaa:	f000 fbf8 	bl	800269e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200008e0 	.word	0x200008e0

08001eb8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ebc:	4802      	ldr	r0, [pc, #8]	@ (8001ec8 <DMA1_Channel2_IRQHandler+0x10>)
 8001ebe:	f000 fbee 	bl	800269e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000880 	.word	0x20000880

08001ecc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8001ed0:	4802      	ldr	r0, [pc, #8]	@ (8001edc <DMA1_Channel3_IRQHandler+0x10>)
 8001ed2:	f000 fbe4 	bl	800269e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000628 	.word	0x20000628

08001ee0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001ee4:	2020      	movs	r0, #32
 8001ee6:	f000 fec3 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ef4:	4803      	ldr	r0, [pc, #12]	@ (8001f04 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001ef6:	f002 fd05 	bl	8004904 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001efa:	4803      	ldr	r0, [pc, #12]	@ (8001f08 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001efc:	f002 fd02 	bl	8004904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2000022c 	.word	0x2000022c
 8001f08:	2000055c 	.word	0x2000055c

08001f0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f10:	4802      	ldr	r0, [pc, #8]	@ (8001f1c <USART2_IRQHandler+0x10>)
 8001f12:	f004 fbe3 	bl	80066dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000754 	.word	0x20000754

08001f20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001f24:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001f28:	f000 fea2 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001f2c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001f30:	f000 fe9e 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f3c:	4802      	ldr	r0, [pc, #8]	@ (8001f48 <TIM5_IRQHandler+0x10>)
 8001f3e:	f002 fce1 	bl	8004904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000490 	.word	0x20000490

08001f4c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f50:	4802      	ldr	r0, [pc, #8]	@ (8001f5c <DMA2_Channel2_IRQHandler+0x10>)
 8001f52:	f000 fba4 	bl	800269e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000820 	.word	0x20000820

08001f60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <SystemInit+0x20>)
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f6a:	4a05      	ldr	r2, [pc, #20]	@ (8001f80 <SystemInit+0x20>)
 8001f6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f84:	480d      	ldr	r0, [pc, #52]	@ (8001fbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f86:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f88:	f7ff ffea 	bl	8001f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f8c:	480c      	ldr	r0, [pc, #48]	@ (8001fc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f8e:	490d      	ldr	r1, [pc, #52]	@ (8001fc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f90:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc8 <LoopForever+0xe>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f94:	e002      	b.n	8001f9c <LoopCopyDataInit>

08001f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9a:	3304      	adds	r3, #4

08001f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa0:	d3f9      	bcc.n	8001f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fa4:	4c0a      	ldr	r4, [pc, #40]	@ (8001fd0 <LoopForever+0x16>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa8:	e001      	b.n	8001fae <LoopFillZerobss>

08001faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fac:	3204      	adds	r2, #4

08001fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb0:	d3fb      	bcc.n	8001faa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fb2:	f006 f8a9 	bl	8008108 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fb6:	f7fe fddb 	bl	8000b70 <main>

08001fba <LoopForever>:

LoopForever:
    b LoopForever
 8001fba:	e7fe      	b.n	8001fba <LoopForever>
  ldr   r0, =_estack
 8001fbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc4:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001fc8:	080081d4 	.word	0x080081d4
  ldr r2, =_sbss
 8001fcc:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001fd0:	20000ff4 	.word	0x20000ff4

08001fd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fd4:	e7fe      	b.n	8001fd4 <ADC1_2_IRQHandler>

08001fd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	f000 f939 	bl	8002258 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f000 f80e 	bl	8002008 <HAL_InitTick>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	71fb      	strb	r3, [r7, #7]
 8001ff6:	e001      	b.n	8001ffc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ff8:	f7ff fc74 	bl	80018e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ffc:	79fb      	ldrb	r3, [r7, #7]

}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002014:	4b16      	ldr	r3, [pc, #88]	@ (8002070 <HAL_InitTick+0x68>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d022      	beq.n	8002062 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800201c:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <HAL_InitTick+0x6c>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b13      	ldr	r3, [pc, #76]	@ (8002070 <HAL_InitTick+0x68>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002028:	fbb1 f3f3 	udiv	r3, r1, r3
 800202c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002030:	4618      	mov	r0, r3
 8002032:	f000 f944 	bl	80022be <HAL_SYSTICK_Config>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10f      	bne.n	800205c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b0f      	cmp	r3, #15
 8002040:	d809      	bhi.n	8002056 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002042:	2200      	movs	r2, #0
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	f04f 30ff 	mov.w	r0, #4294967295
 800204a:	f000 f910 	bl	800226e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800204e:	4a0a      	ldr	r2, [pc, #40]	@ (8002078 <HAL_InitTick+0x70>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	e007      	b.n	8002066 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
 800205a:	e004      	b.n	8002066 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	e001      	b.n	8002066 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002066:	7bfb      	ldrb	r3, [r7, #15]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000208 	.word	0x20000208
 8002074:	20000200 	.word	0x20000200
 8002078:	20000204 	.word	0x20000204

0800207c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002080:	4b05      	ldr	r3, [pc, #20]	@ (8002098 <HAL_IncTick+0x1c>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b05      	ldr	r3, [pc, #20]	@ (800209c <HAL_IncTick+0x20>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4413      	add	r3, r2
 800208a:	4a03      	ldr	r2, [pc, #12]	@ (8002098 <HAL_IncTick+0x1c>)
 800208c:	6013      	str	r3, [r2, #0]
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	20000ff0 	.word	0x20000ff0
 800209c:	20000208 	.word	0x20000208

080020a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return uwTick;
 80020a4:	4b03      	ldr	r3, [pc, #12]	@ (80020b4 <HAL_GetTick+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000ff0 	.word	0x20000ff0

080020b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020d4:	4013      	ands	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ea:	4a04      	ldr	r2, [pc, #16]	@ (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	60d3      	str	r3, [r2, #12]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002104:	4b04      	ldr	r3, [pc, #16]	@ (8002118 <__NVIC_GetPriorityGrouping+0x18>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	0a1b      	lsrs	r3, r3, #8
 800210a:	f003 0307 	and.w	r3, r3, #7
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	2b00      	cmp	r3, #0
 800212c:	db0b      	blt.n	8002146 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	f003 021f 	and.w	r2, r3, #31
 8002134:	4907      	ldr	r1, [pc, #28]	@ (8002154 <__NVIC_EnableIRQ+0x38>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	2001      	movs	r0, #1
 800213e:	fa00 f202 	lsl.w	r2, r0, r2
 8002142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000e100 	.word	0xe000e100

08002158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	6039      	str	r1, [r7, #0]
 8002162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	2b00      	cmp	r3, #0
 800216a:	db0a      	blt.n	8002182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	490c      	ldr	r1, [pc, #48]	@ (80021a4 <__NVIC_SetPriority+0x4c>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	0112      	lsls	r2, r2, #4
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	440b      	add	r3, r1
 800217c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002180:	e00a      	b.n	8002198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4908      	ldr	r1, [pc, #32]	@ (80021a8 <__NVIC_SetPriority+0x50>)
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	3b04      	subs	r3, #4
 8002190:	0112      	lsls	r2, r2, #4
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	440b      	add	r3, r1
 8002196:	761a      	strb	r2, [r3, #24]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000e100 	.word	0xe000e100
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	@ 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f1c3 0307 	rsb	r3, r3, #7
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	bf28      	it	cs
 80021ca:	2304      	movcs	r3, #4
 80021cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3304      	adds	r3, #4
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d902      	bls.n	80021dc <NVIC_EncodePriority+0x30>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3b03      	subs	r3, #3
 80021da:	e000      	b.n	80021de <NVIC_EncodePriority+0x32>
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	f04f 32ff 	mov.w	r2, #4294967295
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43da      	mvns	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	401a      	ands	r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f4:	f04f 31ff 	mov.w	r1, #4294967295
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	43d9      	mvns	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	4313      	orrs	r3, r2
         );
}
 8002206:	4618      	mov	r0, r3
 8002208:	3724      	adds	r7, #36	@ 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002224:	d301      	bcc.n	800222a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002226:	2301      	movs	r3, #1
 8002228:	e00f      	b.n	800224a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222a:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <SysTick_Config+0x40>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002232:	210f      	movs	r1, #15
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f7ff ff8e 	bl	8002158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <SysTick_Config+0x40>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002242:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <SysTick_Config+0x40>)
 8002244:	2207      	movs	r2, #7
 8002246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	e000e010 	.word	0xe000e010

08002258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff29 	bl	80020b8 <__NVIC_SetPriorityGrouping>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800227c:	f7ff ff40 	bl	8002100 <__NVIC_GetPriorityGrouping>
 8002280:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	6978      	ldr	r0, [r7, #20]
 8002288:	f7ff ff90 	bl	80021ac <NVIC_EncodePriority>
 800228c:	4602      	mov	r2, r0
 800228e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff5f 	bl	8002158 <__NVIC_SetPriority>
}
 800229a:	bf00      	nop
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff33 	bl	800211c <__NVIC_EnableIRQ>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ffa4 	bl	8002214 <SysTick_Config>
 80022cc:	4603      	mov	r3, r0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e08d      	b.n	8002406 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	4b47      	ldr	r3, [pc, #284]	@ (8002410 <HAL_DMA_Init+0x138>)
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d80f      	bhi.n	8002316 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	4b45      	ldr	r3, [pc, #276]	@ (8002414 <HAL_DMA_Init+0x13c>)
 80022fe:	4413      	add	r3, r2
 8002300:	4a45      	ldr	r2, [pc, #276]	@ (8002418 <HAL_DMA_Init+0x140>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	009a      	lsls	r2, r3, #2
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a42      	ldr	r2, [pc, #264]	@ (800241c <HAL_DMA_Init+0x144>)
 8002312:	641a      	str	r2, [r3, #64]	@ 0x40
 8002314:	e00e      	b.n	8002334 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	4b40      	ldr	r3, [pc, #256]	@ (8002420 <HAL_DMA_Init+0x148>)
 800231e:	4413      	add	r3, r2
 8002320:	4a3d      	ldr	r2, [pc, #244]	@ (8002418 <HAL_DMA_Init+0x140>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	009a      	lsls	r2, r3, #2
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a3c      	ldr	r2, [pc, #240]	@ (8002424 <HAL_DMA_Init+0x14c>)
 8002332:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800234a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800234e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002358:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002364:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002370:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 fa76 	bl	8002878 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002394:	d102      	bne.n	800239c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023b0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d010      	beq.n	80023dc <HAL_DMA_Init+0x104>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d80c      	bhi.n	80023dc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fa96 	bl	80028f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	e008      	b.n	80023ee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40020407 	.word	0x40020407
 8002414:	bffdfff8 	.word	0xbffdfff8
 8002418:	cccccccd 	.word	0xcccccccd
 800241c:	40020000 	.word	0x40020000
 8002420:	bffdfbf8 	.word	0xbffdfbf8
 8002424:	40020400 	.word	0x40020400

08002428 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_DMA_Start_IT+0x20>
 8002444:	2302      	movs	r3, #2
 8002446:	e066      	b.n	8002516 <HAL_DMA_Start_IT+0xee>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	d155      	bne.n	8002508 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68b9      	ldr	r1, [r7, #8]
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f9bb 	bl	80027fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 020e 	orr.w	r2, r2, #14
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	e00f      	b.n	80024c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0204 	bic.w	r2, r2, #4
 80024ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 020a 	orr.w	r2, r2, #10
 80024be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d007      	beq.n	80024de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d007      	beq.n	80024f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0201 	orr.w	r2, r2, #1
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	e005      	b.n	8002514 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002510:	2302      	movs	r3, #2
 8002512:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002514:	7dfb      	ldrb	r3, [r7, #23]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800251e:	b480      	push	{r7}
 8002520:	b085      	sub	sp, #20
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d005      	beq.n	8002542 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2204      	movs	r2, #4
 800253a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
 8002540:	e037      	b.n	80025b2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 020e 	bic.w	r2, r2, #14
 8002550:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800255c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002560:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0201 	bic.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	f003 021f 	and.w	r2, r3, #31
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	2101      	movs	r1, #1
 8002580:	fa01 f202 	lsl.w	r2, r1, r2
 8002584:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800258e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00c      	beq.n	80025b2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025a6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80025b0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d00d      	beq.n	8002604 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2204      	movs	r2, #4
 80025ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
 8002602:	e047      	b.n	8002694 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 020e 	bic.w	r2, r2, #14
 8002612:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800262e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002632:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002638:	f003 021f 	and.w	r2, r3, #31
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002640:	2101      	movs	r1, #1
 8002642:	fa01 f202 	lsl.w	r2, r1, r2
 8002646:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002650:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00c      	beq.n	8002674 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002664:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002668:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002672:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4798      	blx	r3
    }
  }
  return status;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	2204      	movs	r2, #4
 80026c0:	409a      	lsls	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d026      	beq.n	8002718 <HAL_DMA_IRQHandler+0x7a>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d021      	beq.n	8002718 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d107      	bne.n	80026f2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0204 	bic.w	r2, r2, #4
 80026f0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f6:	f003 021f 	and.w	r2, r3, #31
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	2104      	movs	r1, #4
 8002700:	fa01 f202 	lsl.w	r2, r1, r2
 8002704:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	2b00      	cmp	r3, #0
 800270c:	d071      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002716:	e06c      	b.n	80027f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	2202      	movs	r2, #2
 8002722:	409a      	lsls	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d02e      	beq.n	800278a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d029      	beq.n	800278a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10b      	bne.n	800275c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 020a 	bic.w	r2, r2, #10
 8002752:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002760:	f003 021f 	and.w	r2, r3, #31
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002768:	2102      	movs	r1, #2
 800276a:	fa01 f202 	lsl.w	r2, r1, r2
 800276e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d038      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002788:	e033      	b.n	80027f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	2208      	movs	r2, #8
 8002794:	409a      	lsls	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4013      	ands	r3, r2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d02a      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d025      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 020e 	bic.w	r2, r2, #14
 80027b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	2101      	movs	r1, #1
 80027c6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d004      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027f2:	bf00      	nop
 80027f4:	bf00      	nop
}
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002812:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002818:	2b00      	cmp	r3, #0
 800281a:	d004      	beq.n	8002826 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002824:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f003 021f 	and.w	r2, r3, #31
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b10      	cmp	r3, #16
 8002848:	d108      	bne.n	800285c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800285a:	e007      	b.n	800286c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	60da      	str	r2, [r3, #12]
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	4b16      	ldr	r3, [pc, #88]	@ (80028e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002888:	429a      	cmp	r2, r3
 800288a:	d802      	bhi.n	8002892 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800288c:	4b15      	ldr	r3, [pc, #84]	@ (80028e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	e001      	b.n	8002896 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002892:	4b15      	ldr	r3, [pc, #84]	@ (80028e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002894:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	3b08      	subs	r3, #8
 80028a2:	4a12      	ldr	r2, [pc, #72]	@ (80028ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80028a4:	fba2 2303 	umull	r2, r3, r2, r3
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	009a      	lsls	r2, r3, #2
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	461a      	mov	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a0b      	ldr	r2, [pc, #44]	@ (80028f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80028c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	2201      	movs	r2, #1
 80028cc:	409a      	lsls	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80028d2:	bf00      	nop
 80028d4:	371c      	adds	r7, #28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40020407 	.word	0x40020407
 80028e4:	40020800 	.word	0x40020800
 80028e8:	40020820 	.word	0x40020820
 80028ec:	cccccccd 	.word	0xcccccccd
 80028f0:	40020880 	.word	0x40020880

080028f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4b0b      	ldr	r3, [pc, #44]	@ (8002934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	461a      	mov	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a08      	ldr	r2, [pc, #32]	@ (8002938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002916:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	3b01      	subs	r3, #1
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	2201      	movs	r2, #1
 8002922:	409a      	lsls	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	1000823f 	.word	0x1000823f
 8002938:	40020940 	.word	0x40020940

0800293c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800294a:	e15a      	b.n	8002c02 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	2101      	movs	r1, #1
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	4013      	ands	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 814c 	beq.w	8002bfc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d005      	beq.n	800297c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002978:	2b02      	cmp	r3, #2
 800297a:	d130      	bne.n	80029de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029b2:	2201      	movs	r2, #1
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4013      	ands	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	091b      	lsrs	r3, r3, #4
 80029c8:	f003 0201 	and.w	r2, r3, #1
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d017      	beq.n	8002a1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	2203      	movs	r2, #3
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d123      	bne.n	8002a6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	08da      	lsrs	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3208      	adds	r2, #8
 8002a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	220f      	movs	r2, #15
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	691a      	ldr	r2, [r3, #16]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	08da      	lsrs	r2, r3, #3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3208      	adds	r2, #8
 8002a68:	6939      	ldr	r1, [r7, #16]
 8002a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	2203      	movs	r2, #3
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4013      	ands	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0203 	and.w	r2, r3, #3
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80a6 	beq.w	8002bfc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab0:	4b5b      	ldr	r3, [pc, #364]	@ (8002c20 <HAL_GPIO_Init+0x2e4>)
 8002ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab4:	4a5a      	ldr	r2, [pc, #360]	@ (8002c20 <HAL_GPIO_Init+0x2e4>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6613      	str	r3, [r2, #96]	@ 0x60
 8002abc:	4b58      	ldr	r3, [pc, #352]	@ (8002c20 <HAL_GPIO_Init+0x2e4>)
 8002abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ac8:	4a56      	ldr	r2, [pc, #344]	@ (8002c24 <HAL_GPIO_Init+0x2e8>)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	089b      	lsrs	r3, r3, #2
 8002ace:	3302      	adds	r3, #2
 8002ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	220f      	movs	r2, #15
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002af2:	d01f      	beq.n	8002b34 <HAL_GPIO_Init+0x1f8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a4c      	ldr	r2, [pc, #304]	@ (8002c28 <HAL_GPIO_Init+0x2ec>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d019      	beq.n	8002b30 <HAL_GPIO_Init+0x1f4>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a4b      	ldr	r2, [pc, #300]	@ (8002c2c <HAL_GPIO_Init+0x2f0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d013      	beq.n	8002b2c <HAL_GPIO_Init+0x1f0>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a4a      	ldr	r2, [pc, #296]	@ (8002c30 <HAL_GPIO_Init+0x2f4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00d      	beq.n	8002b28 <HAL_GPIO_Init+0x1ec>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a49      	ldr	r2, [pc, #292]	@ (8002c34 <HAL_GPIO_Init+0x2f8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d007      	beq.n	8002b24 <HAL_GPIO_Init+0x1e8>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a48      	ldr	r2, [pc, #288]	@ (8002c38 <HAL_GPIO_Init+0x2fc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d101      	bne.n	8002b20 <HAL_GPIO_Init+0x1e4>
 8002b1c:	2305      	movs	r3, #5
 8002b1e:	e00a      	b.n	8002b36 <HAL_GPIO_Init+0x1fa>
 8002b20:	2306      	movs	r3, #6
 8002b22:	e008      	b.n	8002b36 <HAL_GPIO_Init+0x1fa>
 8002b24:	2304      	movs	r3, #4
 8002b26:	e006      	b.n	8002b36 <HAL_GPIO_Init+0x1fa>
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e004      	b.n	8002b36 <HAL_GPIO_Init+0x1fa>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e002      	b.n	8002b36 <HAL_GPIO_Init+0x1fa>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <HAL_GPIO_Init+0x1fa>
 8002b34:	2300      	movs	r3, #0
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	f002 0203 	and.w	r2, r2, #3
 8002b3c:	0092      	lsls	r2, r2, #2
 8002b3e:	4093      	lsls	r3, r2
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b46:	4937      	ldr	r1, [pc, #220]	@ (8002c24 <HAL_GPIO_Init+0x2e8>)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b54:	4b39      	ldr	r3, [pc, #228]	@ (8002c3c <HAL_GPIO_Init+0x300>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b78:	4a30      	ldr	r2, [pc, #192]	@ (8002c3c <HAL_GPIO_Init+0x300>)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c3c <HAL_GPIO_Init+0x300>)
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ba2:	4a26      	ldr	r2, [pc, #152]	@ (8002c3c <HAL_GPIO_Init+0x300>)
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002ba8:	4b24      	ldr	r3, [pc, #144]	@ (8002c3c <HAL_GPIO_Init+0x300>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c3c <HAL_GPIO_Init+0x300>)
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c3c <HAL_GPIO_Init+0x300>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4013      	ands	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bf6:	4a11      	ldr	r2, [pc, #68]	@ (8002c3c <HAL_GPIO_Init+0x300>)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f47f ae9d 	bne.w	800294c <HAL_GPIO_Init+0x10>
  }
}
 8002c12:	bf00      	nop
 8002c14:	bf00      	nop
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40010000 	.word	0x40010000
 8002c28:	48000400 	.word	0x48000400
 8002c2c:	48000800 	.word	0x48000800
 8002c30:	48000c00 	.word	0x48000c00
 8002c34:	48001000 	.word	0x48001000
 8002c38:	48001400 	.word	0x48001400
 8002c3c:	40010400 	.word	0x40010400

08002c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c50:	787b      	ldrb	r3, [r7, #1]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c5c:	e002      	b.n	8002c64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c5e:	887a      	ldrh	r2, [r7, #2]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c7a:	4b08      	ldr	r3, [pc, #32]	@ (8002c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d006      	beq.n	8002c94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c86:	4a05      	ldr	r2, [pc, #20]	@ (8002c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fdd4 	bl	800183c <HAL_GPIO_EXTI_Callback>
  }
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40010400 	.word	0x40010400

08002ca0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d141      	bne.n	8002d32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cae:	4b4b      	ldr	r3, [pc, #300]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cba:	d131      	bne.n	8002d20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cbc:	4b47      	ldr	r3, [pc, #284]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cc2:	4a46      	ldr	r2, [pc, #280]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ccc:	4b43      	ldr	r3, [pc, #268]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cd4:	4a41      	ldr	r2, [pc, #260]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cdc:	4b40      	ldr	r3, [pc, #256]	@ (8002de0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2232      	movs	r2, #50	@ 0x32
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	4a3f      	ldr	r2, [pc, #252]	@ (8002de4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	0c9b      	lsrs	r3, r3, #18
 8002cee:	3301      	adds	r3, #1
 8002cf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf2:	e002      	b.n	8002cfa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cfa:	4b38      	ldr	r3, [pc, #224]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d06:	d102      	bne.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f2      	bne.n	8002cf4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d0e:	4b33      	ldr	r3, [pc, #204]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d1a:	d158      	bne.n	8002dce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e057      	b.n	8002dd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d20:	4b2e      	ldr	r3, [pc, #184]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d26:	4a2d      	ldr	r2, [pc, #180]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d30:	e04d      	b.n	8002dce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d38:	d141      	bne.n	8002dbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d3a:	4b28      	ldr	r3, [pc, #160]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d46:	d131      	bne.n	8002dac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d48:	4b24      	ldr	r3, [pc, #144]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d4e:	4a23      	ldr	r2, [pc, #140]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d58:	4b20      	ldr	r3, [pc, #128]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d60:	4a1e      	ldr	r2, [pc, #120]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d68:	4b1d      	ldr	r3, [pc, #116]	@ (8002de0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2232      	movs	r2, #50	@ 0x32
 8002d6e:	fb02 f303 	mul.w	r3, r2, r3
 8002d72:	4a1c      	ldr	r2, [pc, #112]	@ (8002de4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d74:	fba2 2303 	umull	r2, r3, r2, r3
 8002d78:	0c9b      	lsrs	r3, r3, #18
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d7e:	e002      	b.n	8002d86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d86:	4b15      	ldr	r3, [pc, #84]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d92:	d102      	bne.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f2      	bne.n	8002d80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d9a:	4b10      	ldr	r3, [pc, #64]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002da6:	d112      	bne.n	8002dce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e011      	b.n	8002dd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dac:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002db2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002db8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002dbc:	e007      	b.n	8002dce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dbe:	4b07      	ldr	r3, [pc, #28]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002dc6:	4a05      	ldr	r2, [pc, #20]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dcc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	40007000 	.word	0x40007000
 8002de0:	20000200 	.word	0x20000200
 8002de4:	431bde83 	.word	0x431bde83

08002de8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002dec:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a04      	ldr	r2, [pc, #16]	@ (8002e04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002df2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002df6:	6093      	str	r3, [r2, #8]
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40007000 	.word	0x40007000

08002e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e2fe      	b.n	8003418 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d075      	beq.n	8002f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e26:	4b97      	ldr	r3, [pc, #604]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e30:	4b94      	ldr	r3, [pc, #592]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b0c      	cmp	r3, #12
 8002e3e:	d102      	bne.n	8002e46 <HAL_RCC_OscConfig+0x3e>
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d002      	beq.n	8002e4c <HAL_RCC_OscConfig+0x44>
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d10b      	bne.n	8002e64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	4b8d      	ldr	r3, [pc, #564]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d05b      	beq.n	8002f10 <HAL_RCC_OscConfig+0x108>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d157      	bne.n	8002f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e2d9      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e6c:	d106      	bne.n	8002e7c <HAL_RCC_OscConfig+0x74>
 8002e6e:	4b85      	ldr	r3, [pc, #532]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a84      	ldr	r2, [pc, #528]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	e01d      	b.n	8002eb8 <HAL_RCC_OscConfig+0xb0>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x98>
 8002e86:	4b7f      	ldr	r3, [pc, #508]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a7e      	ldr	r2, [pc, #504]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002e8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	4b7c      	ldr	r3, [pc, #496]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a7b      	ldr	r2, [pc, #492]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	e00b      	b.n	8002eb8 <HAL_RCC_OscConfig+0xb0>
 8002ea0:	4b78      	ldr	r3, [pc, #480]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a77      	ldr	r2, [pc, #476]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	4b75      	ldr	r3, [pc, #468]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a74      	ldr	r2, [pc, #464]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d013      	beq.n	8002ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7ff f8ee 	bl	80020a0 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec8:	f7ff f8ea 	bl	80020a0 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	@ 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e29e      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eda:	4b6a      	ldr	r3, [pc, #424]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0xc0>
 8002ee6:	e014      	b.n	8002f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7ff f8da 	bl	80020a0 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef0:	f7ff f8d6 	bl	80020a0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b64      	cmp	r3, #100	@ 0x64
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e28a      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f02:	4b60      	ldr	r3, [pc, #384]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0xe8>
 8002f0e:	e000      	b.n	8002f12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d075      	beq.n	800300a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f1e:	4b59      	ldr	r3, [pc, #356]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f28:	4b56      	ldr	r3, [pc, #344]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	2b0c      	cmp	r3, #12
 8002f36:	d102      	bne.n	8002f3e <HAL_RCC_OscConfig+0x136>
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d002      	beq.n	8002f44 <HAL_RCC_OscConfig+0x13c>
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d11f      	bne.n	8002f84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f44:	4b4f      	ldr	r3, [pc, #316]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_OscConfig+0x154>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e25d      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5c:	4b49      	ldr	r3, [pc, #292]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	061b      	lsls	r3, r3, #24
 8002f6a:	4946      	ldr	r1, [pc, #280]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f70:	4b45      	ldr	r3, [pc, #276]	@ (8003088 <HAL_RCC_OscConfig+0x280>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff f847 	bl	8002008 <HAL_InitTick>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d043      	beq.n	8003008 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e249      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d023      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f8c:	4b3d      	ldr	r3, [pc, #244]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a3c      	ldr	r2, [pc, #240]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002f92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7ff f882 	bl	80020a0 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa0:	f7ff f87e 	bl	80020a0 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e232      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fb2:	4b34      	ldr	r3, [pc, #208]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbe:	4b31      	ldr	r3, [pc, #196]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	061b      	lsls	r3, r3, #24
 8002fcc:	492d      	ldr	r1, [pc, #180]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
 8002fd2:	e01a      	b.n	800300a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2a      	ldr	r2, [pc, #168]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002fda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7ff f85e 	bl	80020a0 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe8:	f7ff f85a 	bl	80020a0 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e20e      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ffa:	4b22      	ldr	r3, [pc, #136]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x1e0>
 8003006:	e000      	b.n	800300a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003008:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d041      	beq.n	800309a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01c      	beq.n	8003058 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800301e:	4b19      	ldr	r3, [pc, #100]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8003020:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003024:	4a17      	ldr	r2, [pc, #92]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302e:	f7ff f837 	bl	80020a0 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003036:	f7ff f833 	bl	80020a0 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e1e7      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003048:	4b0e      	ldr	r3, [pc, #56]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 800304a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0ef      	beq.n	8003036 <HAL_RCC_OscConfig+0x22e>
 8003056:	e020      	b.n	800309a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003058:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 800305a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800305e:	4a09      	ldr	r2, [pc, #36]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003068:	f7ff f81a 	bl	80020a0 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800306e:	e00d      	b.n	800308c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003070:	f7ff f816 	bl	80020a0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d906      	bls.n	800308c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e1ca      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800308c:	4b8c      	ldr	r3, [pc, #560]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 800308e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1ea      	bne.n	8003070 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 80a6 	beq.w	80031f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a8:	2300      	movs	r3, #0
 80030aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030ac:	4b84      	ldr	r3, [pc, #528]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 80030ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_RCC_OscConfig+0x2b4>
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <HAL_RCC_OscConfig+0x2b6>
 80030bc:	2300      	movs	r3, #0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00d      	beq.n	80030de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c2:	4b7f      	ldr	r3, [pc, #508]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c6:	4a7e      	ldr	r2, [pc, #504]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 80030c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80030ce:	4b7c      	ldr	r3, [pc, #496]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 80030d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030da:	2301      	movs	r3, #1
 80030dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030de:	4b79      	ldr	r3, [pc, #484]	@ (80032c4 <HAL_RCC_OscConfig+0x4bc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d118      	bne.n	800311c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030ea:	4b76      	ldr	r3, [pc, #472]	@ (80032c4 <HAL_RCC_OscConfig+0x4bc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a75      	ldr	r2, [pc, #468]	@ (80032c4 <HAL_RCC_OscConfig+0x4bc>)
 80030f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f6:	f7fe ffd3 	bl	80020a0 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fe:	f7fe ffcf 	bl	80020a0 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e183      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003110:	4b6c      	ldr	r3, [pc, #432]	@ (80032c4 <HAL_RCC_OscConfig+0x4bc>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d108      	bne.n	8003136 <HAL_RCC_OscConfig+0x32e>
 8003124:	4b66      	ldr	r3, [pc, #408]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312a:	4a65      	ldr	r2, [pc, #404]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003134:	e024      	b.n	8003180 <HAL_RCC_OscConfig+0x378>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b05      	cmp	r3, #5
 800313c:	d110      	bne.n	8003160 <HAL_RCC_OscConfig+0x358>
 800313e:	4b60      	ldr	r3, [pc, #384]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003144:	4a5e      	ldr	r2, [pc, #376]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 8003146:	f043 0304 	orr.w	r3, r3, #4
 800314a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800314e:	4b5c      	ldr	r3, [pc, #368]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 8003150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003154:	4a5a      	ldr	r2, [pc, #360]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800315e:	e00f      	b.n	8003180 <HAL_RCC_OscConfig+0x378>
 8003160:	4b57      	ldr	r3, [pc, #348]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003166:	4a56      	ldr	r2, [pc, #344]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003170:	4b53      	ldr	r3, [pc, #332]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003176:	4a52      	ldr	r2, [pc, #328]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 8003178:	f023 0304 	bic.w	r3, r3, #4
 800317c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d016      	beq.n	80031b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fe ff8a 	bl	80020a0 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003190:	f7fe ff86 	bl	80020a0 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e138      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a6:	4b46      	ldr	r3, [pc, #280]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0ed      	beq.n	8003190 <HAL_RCC_OscConfig+0x388>
 80031b4:	e015      	b.n	80031e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b6:	f7fe ff73 	bl	80020a0 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031bc:	e00a      	b.n	80031d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031be:	f7fe ff6f 	bl	80020a0 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e121      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031d4:	4b3a      	ldr	r3, [pc, #232]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1ed      	bne.n	80031be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031e2:	7ffb      	ldrb	r3, [r7, #31]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e8:	4b35      	ldr	r3, [pc, #212]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ec:	4a34      	ldr	r2, [pc, #208]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 80031ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d03c      	beq.n	800327a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01c      	beq.n	8003242 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003208:	4b2d      	ldr	r3, [pc, #180]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 800320a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800320e:	4a2c      	ldr	r2, [pc, #176]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fe ff42 	bl	80020a0 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003220:	f7fe ff3e 	bl	80020a0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e0f2      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003232:	4b23      	ldr	r3, [pc, #140]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 8003234:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0ef      	beq.n	8003220 <HAL_RCC_OscConfig+0x418>
 8003240:	e01b      	b.n	800327a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003242:	4b1f      	ldr	r3, [pc, #124]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 8003244:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003248:	4a1d      	ldr	r2, [pc, #116]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 800324a:	f023 0301 	bic.w	r3, r3, #1
 800324e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fe ff25 	bl	80020a0 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800325a:	f7fe ff21 	bl	80020a0 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e0d5      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800326c:	4b14      	ldr	r3, [pc, #80]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 800326e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1ef      	bne.n	800325a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 80c9 	beq.w	8003416 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003284:	4b0e      	ldr	r3, [pc, #56]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b0c      	cmp	r3, #12
 800328e:	f000 8083 	beq.w	8003398 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d15e      	bne.n	8003358 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329a:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a08      	ldr	r2, [pc, #32]	@ (80032c0 <HAL_RCC_OscConfig+0x4b8>)
 80032a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fe fefb 	bl	80020a0 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ac:	e00c      	b.n	80032c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ae:	f7fe fef7 	bl	80020a0 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d905      	bls.n	80032c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e0ab      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c8:	4b55      	ldr	r3, [pc, #340]	@ (8003420 <HAL_RCC_OscConfig+0x618>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1ec      	bne.n	80032ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d4:	4b52      	ldr	r3, [pc, #328]	@ (8003420 <HAL_RCC_OscConfig+0x618>)
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	4b52      	ldr	r3, [pc, #328]	@ (8003424 <HAL_RCC_OscConfig+0x61c>)
 80032da:	4013      	ands	r3, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6a11      	ldr	r1, [r2, #32]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032e4:	3a01      	subs	r2, #1
 80032e6:	0112      	lsls	r2, r2, #4
 80032e8:	4311      	orrs	r1, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80032ee:	0212      	lsls	r2, r2, #8
 80032f0:	4311      	orrs	r1, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80032f6:	0852      	lsrs	r2, r2, #1
 80032f8:	3a01      	subs	r2, #1
 80032fa:	0552      	lsls	r2, r2, #21
 80032fc:	4311      	orrs	r1, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003302:	0852      	lsrs	r2, r2, #1
 8003304:	3a01      	subs	r2, #1
 8003306:	0652      	lsls	r2, r2, #25
 8003308:	4311      	orrs	r1, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800330e:	06d2      	lsls	r2, r2, #27
 8003310:	430a      	orrs	r2, r1
 8003312:	4943      	ldr	r1, [pc, #268]	@ (8003420 <HAL_RCC_OscConfig+0x618>)
 8003314:	4313      	orrs	r3, r2
 8003316:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003318:	4b41      	ldr	r3, [pc, #260]	@ (8003420 <HAL_RCC_OscConfig+0x618>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a40      	ldr	r2, [pc, #256]	@ (8003420 <HAL_RCC_OscConfig+0x618>)
 800331e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003322:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003324:	4b3e      	ldr	r3, [pc, #248]	@ (8003420 <HAL_RCC_OscConfig+0x618>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4a3d      	ldr	r2, [pc, #244]	@ (8003420 <HAL_RCC_OscConfig+0x618>)
 800332a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800332e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fe feb6 	bl	80020a0 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003338:	f7fe feb2 	bl	80020a0 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e066      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334a:	4b35      	ldr	r3, [pc, #212]	@ (8003420 <HAL_RCC_OscConfig+0x618>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x530>
 8003356:	e05e      	b.n	8003416 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003358:	4b31      	ldr	r3, [pc, #196]	@ (8003420 <HAL_RCC_OscConfig+0x618>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a30      	ldr	r2, [pc, #192]	@ (8003420 <HAL_RCC_OscConfig+0x618>)
 800335e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fe9c 	bl	80020a0 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe fe98 	bl	80020a0 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e04c      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337e:	4b28      	ldr	r3, [pc, #160]	@ (8003420 <HAL_RCC_OscConfig+0x618>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800338a:	4b25      	ldr	r3, [pc, #148]	@ (8003420 <HAL_RCC_OscConfig+0x618>)
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	4924      	ldr	r1, [pc, #144]	@ (8003420 <HAL_RCC_OscConfig+0x618>)
 8003390:	4b25      	ldr	r3, [pc, #148]	@ (8003428 <HAL_RCC_OscConfig+0x620>)
 8003392:	4013      	ands	r3, r2
 8003394:	60cb      	str	r3, [r1, #12]
 8003396:	e03e      	b.n	8003416 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e039      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80033a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003420 <HAL_RCC_OscConfig+0x618>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f003 0203 	and.w	r2, r3, #3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d12c      	bne.n	8003412 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c2:	3b01      	subs	r3, #1
 80033c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d123      	bne.n	8003412 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d11b      	bne.n	8003412 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d113      	bne.n	8003412 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f4:	085b      	lsrs	r3, r3, #1
 80033f6:	3b01      	subs	r3, #1
 80033f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d109      	bne.n	8003412 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	3b01      	subs	r3, #1
 800340c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3720      	adds	r7, #32
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000
 8003424:	019f800c 	.word	0x019f800c
 8003428:	feeefffc 	.word	0xfeeefffc

0800342c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e11e      	b.n	8003682 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003444:	4b91      	ldr	r3, [pc, #580]	@ (800368c <HAL_RCC_ClockConfig+0x260>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d910      	bls.n	8003474 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	4b8e      	ldr	r3, [pc, #568]	@ (800368c <HAL_RCC_ClockConfig+0x260>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 020f 	bic.w	r2, r3, #15
 800345a:	498c      	ldr	r1, [pc, #560]	@ (800368c <HAL_RCC_ClockConfig+0x260>)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003462:	4b8a      	ldr	r3, [pc, #552]	@ (800368c <HAL_RCC_ClockConfig+0x260>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e106      	b.n	8003682 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d073      	beq.n	8003568 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d129      	bne.n	80034dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003488:	4b81      	ldr	r3, [pc, #516]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0f4      	b.n	8003682 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003498:	f000 f99e 	bl	80037d8 <RCC_GetSysClockFreqFromPLLSource>
 800349c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4a7c      	ldr	r2, [pc, #496]	@ (8003694 <HAL_RCC_ClockConfig+0x268>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d93f      	bls.n	8003526 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034a6:	4b7a      	ldr	r3, [pc, #488]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d033      	beq.n	8003526 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d12f      	bne.n	8003526 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034c6:	4b72      	ldr	r3, [pc, #456]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034ce:	4a70      	ldr	r2, [pc, #448]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 80034d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034d6:	2380      	movs	r3, #128	@ 0x80
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	e024      	b.n	8003526 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d107      	bne.n	80034f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d109      	bne.n	8003504 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0c6      	b.n	8003682 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034f4:	4b66      	ldr	r3, [pc, #408]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0be      	b.n	8003682 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003504:	f000 f8ce 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8003508:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4a61      	ldr	r2, [pc, #388]	@ (8003694 <HAL_RCC_ClockConfig+0x268>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d909      	bls.n	8003526 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003512:	4b5f      	ldr	r3, [pc, #380]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800351a:	4a5d      	ldr	r2, [pc, #372]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 800351c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003520:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003522:	2380      	movs	r3, #128	@ 0x80
 8003524:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003526:	4b5a      	ldr	r3, [pc, #360]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f023 0203 	bic.w	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4957      	ldr	r1, [pc, #348]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003534:	4313      	orrs	r3, r2
 8003536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003538:	f7fe fdb2 	bl	80020a0 <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	e00a      	b.n	8003556 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003540:	f7fe fdae 	bl	80020a0 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e095      	b.n	8003682 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	4b4e      	ldr	r3, [pc, #312]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 020c 	and.w	r2, r3, #12
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	429a      	cmp	r2, r3
 8003566:	d1eb      	bne.n	8003540 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d023      	beq.n	80035bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003580:	4b43      	ldr	r3, [pc, #268]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4a42      	ldr	r2, [pc, #264]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003586:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800358a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003598:	4b3d      	ldr	r3, [pc, #244]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80035a0:	4a3b      	ldr	r2, [pc, #236]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 80035a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80035a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a8:	4b39      	ldr	r3, [pc, #228]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4936      	ldr	r1, [pc, #216]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
 80035ba:	e008      	b.n	80035ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b80      	cmp	r3, #128	@ 0x80
 80035c0:	d105      	bne.n	80035ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80035c2:	4b33      	ldr	r3, [pc, #204]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	4a32      	ldr	r2, [pc, #200]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 80035c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035ce:	4b2f      	ldr	r3, [pc, #188]	@ (800368c <HAL_RCC_ClockConfig+0x260>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d21d      	bcs.n	8003618 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035dc:	4b2b      	ldr	r3, [pc, #172]	@ (800368c <HAL_RCC_ClockConfig+0x260>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 020f 	bic.w	r2, r3, #15
 80035e4:	4929      	ldr	r1, [pc, #164]	@ (800368c <HAL_RCC_ClockConfig+0x260>)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035ec:	f7fe fd58 	bl	80020a0 <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	e00a      	b.n	800360a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f4:	f7fe fd54 	bl	80020a0 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e03b      	b.n	8003682 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360a:	4b20      	ldr	r3, [pc, #128]	@ (800368c <HAL_RCC_ClockConfig+0x260>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d1ed      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003624:	4b1a      	ldr	r3, [pc, #104]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4917      	ldr	r1, [pc, #92]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003642:	4b13      	ldr	r3, [pc, #76]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	490f      	ldr	r1, [pc, #60]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003656:	f000 f825 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 800365a:	4602      	mov	r2, r0
 800365c:	4b0c      	ldr	r3, [pc, #48]	@ (8003690 <HAL_RCC_ClockConfig+0x264>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	490c      	ldr	r1, [pc, #48]	@ (8003698 <HAL_RCC_ClockConfig+0x26c>)
 8003668:	5ccb      	ldrb	r3, [r1, r3]
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	fa22 f303 	lsr.w	r3, r2, r3
 8003672:	4a0a      	ldr	r2, [pc, #40]	@ (800369c <HAL_RCC_ClockConfig+0x270>)
 8003674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003676:	4b0a      	ldr	r3, [pc, #40]	@ (80036a0 <HAL_RCC_ClockConfig+0x274>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fe fcc4 	bl	8002008 <HAL_InitTick>
 8003680:	4603      	mov	r3, r0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40022000 	.word	0x40022000
 8003690:	40021000 	.word	0x40021000
 8003694:	04c4b400 	.word	0x04c4b400
 8003698:	08008184 	.word	0x08008184
 800369c:	20000200 	.word	0x20000200
 80036a0:	20000204 	.word	0x20000204

080036a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80036aa:	4b2c      	ldr	r3, [pc, #176]	@ (800375c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d102      	bne.n	80036bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003760 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	e047      	b.n	800374c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036bc:	4b27      	ldr	r3, [pc, #156]	@ (800375c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d102      	bne.n	80036ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036c8:	4b26      	ldr	r3, [pc, #152]	@ (8003764 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	e03e      	b.n	800374c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80036ce:	4b23      	ldr	r3, [pc, #140]	@ (800375c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b0c      	cmp	r3, #12
 80036d8:	d136      	bne.n	8003748 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036da:	4b20      	ldr	r3, [pc, #128]	@ (800375c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036e4:	4b1d      	ldr	r3, [pc, #116]	@ (800375c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	3301      	adds	r3, #1
 80036f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d10c      	bne.n	8003712 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003764 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003700:	4a16      	ldr	r2, [pc, #88]	@ (800375c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003702:	68d2      	ldr	r2, [r2, #12]
 8003704:	0a12      	lsrs	r2, r2, #8
 8003706:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	617b      	str	r3, [r7, #20]
      break;
 8003710:	e00c      	b.n	800372c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003712:	4a13      	ldr	r2, [pc, #76]	@ (8003760 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	fbb2 f3f3 	udiv	r3, r2, r3
 800371a:	4a10      	ldr	r2, [pc, #64]	@ (800375c <HAL_RCC_GetSysClockFreq+0xb8>)
 800371c:	68d2      	ldr	r2, [r2, #12]
 800371e:	0a12      	lsrs	r2, r2, #8
 8003720:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003724:	fb02 f303 	mul.w	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]
      break;
 800372a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800372c:	4b0b      	ldr	r3, [pc, #44]	@ (800375c <HAL_RCC_GetSysClockFreq+0xb8>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	0e5b      	lsrs	r3, r3, #25
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	3301      	adds	r3, #1
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	e001      	b.n	800374c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800374c:	693b      	ldr	r3, [r7, #16]
}
 800374e:	4618      	mov	r0, r3
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
 8003760:	00f42400 	.word	0x00f42400
 8003764:	016e3600 	.word	0x016e3600

08003768 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800376c:	4b03      	ldr	r3, [pc, #12]	@ (800377c <HAL_RCC_GetHCLKFreq+0x14>)
 800376e:	681b      	ldr	r3, [r3, #0]
}
 8003770:	4618      	mov	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	20000200 	.word	0x20000200

08003780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003784:	f7ff fff0 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 8003788:	4602      	mov	r2, r0
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	4904      	ldr	r1, [pc, #16]	@ (80037a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003796:	5ccb      	ldrb	r3, [r1, r3]
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000
 80037a8:	08008194 	.word	0x08008194

080037ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037b0:	f7ff ffda 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 80037b4:	4602      	mov	r2, r0
 80037b6:	4b06      	ldr	r3, [pc, #24]	@ (80037d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	0adb      	lsrs	r3, r3, #11
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	4904      	ldr	r1, [pc, #16]	@ (80037d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037c2:	5ccb      	ldrb	r3, [r1, r3]
 80037c4:	f003 031f 	and.w	r3, r3, #31
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40021000 	.word	0x40021000
 80037d4:	08008194 	.word	0x08008194

080037d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037de:	4b1e      	ldr	r3, [pc, #120]	@ (8003858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	091b      	lsrs	r3, r3, #4
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	3301      	adds	r3, #1
 80037f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d10c      	bne.n	8003816 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037fc:	4a17      	ldr	r2, [pc, #92]	@ (800385c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	fbb2 f3f3 	udiv	r3, r2, r3
 8003804:	4a14      	ldr	r2, [pc, #80]	@ (8003858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003806:	68d2      	ldr	r2, [r2, #12]
 8003808:	0a12      	lsrs	r2, r2, #8
 800380a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	617b      	str	r3, [r7, #20]
    break;
 8003814:	e00c      	b.n	8003830 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003816:	4a12      	ldr	r2, [pc, #72]	@ (8003860 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
 800381e:	4a0e      	ldr	r2, [pc, #56]	@ (8003858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003820:	68d2      	ldr	r2, [r2, #12]
 8003822:	0a12      	lsrs	r2, r2, #8
 8003824:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003828:	fb02 f303 	mul.w	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]
    break;
 800382e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003830:	4b09      	ldr	r3, [pc, #36]	@ (8003858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	0e5b      	lsrs	r3, r3, #25
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	3301      	adds	r3, #1
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	fbb2 f3f3 	udiv	r3, r2, r3
 8003848:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800384a:	687b      	ldr	r3, [r7, #4]
}
 800384c:	4618      	mov	r0, r3
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	40021000 	.word	0x40021000
 800385c:	016e3600 	.word	0x016e3600
 8003860:	00f42400 	.word	0x00f42400

08003864 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800386c:	2300      	movs	r3, #0
 800386e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003870:	2300      	movs	r3, #0
 8003872:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8098 	beq.w	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003882:	2300      	movs	r3, #0
 8003884:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003886:	4b43      	ldr	r3, [pc, #268]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800388a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10d      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003892:	4b40      	ldr	r3, [pc, #256]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003896:	4a3f      	ldr	r2, [pc, #252]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800389c:	6593      	str	r3, [r2, #88]	@ 0x58
 800389e:	4b3d      	ldr	r3, [pc, #244]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038aa:	2301      	movs	r3, #1
 80038ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a39      	ldr	r2, [pc, #228]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038ba:	f7fe fbf1 	bl	80020a0 <HAL_GetTick>
 80038be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038c0:	e009      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c2:	f7fe fbed 	bl	80020a0 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d902      	bls.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	74fb      	strb	r3, [r7, #19]
        break;
 80038d4:	e005      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038d6:	4b30      	ldr	r3, [pc, #192]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0ef      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d159      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d01e      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	429a      	cmp	r2, r3
 8003902:	d019      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003904:	4b23      	ldr	r3, [pc, #140]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800390a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800390e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003910:	4b20      	ldr	r3, [pc, #128]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003916:	4a1f      	ldr	r2, [pc, #124]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800391c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003920:	4b1c      	ldr	r3, [pc, #112]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003926:	4a1b      	ldr	r2, [pc, #108]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003928:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800392c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003930:	4a18      	ldr	r2, [pc, #96]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d016      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003942:	f7fe fbad 	bl	80020a0 <HAL_GetTick>
 8003946:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003948:	e00b      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394a:	f7fe fba9 	bl	80020a0 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003958:	4293      	cmp	r3, r2
 800395a:	d902      	bls.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	74fb      	strb	r3, [r7, #19]
            break;
 8003960:	e006      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003962:	4b0c      	ldr	r3, [pc, #48]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ec      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003970:	7cfb      	ldrb	r3, [r7, #19]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10b      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003976:	4b07      	ldr	r3, [pc, #28]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800397c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003984:	4903      	ldr	r1, [pc, #12]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800398c:	e008      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800398e:	7cfb      	ldrb	r3, [r7, #19]
 8003990:	74bb      	strb	r3, [r7, #18]
 8003992:	e005      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003994:	40021000 	.word	0x40021000
 8003998:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399c:	7cfb      	ldrb	r3, [r7, #19]
 800399e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039a0:	7c7b      	ldrb	r3, [r7, #17]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d105      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a6:	4ba7      	ldr	r3, [pc, #668]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039aa:	4aa6      	ldr	r2, [pc, #664]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039be:	4ba1      	ldr	r3, [pc, #644]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c4:	f023 0203 	bic.w	r2, r3, #3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	499d      	ldr	r1, [pc, #628]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039e0:	4b98      	ldr	r3, [pc, #608]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e6:	f023 020c 	bic.w	r2, r3, #12
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	4995      	ldr	r1, [pc, #596]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a02:	4b90      	ldr	r3, [pc, #576]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	498c      	ldr	r1, [pc, #560]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a24:	4b87      	ldr	r3, [pc, #540]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	4984      	ldr	r1, [pc, #528]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a46:	4b7f      	ldr	r3, [pc, #508]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	497b      	ldr	r1, [pc, #492]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00a      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a68:	4b76      	ldr	r3, [pc, #472]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	4973      	ldr	r1, [pc, #460]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a8a:	4b6e      	ldr	r3, [pc, #440]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a90:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	496a      	ldr	r1, [pc, #424]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aac:	4b65      	ldr	r3, [pc, #404]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	4962      	ldr	r1, [pc, #392]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ace:	4b5d      	ldr	r3, [pc, #372]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	4959      	ldr	r1, [pc, #356]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003af0:	4b54      	ldr	r3, [pc, #336]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003af6:	f023 0203 	bic.w	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afe:	4951      	ldr	r1, [pc, #324]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b12:	4b4c      	ldr	r3, [pc, #304]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b20:	4948      	ldr	r1, [pc, #288]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d015      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b34:	4b43      	ldr	r3, [pc, #268]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b42:	4940      	ldr	r1, [pc, #256]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b52:	d105      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b54:	4b3b      	ldr	r3, [pc, #236]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	4a3a      	ldr	r2, [pc, #232]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b5e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d015      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b6c:	4b35      	ldr	r3, [pc, #212]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b72:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b7a:	4932      	ldr	r1, [pc, #200]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b8a:	d105      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4a2c      	ldr	r2, [pc, #176]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b96:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d015      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ba4:	4b27      	ldr	r3, [pc, #156]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003baa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb2:	4924      	ldr	r1, [pc, #144]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bc2:	d105      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d015      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bdc:	4b19      	ldr	r3, [pc, #100]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bea:	4916      	ldr	r1, [pc, #88]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bfa:	d105      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bfc:	4b11      	ldr	r3, [pc, #68]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4a10      	ldr	r2, [pc, #64]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c06:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d019      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c14:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	4908      	ldr	r1, [pc, #32]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c32:	d109      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c34:	4b03      	ldr	r3, [pc, #12]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	4a02      	ldr	r2, [pc, #8]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c3e:	60d3      	str	r3, [r2, #12]
 8003c40:	e002      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003c42:	bf00      	nop
 8003c44:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d015      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c54:	4b29      	ldr	r3, [pc, #164]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	4926      	ldr	r1, [pc, #152]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c72:	d105      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c74:	4b21      	ldr	r3, [pc, #132]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4a20      	ldr	r2, [pc, #128]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d015      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c92:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c9a:	4918      	ldr	r1, [pc, #96]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003caa:	d105      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003cac:	4b13      	ldr	r3, [pc, #76]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4a12      	ldr	r2, [pc, #72]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d015      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd2:	490a      	ldr	r1, [pc, #40]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ce2:	d105      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce4:	4b05      	ldr	r3, [pc, #20]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4a04      	ldr	r2, [pc, #16]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003cf0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000

08003d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e054      	b.n	8003dbc <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d111      	bne.n	8003d42 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f001 ffe0 	bl	8005cec <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a23      	ldr	r2, [pc, #140]	@ (8003dc4 <HAL_TIM_Base_Init+0xc4>)
 8003d38:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2202      	movs	r2, #2
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3304      	adds	r3, #4
 8003d52:	4619      	mov	r1, r3
 8003d54:	4610      	mov	r0, r2
 8003d56:	f001 fb29 	bl	80053ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	0800192d 	.word	0x0800192d

08003dc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d001      	beq.n	8003de0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e04c      	b.n	8003e7a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a26      	ldr	r2, [pc, #152]	@ (8003e88 <HAL_TIM_Base_Start+0xc0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d022      	beq.n	8003e38 <HAL_TIM_Base_Start+0x70>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dfa:	d01d      	beq.n	8003e38 <HAL_TIM_Base_Start+0x70>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a22      	ldr	r2, [pc, #136]	@ (8003e8c <HAL_TIM_Base_Start+0xc4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d018      	beq.n	8003e38 <HAL_TIM_Base_Start+0x70>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a21      	ldr	r2, [pc, #132]	@ (8003e90 <HAL_TIM_Base_Start+0xc8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d013      	beq.n	8003e38 <HAL_TIM_Base_Start+0x70>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1f      	ldr	r2, [pc, #124]	@ (8003e94 <HAL_TIM_Base_Start+0xcc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00e      	beq.n	8003e38 <HAL_TIM_Base_Start+0x70>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8003e98 <HAL_TIM_Base_Start+0xd0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d009      	beq.n	8003e38 <HAL_TIM_Base_Start+0x70>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1c      	ldr	r2, [pc, #112]	@ (8003e9c <HAL_TIM_Base_Start+0xd4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d004      	beq.n	8003e38 <HAL_TIM_Base_Start+0x70>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1b      	ldr	r2, [pc, #108]	@ (8003ea0 <HAL_TIM_Base_Start+0xd8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d115      	bne.n	8003e64 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	4b19      	ldr	r3, [pc, #100]	@ (8003ea4 <HAL_TIM_Base_Start+0xdc>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b06      	cmp	r3, #6
 8003e48:	d015      	beq.n	8003e76 <HAL_TIM_Base_Start+0xae>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e50:	d011      	beq.n	8003e76 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0201 	orr.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e62:	e008      	b.n	8003e76 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	e000      	b.n	8003e78 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40000800 	.word	0x40000800
 8003e94:	40000c00 	.word	0x40000c00
 8003e98:	40013400 	.word	0x40013400
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40015000 	.word	0x40015000
 8003ea4:	00010007 	.word	0x00010007

08003ea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d001      	beq.n	8003ec0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e054      	b.n	8003f6a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a26      	ldr	r2, [pc, #152]	@ (8003f78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d022      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0x80>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eea:	d01d      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0x80>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a22      	ldr	r2, [pc, #136]	@ (8003f7c <HAL_TIM_Base_Start_IT+0xd4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d018      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0x80>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a21      	ldr	r2, [pc, #132]	@ (8003f80 <HAL_TIM_Base_Start_IT+0xd8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d013      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0x80>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1f      	ldr	r2, [pc, #124]	@ (8003f84 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00e      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0x80>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8003f88 <HAL_TIM_Base_Start_IT+0xe0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d009      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0x80>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1c      	ldr	r2, [pc, #112]	@ (8003f8c <HAL_TIM_Base_Start_IT+0xe4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d004      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0x80>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a1b      	ldr	r2, [pc, #108]	@ (8003f90 <HAL_TIM_Base_Start_IT+0xe8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d115      	bne.n	8003f54 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	4b19      	ldr	r3, [pc, #100]	@ (8003f94 <HAL_TIM_Base_Start_IT+0xec>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b06      	cmp	r3, #6
 8003f38:	d015      	beq.n	8003f66 <HAL_TIM_Base_Start_IT+0xbe>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f40:	d011      	beq.n	8003f66 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0201 	orr.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f52:	e008      	b.n	8003f66 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	e000      	b.n	8003f68 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40012c00 	.word	0x40012c00
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40000c00 	.word	0x40000c00
 8003f88:	40013400 	.word	0x40013400
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40015000 	.word	0x40015000
 8003f94:	00010007 	.word	0x00010007

08003f98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e054      	b.n	8004054 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d111      	bne.n	8003fda <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f001 fe94 	bl	8005cec <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d102      	bne.n	8003fd2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a23      	ldr	r2, [pc, #140]	@ (800405c <HAL_TIM_PWM_Init+0xc4>)
 8003fd0:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4619      	mov	r1, r3
 8003fec:	4610      	mov	r0, r2
 8003fee:	f001 f9dd 	bl	80053ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	08004061 	.word	0x08004061

08004060 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d109      	bne.n	8004098 <HAL_TIM_PWM_Start+0x24>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	bf14      	ite	ne
 8004090:	2301      	movne	r3, #1
 8004092:	2300      	moveq	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	e03c      	b.n	8004112 <HAL_TIM_PWM_Start+0x9e>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2b04      	cmp	r3, #4
 800409c:	d109      	bne.n	80040b2 <HAL_TIM_PWM_Start+0x3e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	bf14      	ite	ne
 80040aa:	2301      	movne	r3, #1
 80040ac:	2300      	moveq	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	e02f      	b.n	8004112 <HAL_TIM_PWM_Start+0x9e>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d109      	bne.n	80040cc <HAL_TIM_PWM_Start+0x58>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	bf14      	ite	ne
 80040c4:	2301      	movne	r3, #1
 80040c6:	2300      	moveq	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	e022      	b.n	8004112 <HAL_TIM_PWM_Start+0x9e>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b0c      	cmp	r3, #12
 80040d0:	d109      	bne.n	80040e6 <HAL_TIM_PWM_Start+0x72>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b01      	cmp	r3, #1
 80040dc:	bf14      	ite	ne
 80040de:	2301      	movne	r3, #1
 80040e0:	2300      	moveq	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	e015      	b.n	8004112 <HAL_TIM_PWM_Start+0x9e>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b10      	cmp	r3, #16
 80040ea:	d109      	bne.n	8004100 <HAL_TIM_PWM_Start+0x8c>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	bf14      	ite	ne
 80040f8:	2301      	movne	r3, #1
 80040fa:	2300      	moveq	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	e008      	b.n	8004112 <HAL_TIM_PWM_Start+0x9e>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	bf14      	ite	ne
 800410c:	2301      	movne	r3, #1
 800410e:	2300      	moveq	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e0a6      	b.n	8004268 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d104      	bne.n	800412a <HAL_TIM_PWM_Start+0xb6>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004128:	e023      	b.n	8004172 <HAL_TIM_PWM_Start+0xfe>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b04      	cmp	r3, #4
 800412e:	d104      	bne.n	800413a <HAL_TIM_PWM_Start+0xc6>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004138:	e01b      	b.n	8004172 <HAL_TIM_PWM_Start+0xfe>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b08      	cmp	r3, #8
 800413e:	d104      	bne.n	800414a <HAL_TIM_PWM_Start+0xd6>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004148:	e013      	b.n	8004172 <HAL_TIM_PWM_Start+0xfe>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b0c      	cmp	r3, #12
 800414e:	d104      	bne.n	800415a <HAL_TIM_PWM_Start+0xe6>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004158:	e00b      	b.n	8004172 <HAL_TIM_PWM_Start+0xfe>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b10      	cmp	r3, #16
 800415e:	d104      	bne.n	800416a <HAL_TIM_PWM_Start+0xf6>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004168:	e003      	b.n	8004172 <HAL_TIM_PWM_Start+0xfe>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2202      	movs	r2, #2
 800416e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2201      	movs	r2, #1
 8004178:	6839      	ldr	r1, [r7, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f001 fd90 	bl	8005ca0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a3a      	ldr	r2, [pc, #232]	@ (8004270 <HAL_TIM_PWM_Start+0x1fc>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d018      	beq.n	80041bc <HAL_TIM_PWM_Start+0x148>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a39      	ldr	r2, [pc, #228]	@ (8004274 <HAL_TIM_PWM_Start+0x200>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d013      	beq.n	80041bc <HAL_TIM_PWM_Start+0x148>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a37      	ldr	r2, [pc, #220]	@ (8004278 <HAL_TIM_PWM_Start+0x204>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00e      	beq.n	80041bc <HAL_TIM_PWM_Start+0x148>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a36      	ldr	r2, [pc, #216]	@ (800427c <HAL_TIM_PWM_Start+0x208>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_TIM_PWM_Start+0x148>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a34      	ldr	r2, [pc, #208]	@ (8004280 <HAL_TIM_PWM_Start+0x20c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_TIM_PWM_Start+0x148>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a33      	ldr	r2, [pc, #204]	@ (8004284 <HAL_TIM_PWM_Start+0x210>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d101      	bne.n	80041c0 <HAL_TIM_PWM_Start+0x14c>
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <HAL_TIM_PWM_Start+0x14e>
 80041c0:	2300      	movs	r3, #0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a25      	ldr	r2, [pc, #148]	@ (8004270 <HAL_TIM_PWM_Start+0x1fc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d022      	beq.n	8004226 <HAL_TIM_PWM_Start+0x1b2>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e8:	d01d      	beq.n	8004226 <HAL_TIM_PWM_Start+0x1b2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a26      	ldr	r2, [pc, #152]	@ (8004288 <HAL_TIM_PWM_Start+0x214>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d018      	beq.n	8004226 <HAL_TIM_PWM_Start+0x1b2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a24      	ldr	r2, [pc, #144]	@ (800428c <HAL_TIM_PWM_Start+0x218>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <HAL_TIM_PWM_Start+0x1b2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a23      	ldr	r2, [pc, #140]	@ (8004290 <HAL_TIM_PWM_Start+0x21c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00e      	beq.n	8004226 <HAL_TIM_PWM_Start+0x1b2>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a19      	ldr	r2, [pc, #100]	@ (8004274 <HAL_TIM_PWM_Start+0x200>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_TIM_PWM_Start+0x1b2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a18      	ldr	r2, [pc, #96]	@ (8004278 <HAL_TIM_PWM_Start+0x204>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_TIM_PWM_Start+0x1b2>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a18      	ldr	r2, [pc, #96]	@ (8004284 <HAL_TIM_PWM_Start+0x210>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d115      	bne.n	8004252 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	4b19      	ldr	r3, [pc, #100]	@ (8004294 <HAL_TIM_PWM_Start+0x220>)
 800422e:	4013      	ands	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b06      	cmp	r3, #6
 8004236:	d015      	beq.n	8004264 <HAL_TIM_PWM_Start+0x1f0>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800423e:	d011      	beq.n	8004264 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0201 	orr.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004250:	e008      	b.n	8004264 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0201 	orr.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	e000      	b.n	8004266 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004264:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40012c00 	.word	0x40012c00
 8004274:	40013400 	.word	0x40013400
 8004278:	40014000 	.word	0x40014000
 800427c:	40014400 	.word	0x40014400
 8004280:	40014800 	.word	0x40014800
 8004284:	40015000 	.word	0x40015000
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800
 8004290:	40000c00 	.word	0x40000c00
 8004294:	00010007 	.word	0x00010007

08004298 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b0c      	cmp	r3, #12
 80042aa:	d855      	bhi.n	8004358 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80042ac:	a201      	add	r2, pc, #4	@ (adr r2, 80042b4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80042ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b2:	bf00      	nop
 80042b4:	080042e9 	.word	0x080042e9
 80042b8:	08004359 	.word	0x08004359
 80042bc:	08004359 	.word	0x08004359
 80042c0:	08004359 	.word	0x08004359
 80042c4:	08004305 	.word	0x08004305
 80042c8:	08004359 	.word	0x08004359
 80042cc:	08004359 	.word	0x08004359
 80042d0:	08004359 	.word	0x08004359
 80042d4:	08004321 	.word	0x08004321
 80042d8:	08004359 	.word	0x08004359
 80042dc:	08004359 	.word	0x08004359
 80042e0:	08004359 	.word	0x08004359
 80042e4:	0800433d 	.word	0x0800433d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80042f6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fe f967 	bl	80025d0 <HAL_DMA_Abort_IT>
      break;
 8004302:	e02c      	b.n	800435e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004312:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004318:	4618      	mov	r0, r3
 800431a:	f7fe f959 	bl	80025d0 <HAL_DMA_Abort_IT>
      break;
 800431e:	e01e      	b.n	800435e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800432e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004334:	4618      	mov	r0, r3
 8004336:	f7fe f94b 	bl	80025d0 <HAL_DMA_Abort_IT>
      break;
 800433a:	e010      	b.n	800435e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800434a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004350:	4618      	mov	r0, r3
 8004352:	f7fe f93d 	bl	80025d0 <HAL_DMA_Abort_IT>
      break;
 8004356:	e002      	b.n	800435e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	73fb      	strb	r3, [r7, #15]
      break;
 800435c:	bf00      	nop
  }

  if (status == HAL_OK)
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	2b00      	cmp	r3, #0
 8004362:	f040 8086 	bne.w	8004472 <HAL_TIM_PWM_Stop_DMA+0x1da>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2200      	movs	r2, #0
 800436c:	6839      	ldr	r1, [r7, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f001 fc96 	bl	8005ca0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a40      	ldr	r2, [pc, #256]	@ (800447c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d018      	beq.n	80043b0 <HAL_TIM_PWM_Stop_DMA+0x118>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a3f      	ldr	r2, [pc, #252]	@ (8004480 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d013      	beq.n	80043b0 <HAL_TIM_PWM_Stop_DMA+0x118>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a3d      	ldr	r2, [pc, #244]	@ (8004484 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00e      	beq.n	80043b0 <HAL_TIM_PWM_Stop_DMA+0x118>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a3c      	ldr	r2, [pc, #240]	@ (8004488 <HAL_TIM_PWM_Stop_DMA+0x1f0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d009      	beq.n	80043b0 <HAL_TIM_PWM_Stop_DMA+0x118>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a3a      	ldr	r2, [pc, #232]	@ (800448c <HAL_TIM_PWM_Stop_DMA+0x1f4>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_TIM_PWM_Stop_DMA+0x118>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a39      	ldr	r2, [pc, #228]	@ (8004490 <HAL_TIM_PWM_Stop_DMA+0x1f8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d101      	bne.n	80043b4 <HAL_TIM_PWM_Stop_DMA+0x11c>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <HAL_TIM_PWM_Stop_DMA+0x11e>
 80043b4:	2300      	movs	r3, #0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d017      	beq.n	80043ea <HAL_TIM_PWM_Stop_DMA+0x152>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6a1a      	ldr	r2, [r3, #32]
 80043c0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10f      	bne.n	80043ea <HAL_TIM_PWM_Stop_DMA+0x152>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6a1a      	ldr	r2, [r3, #32]
 80043d0:	f244 4344 	movw	r3, #17476	@ 0x4444
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d107      	bne.n	80043ea <HAL_TIM_PWM_Stop_DMA+0x152>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6a1a      	ldr	r2, [r3, #32]
 80043f0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80043f4:	4013      	ands	r3, r2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <HAL_TIM_PWM_Stop_DMA+0x182>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6a1a      	ldr	r2, [r3, #32]
 8004400:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004404:	4013      	ands	r3, r2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d107      	bne.n	800441a <HAL_TIM_PWM_Stop_DMA+0x182>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0201 	bic.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d104      	bne.n	800442a <HAL_TIM_PWM_Stop_DMA+0x192>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004428:	e023      	b.n	8004472 <HAL_TIM_PWM_Stop_DMA+0x1da>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b04      	cmp	r3, #4
 800442e:	d104      	bne.n	800443a <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004438:	e01b      	b.n	8004472 <HAL_TIM_PWM_Stop_DMA+0x1da>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b08      	cmp	r3, #8
 800443e:	d104      	bne.n	800444a <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004448:	e013      	b.n	8004472 <HAL_TIM_PWM_Stop_DMA+0x1da>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b0c      	cmp	r3, #12
 800444e:	d104      	bne.n	800445a <HAL_TIM_PWM_Stop_DMA+0x1c2>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004458:	e00b      	b.n	8004472 <HAL_TIM_PWM_Stop_DMA+0x1da>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b10      	cmp	r3, #16
 800445e:	d104      	bne.n	800446a <HAL_TIM_PWM_Stop_DMA+0x1d2>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004468:	e003      	b.n	8004472 <HAL_TIM_PWM_Stop_DMA+0x1da>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8004472:	7bfb      	ldrb	r3, [r7, #15]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40013400 	.word	0x40013400
 8004484:	40014000 	.word	0x40014000
 8004488:	40014400 	.word	0x40014400
 800448c:	40014800 	.word	0x40014800
 8004490:	40015000 	.word	0x40015000

08004494 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e04c      	b.n	8004542 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d111      	bne.n	80044d8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f001 fc15 	bl	8005cec <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d102      	bne.n	80044d0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a1f      	ldr	r2, [pc, #124]	@ (800454c <HAL_TIM_OnePulse_Init+0xb8>)
 80044ce:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3304      	adds	r3, #4
 80044e8:	4619      	mov	r1, r3
 80044ea:	4610      	mov	r0, r2
 80044ec:	f000 ff5e 	bl	80053ac <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0208 	bic.w	r2, r2, #8
 80044fe:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6819      	ldr	r1, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	08004551 	.word	0x08004551

08004550 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004574:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800457c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004584:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800458c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d108      	bne.n	80045a6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004594:	7bbb      	ldrb	r3, [r7, #14]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d105      	bne.n	80045a6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800459a:	7b7b      	ldrb	r3, [r7, #13]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d102      	bne.n	80045a6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045a0:	7b3b      	ldrb	r3, [r7, #12]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d001      	beq.n	80045aa <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e059      	b.n	800465e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2202      	movs	r2, #2
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2202      	movs	r2, #2
 80045c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0202 	orr.w	r2, r2, #2
 80045d8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0204 	orr.w	r2, r2, #4
 80045e8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2201      	movs	r2, #1
 80045f0:	2100      	movs	r1, #0
 80045f2:	4618      	mov	r0, r3
 80045f4:	f001 fb54 	bl	8005ca0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2201      	movs	r2, #1
 80045fe:	2104      	movs	r1, #4
 8004600:	4618      	mov	r0, r3
 8004602:	f001 fb4d 	bl	8005ca0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a17      	ldr	r2, [pc, #92]	@ (8004668 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d018      	beq.n	8004642 <HAL_TIM_OnePulse_Start_IT+0xde>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a15      	ldr	r2, [pc, #84]	@ (800466c <HAL_TIM_OnePulse_Start_IT+0x108>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <HAL_TIM_OnePulse_Start_IT+0xde>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a14      	ldr	r2, [pc, #80]	@ (8004670 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00e      	beq.n	8004642 <HAL_TIM_OnePulse_Start_IT+0xde>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a12      	ldr	r2, [pc, #72]	@ (8004674 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d009      	beq.n	8004642 <HAL_TIM_OnePulse_Start_IT+0xde>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a11      	ldr	r2, [pc, #68]	@ (8004678 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_TIM_OnePulse_Start_IT+0xde>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a0f      	ldr	r2, [pc, #60]	@ (800467c <HAL_TIM_OnePulse_Start_IT+0x118>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d101      	bne.n	8004646 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8004646:	2300      	movs	r3, #0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d007      	beq.n	800465c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800465a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40012c00 	.word	0x40012c00
 800466c:	40013400 	.word	0x40013400
 8004670:	40014000 	.word	0x40014000
 8004674:	40014400 	.word	0x40014400
 8004678:	40014800 	.word	0x40014800
 800467c:	40015000 	.word	0x40015000

08004680 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e0a2      	b.n	80047da <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d111      	bne.n	80046c4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f001 fb1f 	bl	8005cec <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d102      	bne.n	80046bc <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a4a      	ldr	r2, [pc, #296]	@ (80047e4 <HAL_TIM_Encoder_Init+0x164>)
 80046ba:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80046da:	f023 0307 	bic.w	r3, r3, #7
 80046de:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3304      	adds	r3, #4
 80046e8:	4619      	mov	r1, r3
 80046ea:	4610      	mov	r0, r2
 80046ec:	f000 fe5e 	bl	80053ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004718:	f023 0303 	bic.w	r3, r3, #3
 800471c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	021b      	lsls	r3, r3, #8
 8004728:	4313      	orrs	r3, r2
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004736:	f023 030c 	bic.w	r3, r3, #12
 800473a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004742:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	021b      	lsls	r3, r3, #8
 8004752:	4313      	orrs	r3, r2
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	011a      	lsls	r2, r3, #4
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	031b      	lsls	r3, r3, #12
 8004766:	4313      	orrs	r3, r2
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004774:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800477c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	4313      	orrs	r3, r2
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	08001ab9 	.word	0x08001ab9

080047e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004800:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004808:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004810:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d110      	bne.n	800483a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d102      	bne.n	8004824 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800481e:	7b7b      	ldrb	r3, [r7, #13]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d001      	beq.n	8004828 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e069      	b.n	80048fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004838:	e031      	b.n	800489e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b04      	cmp	r3, #4
 800483e:	d110      	bne.n	8004862 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004840:	7bbb      	ldrb	r3, [r7, #14]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d102      	bne.n	800484c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004846:	7b3b      	ldrb	r3, [r7, #12]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d001      	beq.n	8004850 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e055      	b.n	80048fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004860:	e01d      	b.n	800489e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d108      	bne.n	800487a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004868:	7bbb      	ldrb	r3, [r7, #14]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d105      	bne.n	800487a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800486e:	7b7b      	ldrb	r3, [r7, #13]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d102      	bne.n	800487a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004874:	7b3b      	ldrb	r3, [r7, #12]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d001      	beq.n	800487e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e03e      	b.n	80048fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2202      	movs	r2, #2
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2202      	movs	r2, #2
 800489a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_TIM_Encoder_Start+0xc4>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d008      	beq.n	80048bc <HAL_TIM_Encoder_Start+0xd4>
 80048aa:	e00f      	b.n	80048cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2201      	movs	r2, #1
 80048b2:	2100      	movs	r1, #0
 80048b4:	4618      	mov	r0, r3
 80048b6:	f001 f9f3 	bl	8005ca0 <TIM_CCxChannelCmd>
      break;
 80048ba:	e016      	b.n	80048ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2201      	movs	r2, #1
 80048c2:	2104      	movs	r1, #4
 80048c4:	4618      	mov	r0, r3
 80048c6:	f001 f9eb 	bl	8005ca0 <TIM_CCxChannelCmd>
      break;
 80048ca:	e00e      	b.n	80048ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2201      	movs	r2, #1
 80048d2:	2100      	movs	r1, #0
 80048d4:	4618      	mov	r0, r3
 80048d6:	f001 f9e3 	bl	8005ca0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2201      	movs	r2, #1
 80048e0:	2104      	movs	r1, #4
 80048e2:	4618      	mov	r0, r3
 80048e4:	f001 f9dc 	bl	8005ca0 <TIM_CCxChannelCmd>
      break;
 80048e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0201 	orr.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d026      	beq.n	8004974 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d021      	beq.n	8004974 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0202 	mvn.w	r2, #2
 8004938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	4798      	blx	r3
 8004958:	e009      	b.n	800496e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f003 0304 	and.w	r3, r3, #4
 800497a:	2b00      	cmp	r3, #0
 800497c:	d026      	beq.n	80049cc <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d021      	beq.n	80049cc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0204 	mvn.w	r2, #4
 8004990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2202      	movs	r2, #2
 8004996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	4798      	blx	r3
 80049b0:	e009      	b.n	80049c6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d026      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d021      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0208 	mvn.w	r2, #8
 80049e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2204      	movs	r2, #4
 80049ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d005      	beq.n	8004a0a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	4798      	blx	r3
 8004a08:	e009      	b.n	8004a1e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f003 0310 	and.w	r3, r3, #16
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d026      	beq.n	8004a7c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d021      	beq.n	8004a7c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0210 	mvn.w	r2, #16
 8004a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2208      	movs	r2, #8
 8004a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	4798      	blx	r3
 8004a60:	e009      	b.n	8004a76 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00e      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d009      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0201 	mvn.w	r2, #1
 8004a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d104      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00e      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00e      	beq.n	8004afe <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00e      	beq.n	8004b26 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d009      	beq.n	8004b26 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00e      	beq.n	8004b4e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f06f 0220 	mvn.w	r2, #32
 8004b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00e      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d009      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00e      	beq.n	8004b9e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d009      	beq.n	8004b9e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00e      	beq.n	8004bc6 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00e      	beq.n	8004bee <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d009      	beq.n	8004bee <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bee:	bf00      	nop
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e0ff      	b.n	8004e16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b14      	cmp	r3, #20
 8004c22:	f200 80f0 	bhi.w	8004e06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c26:	a201      	add	r2, pc, #4	@ (adr r2, 8004c2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2c:	08004c81 	.word	0x08004c81
 8004c30:	08004e07 	.word	0x08004e07
 8004c34:	08004e07 	.word	0x08004e07
 8004c38:	08004e07 	.word	0x08004e07
 8004c3c:	08004cc1 	.word	0x08004cc1
 8004c40:	08004e07 	.word	0x08004e07
 8004c44:	08004e07 	.word	0x08004e07
 8004c48:	08004e07 	.word	0x08004e07
 8004c4c:	08004d03 	.word	0x08004d03
 8004c50:	08004e07 	.word	0x08004e07
 8004c54:	08004e07 	.word	0x08004e07
 8004c58:	08004e07 	.word	0x08004e07
 8004c5c:	08004d43 	.word	0x08004d43
 8004c60:	08004e07 	.word	0x08004e07
 8004c64:	08004e07 	.word	0x08004e07
 8004c68:	08004e07 	.word	0x08004e07
 8004c6c:	08004d85 	.word	0x08004d85
 8004c70:	08004e07 	.word	0x08004e07
 8004c74:	08004e07 	.word	0x08004e07
 8004c78:	08004e07 	.word	0x08004e07
 8004c7c:	08004dc5 	.word	0x08004dc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fc44 	bl	8005514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0208 	orr.w	r2, r2, #8
 8004c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0204 	bic.w	r2, r2, #4
 8004caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6999      	ldr	r1, [r3, #24]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	619a      	str	r2, [r3, #24]
      break;
 8004cbe:	e0a5      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fcbe 	bl	8005648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699a      	ldr	r2, [r3, #24]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6999      	ldr	r1, [r3, #24]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	021a      	lsls	r2, r3, #8
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	619a      	str	r2, [r3, #24]
      break;
 8004d00:	e084      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fd31 	bl	8005770 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69da      	ldr	r2, [r3, #28]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f042 0208 	orr.w	r2, r2, #8
 8004d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0204 	bic.w	r2, r2, #4
 8004d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69d9      	ldr	r1, [r3, #28]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	61da      	str	r2, [r3, #28]
      break;
 8004d40:	e064      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68b9      	ldr	r1, [r7, #8]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 fda3 	bl	8005894 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69da      	ldr	r2, [r3, #28]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69da      	ldr	r2, [r3, #28]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69d9      	ldr	r1, [r3, #28]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	021a      	lsls	r2, r3, #8
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	61da      	str	r2, [r3, #28]
      break;
 8004d82:	e043      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fe16 	bl	80059bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0208 	orr.w	r2, r2, #8
 8004d9e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0204 	bic.w	r2, r2, #4
 8004dae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004dc2:	e023      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68b9      	ldr	r1, [r7, #8]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fe60 	bl	8005a90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dde:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	021a      	lsls	r2, r3, #8
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004e04:	e002      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	75fb      	strb	r3, [r7, #23]
      break;
 8004e0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop

08004e20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_TIM_ConfigClockSource+0x1c>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e0f6      	b.n	800502a <HAL_TIM_ConfigClockSource+0x20a>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004e5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a6f      	ldr	r2, [pc, #444]	@ (8005034 <HAL_TIM_ConfigClockSource+0x214>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	f000 80c1 	beq.w	8004ffe <HAL_TIM_ConfigClockSource+0x1de>
 8004e7c:	4a6d      	ldr	r2, [pc, #436]	@ (8005034 <HAL_TIM_ConfigClockSource+0x214>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	f200 80c6 	bhi.w	8005010 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e84:	4a6c      	ldr	r2, [pc, #432]	@ (8005038 <HAL_TIM_ConfigClockSource+0x218>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	f000 80b9 	beq.w	8004ffe <HAL_TIM_ConfigClockSource+0x1de>
 8004e8c:	4a6a      	ldr	r2, [pc, #424]	@ (8005038 <HAL_TIM_ConfigClockSource+0x218>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	f200 80be 	bhi.w	8005010 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e94:	4a69      	ldr	r2, [pc, #420]	@ (800503c <HAL_TIM_ConfigClockSource+0x21c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	f000 80b1 	beq.w	8004ffe <HAL_TIM_ConfigClockSource+0x1de>
 8004e9c:	4a67      	ldr	r2, [pc, #412]	@ (800503c <HAL_TIM_ConfigClockSource+0x21c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	f200 80b6 	bhi.w	8005010 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ea4:	4a66      	ldr	r2, [pc, #408]	@ (8005040 <HAL_TIM_ConfigClockSource+0x220>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	f000 80a9 	beq.w	8004ffe <HAL_TIM_ConfigClockSource+0x1de>
 8004eac:	4a64      	ldr	r2, [pc, #400]	@ (8005040 <HAL_TIM_ConfigClockSource+0x220>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	f200 80ae 	bhi.w	8005010 <HAL_TIM_ConfigClockSource+0x1f0>
 8004eb4:	4a63      	ldr	r2, [pc, #396]	@ (8005044 <HAL_TIM_ConfigClockSource+0x224>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	f000 80a1 	beq.w	8004ffe <HAL_TIM_ConfigClockSource+0x1de>
 8004ebc:	4a61      	ldr	r2, [pc, #388]	@ (8005044 <HAL_TIM_ConfigClockSource+0x224>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	f200 80a6 	bhi.w	8005010 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ec4:	4a60      	ldr	r2, [pc, #384]	@ (8005048 <HAL_TIM_ConfigClockSource+0x228>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	f000 8099 	beq.w	8004ffe <HAL_TIM_ConfigClockSource+0x1de>
 8004ecc:	4a5e      	ldr	r2, [pc, #376]	@ (8005048 <HAL_TIM_ConfigClockSource+0x228>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	f200 809e 	bhi.w	8005010 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ed4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004ed8:	f000 8091 	beq.w	8004ffe <HAL_TIM_ConfigClockSource+0x1de>
 8004edc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004ee0:	f200 8096 	bhi.w	8005010 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ee4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ee8:	f000 8089 	beq.w	8004ffe <HAL_TIM_ConfigClockSource+0x1de>
 8004eec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ef0:	f200 808e 	bhi.w	8005010 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ef4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ef8:	d03e      	beq.n	8004f78 <HAL_TIM_ConfigClockSource+0x158>
 8004efa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004efe:	f200 8087 	bhi.w	8005010 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f06:	f000 8086 	beq.w	8005016 <HAL_TIM_ConfigClockSource+0x1f6>
 8004f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f0e:	d87f      	bhi.n	8005010 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f10:	2b70      	cmp	r3, #112	@ 0x70
 8004f12:	d01a      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x12a>
 8004f14:	2b70      	cmp	r3, #112	@ 0x70
 8004f16:	d87b      	bhi.n	8005010 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f18:	2b60      	cmp	r3, #96	@ 0x60
 8004f1a:	d050      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0x19e>
 8004f1c:	2b60      	cmp	r3, #96	@ 0x60
 8004f1e:	d877      	bhi.n	8005010 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f20:	2b50      	cmp	r3, #80	@ 0x50
 8004f22:	d03c      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0x17e>
 8004f24:	2b50      	cmp	r3, #80	@ 0x50
 8004f26:	d873      	bhi.n	8005010 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f28:	2b40      	cmp	r3, #64	@ 0x40
 8004f2a:	d058      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x1be>
 8004f2c:	2b40      	cmp	r3, #64	@ 0x40
 8004f2e:	d86f      	bhi.n	8005010 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f30:	2b30      	cmp	r3, #48	@ 0x30
 8004f32:	d064      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x1de>
 8004f34:	2b30      	cmp	r3, #48	@ 0x30
 8004f36:	d86b      	bhi.n	8005010 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f38:	2b20      	cmp	r3, #32
 8004f3a:	d060      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x1de>
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d867      	bhi.n	8005010 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d05c      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x1de>
 8004f44:	2b10      	cmp	r3, #16
 8004f46:	d05a      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x1de>
 8004f48:	e062      	b.n	8005010 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f5a:	f000 fe81 	bl	8005c60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	609a      	str	r2, [r3, #8]
      break;
 8004f76:	e04f      	b.n	8005018 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f88:	f000 fe6a 	bl	8005c60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f9a:	609a      	str	r2, [r3, #8]
      break;
 8004f9c:	e03c      	b.n	8005018 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004faa:	461a      	mov	r2, r3
 8004fac:	f000 fddc 	bl	8005b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2150      	movs	r1, #80	@ 0x50
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fe35 	bl	8005c26 <TIM_ITRx_SetConfig>
      break;
 8004fbc:	e02c      	b.n	8005018 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f000 fdfb 	bl	8005bc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2160      	movs	r1, #96	@ 0x60
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fe25 	bl	8005c26 <TIM_ITRx_SetConfig>
      break;
 8004fdc:	e01c      	b.n	8005018 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fea:	461a      	mov	r2, r3
 8004fec:	f000 fdbc 	bl	8005b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2140      	movs	r1, #64	@ 0x40
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fe15 	bl	8005c26 <TIM_ITRx_SetConfig>
      break;
 8004ffc:	e00c      	b.n	8005018 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4619      	mov	r1, r3
 8005008:	4610      	mov	r0, r2
 800500a:	f000 fe0c 	bl	8005c26 <TIM_ITRx_SetConfig>
      break;
 800500e:	e003      	b.n	8005018 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	73fb      	strb	r3, [r7, #15]
      break;
 8005014:	e000      	b.n	8005018 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005016:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005028:	7bfb      	ldrb	r3, [r7, #15]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	00100070 	.word	0x00100070
 8005038:	00100060 	.word	0x00100060
 800503c:	00100050 	.word	0x00100050
 8005040:	00100040 	.word	0x00100040
 8005044:	00100030 	.word	0x00100030
 8005048:	00100020 	.word	0x00100020

0800504c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	460b      	mov	r3, r1
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e14a      	b.n	800539e <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b01      	cmp	r3, #1
 8005112:	f040 80dd 	bne.w	80052d0 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8005116:	7afb      	ldrb	r3, [r7, #11]
 8005118:	2b1f      	cmp	r3, #31
 800511a:	f200 80d6 	bhi.w	80052ca <HAL_TIM_RegisterCallback+0x1de>
 800511e:	a201      	add	r2, pc, #4	@ (adr r2, 8005124 <HAL_TIM_RegisterCallback+0x38>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	080051a5 	.word	0x080051a5
 8005128:	080051ad 	.word	0x080051ad
 800512c:	080051b5 	.word	0x080051b5
 8005130:	080051bd 	.word	0x080051bd
 8005134:	080051c5 	.word	0x080051c5
 8005138:	080051cd 	.word	0x080051cd
 800513c:	080051d5 	.word	0x080051d5
 8005140:	080051dd 	.word	0x080051dd
 8005144:	080051e5 	.word	0x080051e5
 8005148:	080051ed 	.word	0x080051ed
 800514c:	080051f5 	.word	0x080051f5
 8005150:	080051fd 	.word	0x080051fd
 8005154:	08005205 	.word	0x08005205
 8005158:	0800520d 	.word	0x0800520d
 800515c:	08005217 	.word	0x08005217
 8005160:	08005221 	.word	0x08005221
 8005164:	0800522b 	.word	0x0800522b
 8005168:	08005235 	.word	0x08005235
 800516c:	0800523f 	.word	0x0800523f
 8005170:	08005249 	.word	0x08005249
 8005174:	08005253 	.word	0x08005253
 8005178:	0800525d 	.word	0x0800525d
 800517c:	08005267 	.word	0x08005267
 8005180:	08005271 	.word	0x08005271
 8005184:	0800527b 	.word	0x0800527b
 8005188:	08005285 	.word	0x08005285
 800518c:	0800528f 	.word	0x0800528f
 8005190:	08005299 	.word	0x08005299
 8005194:	080052a3 	.word	0x080052a3
 8005198:	080052ad 	.word	0x080052ad
 800519c:	080052b7 	.word	0x080052b7
 80051a0:	080052c1 	.word	0x080052c1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80051aa:	e0f7      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80051b2:	e0f3      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80051ba:	e0ef      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80051c2:	e0eb      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80051ca:	e0e7      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80051d2:	e0e3      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80051da:	e0df      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80051e2:	e0db      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80051ea:	e0d7      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80051f2:	e0d3      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80051fa:	e0cf      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8005202:	e0cb      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800520a:	e0c7      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8005214:	e0c2      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800521e:	e0bd      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8005228:	e0b8      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8005232:	e0b3      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800523c:	e0ae      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8005246:	e0a9      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8005250:	e0a4      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800525a:	e09f      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8005264:	e09a      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800526e:	e095      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8005278:	e090      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8005282:	e08b      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800528c:	e086      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8005296:	e081      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80052a0:	e07c      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80052aa:	e077      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80052b4:	e072      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80052be:	e06d      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80052c8:	e068      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	75fb      	strb	r3, [r7, #23]
        break;
 80052ce:	e065      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d15d      	bne.n	8005398 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80052dc:	7afb      	ldrb	r3, [r7, #11]
 80052de:	2b0d      	cmp	r3, #13
 80052e0:	d857      	bhi.n	8005392 <HAL_TIM_RegisterCallback+0x2a6>
 80052e2:	a201      	add	r2, pc, #4	@ (adr r2, 80052e8 <HAL_TIM_RegisterCallback+0x1fc>)
 80052e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e8:	08005321 	.word	0x08005321
 80052ec:	08005329 	.word	0x08005329
 80052f0:	08005331 	.word	0x08005331
 80052f4:	08005339 	.word	0x08005339
 80052f8:	08005341 	.word	0x08005341
 80052fc:	08005349 	.word	0x08005349
 8005300:	08005351 	.word	0x08005351
 8005304:	08005359 	.word	0x08005359
 8005308:	08005361 	.word	0x08005361
 800530c:	08005369 	.word	0x08005369
 8005310:	08005371 	.word	0x08005371
 8005314:	08005379 	.word	0x08005379
 8005318:	08005381 	.word	0x08005381
 800531c:	08005389 	.word	0x08005389
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8005326:	e039      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800532e:	e035      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8005336:	e031      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800533e:	e02d      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8005346:	e029      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800534e:	e025      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8005356:	e021      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800535e:	e01d      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8005366:	e019      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800536e:	e015      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8005376:	e011      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800537e:	e00d      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8005386:	e009      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8005390:	e004      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	75fb      	strb	r3, [r7, #23]
        break;
 8005396:	e001      	b.n	800539c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800539c:	7dfb      	ldrb	r3, [r7, #23]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	371c      	adds	r7, #28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop

080053ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a4c      	ldr	r2, [pc, #304]	@ (80054f0 <TIM_Base_SetConfig+0x144>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d017      	beq.n	80053f4 <TIM_Base_SetConfig+0x48>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ca:	d013      	beq.n	80053f4 <TIM_Base_SetConfig+0x48>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a49      	ldr	r2, [pc, #292]	@ (80054f4 <TIM_Base_SetConfig+0x148>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00f      	beq.n	80053f4 <TIM_Base_SetConfig+0x48>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a48      	ldr	r2, [pc, #288]	@ (80054f8 <TIM_Base_SetConfig+0x14c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00b      	beq.n	80053f4 <TIM_Base_SetConfig+0x48>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a47      	ldr	r2, [pc, #284]	@ (80054fc <TIM_Base_SetConfig+0x150>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d007      	beq.n	80053f4 <TIM_Base_SetConfig+0x48>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a46      	ldr	r2, [pc, #280]	@ (8005500 <TIM_Base_SetConfig+0x154>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_Base_SetConfig+0x48>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a45      	ldr	r2, [pc, #276]	@ (8005504 <TIM_Base_SetConfig+0x158>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d108      	bne.n	8005406 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a39      	ldr	r2, [pc, #228]	@ (80054f0 <TIM_Base_SetConfig+0x144>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d023      	beq.n	8005456 <TIM_Base_SetConfig+0xaa>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005414:	d01f      	beq.n	8005456 <TIM_Base_SetConfig+0xaa>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a36      	ldr	r2, [pc, #216]	@ (80054f4 <TIM_Base_SetConfig+0x148>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d01b      	beq.n	8005456 <TIM_Base_SetConfig+0xaa>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a35      	ldr	r2, [pc, #212]	@ (80054f8 <TIM_Base_SetConfig+0x14c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d017      	beq.n	8005456 <TIM_Base_SetConfig+0xaa>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a34      	ldr	r2, [pc, #208]	@ (80054fc <TIM_Base_SetConfig+0x150>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d013      	beq.n	8005456 <TIM_Base_SetConfig+0xaa>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a33      	ldr	r2, [pc, #204]	@ (8005500 <TIM_Base_SetConfig+0x154>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00f      	beq.n	8005456 <TIM_Base_SetConfig+0xaa>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a33      	ldr	r2, [pc, #204]	@ (8005508 <TIM_Base_SetConfig+0x15c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00b      	beq.n	8005456 <TIM_Base_SetConfig+0xaa>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a32      	ldr	r2, [pc, #200]	@ (800550c <TIM_Base_SetConfig+0x160>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d007      	beq.n	8005456 <TIM_Base_SetConfig+0xaa>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a31      	ldr	r2, [pc, #196]	@ (8005510 <TIM_Base_SetConfig+0x164>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d003      	beq.n	8005456 <TIM_Base_SetConfig+0xaa>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a2c      	ldr	r2, [pc, #176]	@ (8005504 <TIM_Base_SetConfig+0x158>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d108      	bne.n	8005468 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800545c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4313      	orrs	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a18      	ldr	r2, [pc, #96]	@ (80054f0 <TIM_Base_SetConfig+0x144>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d013      	beq.n	80054bc <TIM_Base_SetConfig+0x110>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a1a      	ldr	r2, [pc, #104]	@ (8005500 <TIM_Base_SetConfig+0x154>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00f      	beq.n	80054bc <TIM_Base_SetConfig+0x110>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a1a      	ldr	r2, [pc, #104]	@ (8005508 <TIM_Base_SetConfig+0x15c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00b      	beq.n	80054bc <TIM_Base_SetConfig+0x110>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a19      	ldr	r2, [pc, #100]	@ (800550c <TIM_Base_SetConfig+0x160>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d007      	beq.n	80054bc <TIM_Base_SetConfig+0x110>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a18      	ldr	r2, [pc, #96]	@ (8005510 <TIM_Base_SetConfig+0x164>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d003      	beq.n	80054bc <TIM_Base_SetConfig+0x110>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a13      	ldr	r2, [pc, #76]	@ (8005504 <TIM_Base_SetConfig+0x158>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d103      	bne.n	80054c4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	691a      	ldr	r2, [r3, #16]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d105      	bne.n	80054e2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f023 0201 	bic.w	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	611a      	str	r2, [r3, #16]
  }
}
 80054e2:	bf00      	nop
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800
 80054fc:	40000c00 	.word	0x40000c00
 8005500:	40013400 	.word	0x40013400
 8005504:	40015000 	.word	0x40015000
 8005508:	40014000 	.word	0x40014000
 800550c:	40014400 	.word	0x40014400
 8005510:	40014800 	.word	0x40014800

08005514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	f023 0201 	bic.w	r2, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0303 	bic.w	r3, r3, #3
 800554e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f023 0302 	bic.w	r3, r3, #2
 8005560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a30      	ldr	r2, [pc, #192]	@ (8005630 <TIM_OC1_SetConfig+0x11c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d013      	beq.n	800559c <TIM_OC1_SetConfig+0x88>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a2f      	ldr	r2, [pc, #188]	@ (8005634 <TIM_OC1_SetConfig+0x120>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00f      	beq.n	800559c <TIM_OC1_SetConfig+0x88>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a2e      	ldr	r2, [pc, #184]	@ (8005638 <TIM_OC1_SetConfig+0x124>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00b      	beq.n	800559c <TIM_OC1_SetConfig+0x88>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a2d      	ldr	r2, [pc, #180]	@ (800563c <TIM_OC1_SetConfig+0x128>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d007      	beq.n	800559c <TIM_OC1_SetConfig+0x88>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a2c      	ldr	r2, [pc, #176]	@ (8005640 <TIM_OC1_SetConfig+0x12c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <TIM_OC1_SetConfig+0x88>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a2b      	ldr	r2, [pc, #172]	@ (8005644 <TIM_OC1_SetConfig+0x130>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d10c      	bne.n	80055b6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f023 0308 	bic.w	r3, r3, #8
 80055a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f023 0304 	bic.w	r3, r3, #4
 80055b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005630 <TIM_OC1_SetConfig+0x11c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <TIM_OC1_SetConfig+0xd2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005634 <TIM_OC1_SetConfig+0x120>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00f      	beq.n	80055e6 <TIM_OC1_SetConfig+0xd2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005638 <TIM_OC1_SetConfig+0x124>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00b      	beq.n	80055e6 <TIM_OC1_SetConfig+0xd2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a1a      	ldr	r2, [pc, #104]	@ (800563c <TIM_OC1_SetConfig+0x128>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d007      	beq.n	80055e6 <TIM_OC1_SetConfig+0xd2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a19      	ldr	r2, [pc, #100]	@ (8005640 <TIM_OC1_SetConfig+0x12c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d003      	beq.n	80055e6 <TIM_OC1_SetConfig+0xd2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a18      	ldr	r2, [pc, #96]	@ (8005644 <TIM_OC1_SetConfig+0x130>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d111      	bne.n	800560a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	621a      	str	r2, [r3, #32]
}
 8005624:	bf00      	nop
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	40012c00 	.word	0x40012c00
 8005634:	40013400 	.word	0x40013400
 8005638:	40014000 	.word	0x40014000
 800563c:	40014400 	.word	0x40014400
 8005640:	40014800 	.word	0x40014800
 8005644:	40015000 	.word	0x40015000

08005648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	f023 0210 	bic.w	r2, r3, #16
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005676:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800567a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	021b      	lsls	r3, r3, #8
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f023 0320 	bic.w	r3, r3, #32
 8005696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005758 <TIM_OC2_SetConfig+0x110>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d007      	beq.n	80056bc <TIM_OC2_SetConfig+0x74>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a2b      	ldr	r2, [pc, #172]	@ (800575c <TIM_OC2_SetConfig+0x114>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_OC2_SetConfig+0x74>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005760 <TIM_OC2_SetConfig+0x118>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d10d      	bne.n	80056d8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a1f      	ldr	r2, [pc, #124]	@ (8005758 <TIM_OC2_SetConfig+0x110>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d013      	beq.n	8005708 <TIM_OC2_SetConfig+0xc0>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a1e      	ldr	r2, [pc, #120]	@ (800575c <TIM_OC2_SetConfig+0x114>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d00f      	beq.n	8005708 <TIM_OC2_SetConfig+0xc0>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005764 <TIM_OC2_SetConfig+0x11c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00b      	beq.n	8005708 <TIM_OC2_SetConfig+0xc0>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a1d      	ldr	r2, [pc, #116]	@ (8005768 <TIM_OC2_SetConfig+0x120>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d007      	beq.n	8005708 <TIM_OC2_SetConfig+0xc0>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a1c      	ldr	r2, [pc, #112]	@ (800576c <TIM_OC2_SetConfig+0x124>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d003      	beq.n	8005708 <TIM_OC2_SetConfig+0xc0>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a17      	ldr	r2, [pc, #92]	@ (8005760 <TIM_OC2_SetConfig+0x118>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d113      	bne.n	8005730 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800570e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005716:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40012c00 	.word	0x40012c00
 800575c:	40013400 	.word	0x40013400
 8005760:	40015000 	.word	0x40015000
 8005764:	40014000 	.word	0x40014000
 8005768:	40014400 	.word	0x40014400
 800576c:	40014800 	.word	0x40014800

08005770 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800579e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0303 	bic.w	r3, r3, #3
 80057aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	021b      	lsls	r3, r3, #8
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a2b      	ldr	r2, [pc, #172]	@ (800587c <TIM_OC3_SetConfig+0x10c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d007      	beq.n	80057e2 <TIM_OC3_SetConfig+0x72>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a2a      	ldr	r2, [pc, #168]	@ (8005880 <TIM_OC3_SetConfig+0x110>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d003      	beq.n	80057e2 <TIM_OC3_SetConfig+0x72>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a29      	ldr	r2, [pc, #164]	@ (8005884 <TIM_OC3_SetConfig+0x114>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d10d      	bne.n	80057fe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	021b      	lsls	r3, r3, #8
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a1e      	ldr	r2, [pc, #120]	@ (800587c <TIM_OC3_SetConfig+0x10c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d013      	beq.n	800582e <TIM_OC3_SetConfig+0xbe>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a1d      	ldr	r2, [pc, #116]	@ (8005880 <TIM_OC3_SetConfig+0x110>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00f      	beq.n	800582e <TIM_OC3_SetConfig+0xbe>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a1d      	ldr	r2, [pc, #116]	@ (8005888 <TIM_OC3_SetConfig+0x118>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00b      	beq.n	800582e <TIM_OC3_SetConfig+0xbe>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a1c      	ldr	r2, [pc, #112]	@ (800588c <TIM_OC3_SetConfig+0x11c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d007      	beq.n	800582e <TIM_OC3_SetConfig+0xbe>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a1b      	ldr	r2, [pc, #108]	@ (8005890 <TIM_OC3_SetConfig+0x120>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d003      	beq.n	800582e <TIM_OC3_SetConfig+0xbe>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a16      	ldr	r2, [pc, #88]	@ (8005884 <TIM_OC3_SetConfig+0x114>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d113      	bne.n	8005856 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800583c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	621a      	str	r2, [r3, #32]
}
 8005870:	bf00      	nop
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	40012c00 	.word	0x40012c00
 8005880:	40013400 	.word	0x40013400
 8005884:	40015000 	.word	0x40015000
 8005888:	40014000 	.word	0x40014000
 800588c:	40014400 	.word	0x40014400
 8005890:	40014800 	.word	0x40014800

08005894 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	031b      	lsls	r3, r3, #12
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a2c      	ldr	r2, [pc, #176]	@ (80059a4 <TIM_OC4_SetConfig+0x110>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d007      	beq.n	8005908 <TIM_OC4_SetConfig+0x74>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a2b      	ldr	r2, [pc, #172]	@ (80059a8 <TIM_OC4_SetConfig+0x114>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d003      	beq.n	8005908 <TIM_OC4_SetConfig+0x74>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a2a      	ldr	r2, [pc, #168]	@ (80059ac <TIM_OC4_SetConfig+0x118>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d10d      	bne.n	8005924 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800590e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	031b      	lsls	r3, r3, #12
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005922:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a1f      	ldr	r2, [pc, #124]	@ (80059a4 <TIM_OC4_SetConfig+0x110>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d013      	beq.n	8005954 <TIM_OC4_SetConfig+0xc0>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a1e      	ldr	r2, [pc, #120]	@ (80059a8 <TIM_OC4_SetConfig+0x114>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00f      	beq.n	8005954 <TIM_OC4_SetConfig+0xc0>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a1e      	ldr	r2, [pc, #120]	@ (80059b0 <TIM_OC4_SetConfig+0x11c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00b      	beq.n	8005954 <TIM_OC4_SetConfig+0xc0>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a1d      	ldr	r2, [pc, #116]	@ (80059b4 <TIM_OC4_SetConfig+0x120>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d007      	beq.n	8005954 <TIM_OC4_SetConfig+0xc0>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a1c      	ldr	r2, [pc, #112]	@ (80059b8 <TIM_OC4_SetConfig+0x124>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d003      	beq.n	8005954 <TIM_OC4_SetConfig+0xc0>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a17      	ldr	r2, [pc, #92]	@ (80059ac <TIM_OC4_SetConfig+0x118>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d113      	bne.n	800597c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800595a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005962:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	019b      	lsls	r3, r3, #6
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	019b      	lsls	r3, r3, #6
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	621a      	str	r2, [r3, #32]
}
 8005996:	bf00      	nop
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	40013400 	.word	0x40013400
 80059ac:	40015000 	.word	0x40015000
 80059b0:	40014000 	.word	0x40014000
 80059b4:	40014400 	.word	0x40014400
 80059b8:	40014800 	.word	0x40014800

080059bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005a00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	041b      	lsls	r3, r3, #16
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a19      	ldr	r2, [pc, #100]	@ (8005a78 <TIM_OC5_SetConfig+0xbc>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d013      	beq.n	8005a3e <TIM_OC5_SetConfig+0x82>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a18      	ldr	r2, [pc, #96]	@ (8005a7c <TIM_OC5_SetConfig+0xc0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00f      	beq.n	8005a3e <TIM_OC5_SetConfig+0x82>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a17      	ldr	r2, [pc, #92]	@ (8005a80 <TIM_OC5_SetConfig+0xc4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00b      	beq.n	8005a3e <TIM_OC5_SetConfig+0x82>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a16      	ldr	r2, [pc, #88]	@ (8005a84 <TIM_OC5_SetConfig+0xc8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d007      	beq.n	8005a3e <TIM_OC5_SetConfig+0x82>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a15      	ldr	r2, [pc, #84]	@ (8005a88 <TIM_OC5_SetConfig+0xcc>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d003      	beq.n	8005a3e <TIM_OC5_SetConfig+0x82>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a14      	ldr	r2, [pc, #80]	@ (8005a8c <TIM_OC5_SetConfig+0xd0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d109      	bne.n	8005a52 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	021b      	lsls	r3, r3, #8
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	621a      	str	r2, [r3, #32]
}
 8005a6c:	bf00      	nop
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	40012c00 	.word	0x40012c00
 8005a7c:	40013400 	.word	0x40013400
 8005a80:	40014000 	.word	0x40014000
 8005a84:	40014400 	.word	0x40014400
 8005a88:	40014800 	.word	0x40014800
 8005a8c:	40015000 	.word	0x40015000

08005a90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	051b      	lsls	r3, r3, #20
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8005b50 <TIM_OC6_SetConfig+0xc0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d013      	beq.n	8005b14 <TIM_OC6_SetConfig+0x84>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a19      	ldr	r2, [pc, #100]	@ (8005b54 <TIM_OC6_SetConfig+0xc4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00f      	beq.n	8005b14 <TIM_OC6_SetConfig+0x84>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a18      	ldr	r2, [pc, #96]	@ (8005b58 <TIM_OC6_SetConfig+0xc8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00b      	beq.n	8005b14 <TIM_OC6_SetConfig+0x84>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a17      	ldr	r2, [pc, #92]	@ (8005b5c <TIM_OC6_SetConfig+0xcc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d007      	beq.n	8005b14 <TIM_OC6_SetConfig+0x84>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a16      	ldr	r2, [pc, #88]	@ (8005b60 <TIM_OC6_SetConfig+0xd0>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d003      	beq.n	8005b14 <TIM_OC6_SetConfig+0x84>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a15      	ldr	r2, [pc, #84]	@ (8005b64 <TIM_OC6_SetConfig+0xd4>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d109      	bne.n	8005b28 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	029b      	lsls	r3, r3, #10
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40012c00 	.word	0x40012c00
 8005b54:	40013400 	.word	0x40013400
 8005b58:	40014000 	.word	0x40014000
 8005b5c:	40014400 	.word	0x40014400
 8005b60:	40014800 	.word	0x40014800
 8005b64:	40015000 	.word	0x40015000

08005b68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	f023 0201 	bic.w	r2, r3, #1
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f023 030a 	bic.w	r3, r3, #10
 8005ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b087      	sub	sp, #28
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	f023 0210 	bic.w	r2, r3, #16
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	031b      	lsls	r3, r3, #12
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	621a      	str	r2, [r3, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b085      	sub	sp, #20
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005c3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f043 0307 	orr.w	r3, r3, #7
 8005c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	609a      	str	r2, [r3, #8]
}
 8005c54:	bf00      	nop
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	021a      	lsls	r2, r3, #8
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	609a      	str	r2, [r3, #8]
}
 8005c94:	bf00      	nop
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1a      	ldr	r2, [r3, #32]
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	401a      	ands	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a1a      	ldr	r2, [r3, #32]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f003 031f 	and.w	r3, r3, #31
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	621a      	str	r2, [r3, #32]
}
 8005cde:	bf00      	nop
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
	...

08005cec <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a26      	ldr	r2, [pc, #152]	@ (8005d90 <TIM_ResetCallback+0xa4>)
 8005cf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a25      	ldr	r2, [pc, #148]	@ (8005d94 <TIM_ResetCallback+0xa8>)
 8005d00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a24      	ldr	r2, [pc, #144]	@ (8005d98 <TIM_ResetCallback+0xac>)
 8005d08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a23      	ldr	r2, [pc, #140]	@ (8005d9c <TIM_ResetCallback+0xb0>)
 8005d10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a22      	ldr	r2, [pc, #136]	@ (8005da0 <TIM_ResetCallback+0xb4>)
 8005d18:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a21      	ldr	r2, [pc, #132]	@ (8005da4 <TIM_ResetCallback+0xb8>)
 8005d20:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a20      	ldr	r2, [pc, #128]	@ (8005da8 <TIM_ResetCallback+0xbc>)
 8005d28:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005dac <TIM_ResetCallback+0xc0>)
 8005d30:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a1e      	ldr	r2, [pc, #120]	@ (8005db0 <TIM_ResetCallback+0xc4>)
 8005d38:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8005db4 <TIM_ResetCallback+0xc8>)
 8005d40:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a1c      	ldr	r2, [pc, #112]	@ (8005db8 <TIM_ResetCallback+0xcc>)
 8005d48:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005dbc <TIM_ResetCallback+0xd0>)
 8005d50:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a1a      	ldr	r2, [pc, #104]	@ (8005dc0 <TIM_ResetCallback+0xd4>)
 8005d58:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a19      	ldr	r2, [pc, #100]	@ (8005dc4 <TIM_ResetCallback+0xd8>)
 8005d60:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a18      	ldr	r2, [pc, #96]	@ (8005dc8 <TIM_ResetCallback+0xdc>)
 8005d68:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a17      	ldr	r2, [pc, #92]	@ (8005dcc <TIM_ResetCallback+0xe0>)
 8005d70:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a16      	ldr	r2, [pc, #88]	@ (8005dd0 <TIM_ResetCallback+0xe4>)
 8005d78:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a15      	ldr	r2, [pc, #84]	@ (8005dd4 <TIM_ResetCallback+0xe8>)
 8005d80:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	080018ad 	.word	0x080018ad
 8005d94:	0800504d 	.word	0x0800504d
 8005d98:	080050b1 	.word	0x080050b1
 8005d9c:	080050c5 	.word	0x080050c5
 8005da0:	08005075 	.word	0x08005075
 8005da4:	08005089 	.word	0x08005089
 8005da8:	08005061 	.word	0x08005061
 8005dac:	08001881 	.word	0x08001881
 8005db0:	0800509d 	.word	0x0800509d
 8005db4:	080050d9 	.word	0x080050d9
 8005db8:	08006271 	.word	0x08006271
 8005dbc:	08006285 	.word	0x08006285
 8005dc0:	08006299 	.word	0x08006299
 8005dc4:	080062ad 	.word	0x080062ad
 8005dc8:	080062c1 	.word	0x080062c1
 8005dcc:	080062d5 	.word	0x080062d5
 8005dd0:	080062e9 	.word	0x080062e9
 8005dd4:	080062fd 	.word	0x080062fd

08005dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e074      	b.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a34      	ldr	r2, [pc, #208]	@ (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d009      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a33      	ldr	r2, [pc, #204]	@ (8005eec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d004      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a31      	ldr	r2, [pc, #196]	@ (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d108      	bne.n	8005e40 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a21      	ldr	r2, [pc, #132]	@ (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d022      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e70:	d01d      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a1f      	ldr	r2, [pc, #124]	@ (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d018      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a1d      	ldr	r2, [pc, #116]	@ (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d013      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8005efc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00e      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a15      	ldr	r2, [pc, #84]	@ (8005eec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d009      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a18      	ldr	r2, [pc, #96]	@ (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d004      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a11      	ldr	r2, [pc, #68]	@ (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d10c      	bne.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	40012c00 	.word	0x40012c00
 8005eec:	40013400 	.word	0x40013400
 8005ef0:	40015000 	.word	0x40015000
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800
 8005efc:	40000c00 	.word	0x40000c00
 8005f00:	40014000 	.word	0x40014000

08005f04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e078      	b.n	8006012 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	041b      	lsls	r3, r3, #16
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1c      	ldr	r2, [pc, #112]	@ (8006020 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d009      	beq.n	8005fc6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8006024 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d004      	beq.n	8005fc6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a19      	ldr	r2, [pc, #100]	@ (8006028 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d11c      	bne.n	8006000 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd0:	051b      	lsls	r3, r3, #20
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40012c00 	.word	0x40012c00
 8006024:	40013400 	.word	0x40013400
 8006028:	40015000 	.word	0x40015000

0800602c <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 800602c:	b480      	push	{r7}
 800602e:	b08b      	sub	sp, #44	@ 0x2c
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006044:	2b01      	cmp	r3, #1
 8006046:	d101      	bne.n	800604c <HAL_TIMEx_ConfigBreakInput+0x20>
 8006048:	2302      	movs	r3, #2
 800604a:	e10b      	b.n	8006264 <HAL_TIMEx_ConfigBreakInput+0x238>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b80      	cmp	r3, #128	@ 0x80
 800605a:	f000 8096 	beq.w	800618a <HAL_TIMEx_ConfigBreakInput+0x15e>
 800605e:	2b80      	cmp	r3, #128	@ 0x80
 8006060:	f200 809c 	bhi.w	800619c <HAL_TIMEx_ConfigBreakInput+0x170>
 8006064:	2b20      	cmp	r3, #32
 8006066:	d849      	bhi.n	80060fc <HAL_TIMEx_ConfigBreakInput+0xd0>
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 8097 	beq.w	800619c <HAL_TIMEx_ConfigBreakInput+0x170>
 800606e:	3b01      	subs	r3, #1
 8006070:	2b1f      	cmp	r3, #31
 8006072:	f200 8093 	bhi.w	800619c <HAL_TIMEx_ConfigBreakInput+0x170>
 8006076:	a201      	add	r2, pc, #4	@ (adr r2, 800607c <HAL_TIMEx_ConfigBreakInput+0x50>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	08006103 	.word	0x08006103
 8006080:	08006117 	.word	0x08006117
 8006084:	0800619d 	.word	0x0800619d
 8006088:	0800612b 	.word	0x0800612b
 800608c:	0800619d 	.word	0x0800619d
 8006090:	0800619d 	.word	0x0800619d
 8006094:	0800619d 	.word	0x0800619d
 8006098:	0800613f 	.word	0x0800613f
 800609c:	0800619d 	.word	0x0800619d
 80060a0:	0800619d 	.word	0x0800619d
 80060a4:	0800619d 	.word	0x0800619d
 80060a8:	0800619d 	.word	0x0800619d
 80060ac:	0800619d 	.word	0x0800619d
 80060b0:	0800619d 	.word	0x0800619d
 80060b4:	0800619d 	.word	0x0800619d
 80060b8:	08006153 	.word	0x08006153
 80060bc:	0800619d 	.word	0x0800619d
 80060c0:	0800619d 	.word	0x0800619d
 80060c4:	0800619d 	.word	0x0800619d
 80060c8:	0800619d 	.word	0x0800619d
 80060cc:	0800619d 	.word	0x0800619d
 80060d0:	0800619d 	.word	0x0800619d
 80060d4:	0800619d 	.word	0x0800619d
 80060d8:	0800619d 	.word	0x0800619d
 80060dc:	0800619d 	.word	0x0800619d
 80060e0:	0800619d 	.word	0x0800619d
 80060e4:	0800619d 	.word	0x0800619d
 80060e8:	0800619d 	.word	0x0800619d
 80060ec:	0800619d 	.word	0x0800619d
 80060f0:	0800619d 	.word	0x0800619d
 80060f4:	0800619d 	.word	0x0800619d
 80060f8:	08006167 	.word	0x08006167
 80060fc:	2b40      	cmp	r3, #64	@ 0x40
 80060fe:	d03b      	beq.n	8006178 <HAL_TIMEx_ConfigBreakInput+0x14c>
 8006100:	e04c      	b.n	800619c <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8006102:	2301      	movs	r3, #1
 8006104:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8006106:	2300      	movs	r3, #0
 8006108:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800610a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800610e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8006110:	2309      	movs	r3, #9
 8006112:	617b      	str	r3, [r7, #20]
      break;
 8006114:	e04b      	b.n	80061ae <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8006116:	2302      	movs	r3, #2
 8006118:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800611a:	2301      	movs	r3, #1
 800611c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800611e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006122:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8006124:	230a      	movs	r3, #10
 8006126:	617b      	str	r3, [r7, #20]
      break;
 8006128:	e041      	b.n	80061ae <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800612a:	2304      	movs	r3, #4
 800612c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800612e:	2302      	movs	r3, #2
 8006130:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8006132:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006136:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8006138:	230b      	movs	r3, #11
 800613a:	617b      	str	r3, [r7, #20]
      break;
 800613c:	e037      	b.n	80061ae <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800613e:	2308      	movs	r3, #8
 8006140:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8006142:	2303      	movs	r3, #3
 8006144:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8006146:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800614a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 800614c:	230c      	movs	r3, #12
 800614e:	617b      	str	r3, [r7, #20]
      break;
 8006150:	e02d      	b.n	80061ae <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 8006152:	2310      	movs	r3, #16
 8006154:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8006156:	2304      	movs	r3, #4
 8006158:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 800615a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800615e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8006160:	230d      	movs	r3, #13
 8006162:	617b      	str	r3, [r7, #20]
      break;
 8006164:	e023      	b.n	80061ae <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 8006166:	2320      	movs	r3, #32
 8006168:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 800616a:	2305      	movs	r3, #5
 800616c:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	617b      	str	r3, [r7, #20]
      break;
 8006176:	e01a      	b.n	80061ae <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 8006178:	2340      	movs	r3, #64	@ 0x40
 800617a:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 800617c:	2306      	movs	r3, #6
 800617e:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	617b      	str	r3, [r7, #20]
      break;
 8006188:	e011      	b.n	80061ae <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 800618a:	2380      	movs	r3, #128	@ 0x80
 800618c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 800618e:	2307      	movs	r3, #7
 8006190:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	617b      	str	r3, [r7, #20]
      break;
 800619a:	e008      	b.n	80061ae <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	617b      	str	r3, [r7, #20]
      break;
 80061ac:	bf00      	nop
    }
  }

  switch (BreakInput)
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d003      	beq.n	80061bc <HAL_TIMEx_ConfigBreakInput+0x190>
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d025      	beq.n	8006206 <HAL_TIMEx_ConfigBreakInput+0x1da>
 80061ba:	e049      	b.n	8006250 <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061c2:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	43db      	mvns	r3, r3
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	4013      	ands	r3, r2
 80061cc:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	409a      	lsls	r2, r3
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	4013      	ands	r3, r2
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	43db      	mvns	r3, r3
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4013      	ands	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	689a      	ldr	r2, [r3, #8]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	409a      	lsls	r2, r3
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	4013      	ands	r3, r2
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8006204:	e028      	b.n	8006258 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800620c:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	43db      	mvns	r3, r3
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	4013      	ands	r3, r2
 8006216:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	409a      	lsls	r2, r3
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	4013      	ands	r3, r2
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	4313      	orrs	r3, r2
 8006228:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	43db      	mvns	r3, r3
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4013      	ands	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	409a      	lsls	r2, r3
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	4013      	ands	r3, r2
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800624e:	e003      	b.n	8006258 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8006256:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006260:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006264:	4618      	mov	r0, r3
 8006266:	372c      	adds	r7, #44	@ 0x2c
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e050      	b.n	80063c4 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006328:	2b00      	cmp	r3, #0
 800632a:	d114      	bne.n	8006356 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fdc5 	bl	8006ec4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d103      	bne.n	800634c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a21      	ldr	r2, [pc, #132]	@ (80063cc <HAL_UART_Init+0xbc>)
 8006348:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2224      	movs	r2, #36	@ 0x24
 800635a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 0201 	bic.w	r2, r2, #1
 800636c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 f8f2 	bl	8007560 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fdf3 	bl	8006f68 <UART_SetConfig>
 8006382:	4603      	mov	r3, r0
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e01b      	b.n	80063c4 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800639a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 0201 	orr.w	r2, r2, #1
 80063ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 f971 	bl	80076a4 <UART_CheckIdleState>
 80063c2:	4603      	mov	r3, r0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	08001bf1 	.word	0x08001bf1

080063d0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	460b      	mov	r3, r1
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d109      	bne.n	80063fc <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e09c      	b.n	8006536 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006402:	2b20      	cmp	r3, #32
 8006404:	d16c      	bne.n	80064e0 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8006406:	7afb      	ldrb	r3, [r7, #11]
 8006408:	2b0c      	cmp	r3, #12
 800640a:	d85e      	bhi.n	80064ca <HAL_UART_RegisterCallback+0xfa>
 800640c:	a201      	add	r2, pc, #4	@ (adr r2, 8006414 <HAL_UART_RegisterCallback+0x44>)
 800640e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006412:	bf00      	nop
 8006414:	08006449 	.word	0x08006449
 8006418:	08006453 	.word	0x08006453
 800641c:	0800645d 	.word	0x0800645d
 8006420:	08006467 	.word	0x08006467
 8006424:	08006471 	.word	0x08006471
 8006428:	0800647b 	.word	0x0800647b
 800642c:	08006485 	.word	0x08006485
 8006430:	0800648f 	.word	0x0800648f
 8006434:	08006499 	.word	0x08006499
 8006438:	080064a3 	.word	0x080064a3
 800643c:	080064ad 	.word	0x080064ad
 8006440:	080064b7 	.word	0x080064b7
 8006444:	080064c1 	.word	0x080064c1
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8006450:	e070      	b.n	8006534 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800645a:	e06b      	b.n	8006534 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8006464:	e066      	b.n	8006534 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800646e:	e061      	b.n	8006534 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8006478:	e05c      	b.n	8006534 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8006482:	e057      	b.n	8006534 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800648c:	e052      	b.n	8006534 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8006496:	e04d      	b.n	8006534 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80064a0:	e048      	b.n	8006534 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80064aa:	e043      	b.n	8006534 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80064b4:	e03e      	b.n	8006534 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80064be:	e039      	b.n	8006534 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80064c8:	e034      	b.n	8006534 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	75fb      	strb	r3, [r7, #23]
        break;
 80064de:	e029      	b.n	8006534 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d11a      	bne.n	8006520 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80064ea:	7afb      	ldrb	r3, [r7, #11]
 80064ec:	2b0b      	cmp	r3, #11
 80064ee:	d002      	beq.n	80064f6 <HAL_UART_RegisterCallback+0x126>
 80064f0:	2b0c      	cmp	r3, #12
 80064f2:	d005      	beq.n	8006500 <HAL_UART_RegisterCallback+0x130>
 80064f4:	e009      	b.n	800650a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80064fe:	e019      	b.n	8006534 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8006508:	e014      	b.n	8006534 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006510:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	75fb      	strb	r3, [r7, #23]
        break;
 800651e:	e009      	b.n	8006534 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006526:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006534:	7dfb      	ldrb	r3, [r7, #23]
}
 8006536:	4618      	mov	r0, r3
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop

08006544 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08a      	sub	sp, #40	@ 0x28
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	4613      	mov	r3, r2
 8006550:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006558:	2b20      	cmp	r3, #32
 800655a:	d167      	bne.n	800662c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <HAL_UART_Transmit_DMA+0x24>
 8006562:	88fb      	ldrh	r3, [r7, #6]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e060      	b.n	800662e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	88fa      	ldrh	r2, [r7, #6]
 8006576:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	88fa      	ldrh	r2, [r7, #6]
 800657e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2221      	movs	r2, #33	@ 0x21
 800658e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d028      	beq.n	80065ec <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800659e:	4a26      	ldr	r2, [pc, #152]	@ (8006638 <HAL_UART_Transmit_DMA+0xf4>)
 80065a0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065a6:	4a25      	ldr	r2, [pc, #148]	@ (800663c <HAL_UART_Transmit_DMA+0xf8>)
 80065a8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065ae:	4a24      	ldr	r2, [pc, #144]	@ (8006640 <HAL_UART_Transmit_DMA+0xfc>)
 80065b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065b6:	2200      	movs	r2, #0
 80065b8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c2:	4619      	mov	r1, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3328      	adds	r3, #40	@ 0x28
 80065ca:	461a      	mov	r2, r3
 80065cc:	88fb      	ldrh	r3, [r7, #6]
 80065ce:	f7fb ff2b 	bl	8002428 <HAL_DMA_Start_IT>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d009      	beq.n	80065ec <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2210      	movs	r2, #16
 80065dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e020      	b.n	800662e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2240      	movs	r2, #64	@ 0x40
 80065f2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3308      	adds	r3, #8
 80065fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	e853 3f00 	ldrex	r3, [r3]
 8006602:	613b      	str	r3, [r7, #16]
   return(result);
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800660a:	627b      	str	r3, [r7, #36]	@ 0x24
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3308      	adds	r3, #8
 8006612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006614:	623a      	str	r2, [r7, #32]
 8006616:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	69f9      	ldr	r1, [r7, #28]
 800661a:	6a3a      	ldr	r2, [r7, #32]
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	61bb      	str	r3, [r7, #24]
   return(result);
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e5      	bne.n	80065f4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	e000      	b.n	800662e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800662c:	2302      	movs	r3, #2
  }
}
 800662e:	4618      	mov	r0, r3
 8006630:	3728      	adds	r7, #40	@ 0x28
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	08007b6f 	.word	0x08007b6f
 800663c:	08007c0d 	.word	0x08007c0d
 8006640:	08007da7 	.word	0x08007da7

08006644 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08a      	sub	sp, #40	@ 0x28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	4613      	mov	r3, r2
 8006650:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006658:	2b20      	cmp	r3, #32
 800665a:	d137      	bne.n	80066cc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <HAL_UART_Receive_DMA+0x24>
 8006662:	88fb      	ldrh	r3, [r7, #6]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e030      	b.n	80066ce <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a18      	ldr	r2, [pc, #96]	@ (80066d8 <HAL_UART_Receive_DMA+0x94>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d01f      	beq.n	80066bc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d018      	beq.n	80066bc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	613b      	str	r3, [r7, #16]
   return(result);
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800669e:	627b      	str	r3, [r7, #36]	@ 0x24
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	461a      	mov	r2, r3
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	623b      	str	r3, [r7, #32]
 80066aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	69f9      	ldr	r1, [r7, #28]
 80066ae:	6a3a      	ldr	r2, [r7, #32]
 80066b0:	e841 2300 	strex	r3, r2, [r1]
 80066b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e6      	bne.n	800668a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80066bc:	88fb      	ldrh	r3, [r7, #6]
 80066be:	461a      	mov	r2, r3
 80066c0:	68b9      	ldr	r1, [r7, #8]
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f001 f906 	bl	80078d4 <UART_Start_Receive_DMA>
 80066c8:	4603      	mov	r3, r0
 80066ca:	e000      	b.n	80066ce <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066cc:	2302      	movs	r3, #2
  }
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3728      	adds	r7, #40	@ 0x28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	40008000 	.word	0x40008000

080066dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b0ba      	sub	sp, #232	@ 0xe8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006702:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006706:	f640 030f 	movw	r3, #2063	@ 0x80f
 800670a:	4013      	ands	r3, r2
 800670c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006710:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006714:	2b00      	cmp	r3, #0
 8006716:	d11b      	bne.n	8006750 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b00      	cmp	r3, #0
 8006722:	d015      	beq.n	8006750 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006728:	f003 0320 	and.w	r3, r3, #32
 800672c:	2b00      	cmp	r3, #0
 800672e:	d105      	bne.n	800673c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d009      	beq.n	8006750 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 82f3 	beq.w	8006d2c <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	4798      	blx	r3
      }
      return;
 800674e:	e2ed      	b.n	8006d2c <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 8129 	beq.w	80069ac <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800675a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800675e:	4b90      	ldr	r3, [pc, #576]	@ (80069a0 <HAL_UART_IRQHandler+0x2c4>)
 8006760:	4013      	ands	r3, r2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006766:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800676a:	4b8e      	ldr	r3, [pc, #568]	@ (80069a4 <HAL_UART_IRQHandler+0x2c8>)
 800676c:	4013      	ands	r3, r2
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 811c 	beq.w	80069ac <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d011      	beq.n	80067a4 <HAL_UART_IRQHandler+0xc8>
 8006780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2201      	movs	r2, #1
 8006792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800679a:	f043 0201 	orr.w	r2, r3, #1
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d011      	beq.n	80067d4 <HAL_UART_IRQHandler+0xf8>
 80067b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00b      	beq.n	80067d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2202      	movs	r2, #2
 80067c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ca:	f043 0204 	orr.w	r2, r3, #4
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d011      	beq.n	8006804 <HAL_UART_IRQHandler+0x128>
 80067e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00b      	beq.n	8006804 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2204      	movs	r2, #4
 80067f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067fa:	f043 0202 	orr.w	r2, r3, #2
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b00      	cmp	r3, #0
 800680e:	d017      	beq.n	8006840 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006814:	f003 0320 	and.w	r3, r3, #32
 8006818:	2b00      	cmp	r3, #0
 800681a:	d105      	bne.n	8006828 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800681c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006820:	4b5f      	ldr	r3, [pc, #380]	@ (80069a0 <HAL_UART_IRQHandler+0x2c4>)
 8006822:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00b      	beq.n	8006840 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2208      	movs	r2, #8
 800682e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006836:	f043 0208 	orr.w	r2, r3, #8
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006844:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006848:	2b00      	cmp	r3, #0
 800684a:	d012      	beq.n	8006872 <HAL_UART_IRQHandler+0x196>
 800684c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006850:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00c      	beq.n	8006872 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006860:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006868:	f043 0220 	orr.w	r2, r3, #32
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 8259 	beq.w	8006d30 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800687e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b00      	cmp	r3, #0
 8006888:	d013      	beq.n	80068b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800688a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d105      	bne.n	80068a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800689a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d007      	beq.n	80068b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c6:	2b40      	cmp	r3, #64	@ 0x40
 80068c8:	d005      	beq.n	80068d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d058      	beq.n	8006988 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f001 f8e3 	bl	8007aa2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e6:	2b40      	cmp	r3, #64	@ 0x40
 80068e8:	d148      	bne.n	800697c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3308      	adds	r3, #8
 80068f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006900:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3308      	adds	r3, #8
 8006912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006916:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800691a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800692e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1d9      	bne.n	80068ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800693c:	2b00      	cmp	r3, #0
 800693e:	d017      	beq.n	8006970 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006946:	4a18      	ldr	r2, [pc, #96]	@ (80069a8 <HAL_UART_IRQHandler+0x2cc>)
 8006948:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006950:	4618      	mov	r0, r3
 8006952:	f7fb fe3d 	bl	80025d0 <HAL_DMA_Abort_IT>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01f      	beq.n	800699c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800696a:	4610      	mov	r0, r2
 800696c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800696e:	e015      	b.n	800699c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697a:	e00f      	b.n	800699c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006986:	e009      	b.n	800699c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800699a:	e1c9      	b.n	8006d30 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800699c:	bf00      	nop
    return;
 800699e:	e1c7      	b.n	8006d30 <HAL_UART_IRQHandler+0x654>
 80069a0:	10000001 	.word	0x10000001
 80069a4:	04000120 	.word	0x04000120
 80069a8:	08007e2b 	.word	0x08007e2b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	f040 8157 	bne.w	8006c64 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ba:	f003 0310 	and.w	r3, r3, #16
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 8150 	beq.w	8006c64 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069c8:	f003 0310 	and.w	r3, r3, #16
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 8149 	beq.w	8006c64 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2210      	movs	r2, #16
 80069d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e4:	2b40      	cmp	r3, #64	@ 0x40
 80069e6:	f040 80bd 	bne.w	8006b64 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 8199 	beq.w	8006d34 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	f080 8191 	bcs.w	8006d34 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0320 	and.w	r3, r3, #32
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f040 8087 	bne.w	8006b3e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	461a      	mov	r2, r3
 8006a56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a5e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1da      	bne.n	8006a30 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3308      	adds	r3, #8
 8006a80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a8c:	f023 0301 	bic.w	r3, r3, #1
 8006a90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3308      	adds	r3, #8
 8006a9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006aa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006aa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ab0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e1      	bne.n	8006a7a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3308      	adds	r3, #8
 8006abc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ac8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006acc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ada:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006adc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ae0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ae8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e3      	bne.n	8006ab6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b0c:	f023 0310 	bic.w	r3, r3, #16
 8006b10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e4      	bne.n	8006afc <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fb fcf0 	bl	800251e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2202      	movs	r2, #2
 8006b42:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8006b56:	b292      	uxth	r2, r2
 8006b58:	1a8a      	subs	r2, r1, r2
 8006b5a:	b292      	uxth	r2, r2
 8006b5c:	4611      	mov	r1, r2
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b62:	e0e7      	b.n	8006d34 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 80d9 	beq.w	8006d38 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8006b86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 80d4 	beq.w	8006d38 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ba4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	461a      	mov	r2, r3
 8006bae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006bb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bb4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006bb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e4      	bne.n	8006b90 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3308      	adds	r3, #8
 8006bcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	623b      	str	r3, [r7, #32]
   return(result);
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bdc:	f023 0301 	bic.w	r3, r3, #1
 8006be0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3308      	adds	r3, #8
 8006bea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006bee:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e1      	bne.n	8006bc6 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0310 	bic.w	r3, r3, #16
 8006c2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006c38:	61fb      	str	r3, [r7, #28]
 8006c3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	69b9      	ldr	r1, [r7, #24]
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	617b      	str	r3, [r7, #20]
   return(result);
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e4      	bne.n	8006c16 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006c58:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c62:	e069      	b.n	8006d38 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d010      	beq.n	8006c92 <HAL_UART_IRQHandler+0x5b6>
 8006c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006c84:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c90:	e055      	b.n	8006d3e <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d014      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d105      	bne.n	8006cb6 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d008      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d03e      	beq.n	8006d3c <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	4798      	blx	r3
    }
    return;
 8006cc6:	e039      	b.n	8006d3c <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d009      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x60c>
 8006cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 f8ba 	bl	8007e5a <UART_EndTransmit_IT>
    return;
 8006ce6:	e02a      	b.n	8006d3e <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00b      	beq.n	8006d0c <HAL_UART_IRQHandler+0x630>
 8006cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cf8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d005      	beq.n	8006d0c <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d0a:	e018      	b.n	8006d3e <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d012      	beq.n	8006d3e <HAL_UART_IRQHandler+0x662>
 8006d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	da0e      	bge.n	8006d3e <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d2a:	e008      	b.n	8006d3e <HAL_UART_IRQHandler+0x662>
      return;
 8006d2c:	bf00      	nop
 8006d2e:	e006      	b.n	8006d3e <HAL_UART_IRQHandler+0x662>
    return;
 8006d30:	bf00      	nop
 8006d32:	e004      	b.n	8006d3e <HAL_UART_IRQHandler+0x662>
      return;
 8006d34:	bf00      	nop
 8006d36:	e002      	b.n	8006d3e <HAL_UART_IRQHandler+0x662>
      return;
 8006d38:	bf00      	nop
 8006d3a:	e000      	b.n	8006d3e <HAL_UART_IRQHandler+0x662>
    return;
 8006d3c:	bf00      	nop
  }
}
 8006d3e:	37e8      	adds	r7, #232	@ 0xe8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a09      	ldr	r2, [pc, #36]	@ (8006e30 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d009      	beq.n	8006e24 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	430a      	orrs	r2, r1
 8006e22:	615a      	str	r2, [r3, #20]
  }
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	40008000 	.word	0x40008000

08006e34 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a18      	ldr	r2, [pc, #96]	@ (8006ea4 <HAL_UART_EnableReceiverTimeout+0x70>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d027      	beq.n	8006e96 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4c:	2b20      	cmp	r3, #32
 8006e4e:	d120      	bne.n	8006e92 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d101      	bne.n	8006e5e <HAL_UART_EnableReceiverTimeout+0x2a>
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	e01c      	b.n	8006e98 <HAL_UART_EnableReceiverTimeout+0x64>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2224      	movs	r2, #36	@ 0x24
 8006e6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8006e7c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2220      	movs	r2, #32
 8006e82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	e002      	b.n	8006e98 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8006e92:	2302      	movs	r3, #2
 8006e94:	e000      	b.n	8006e98 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
  }
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	40008000 	.word	0x40008000

08006ea8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
	...

08006ec4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a1a      	ldr	r2, [pc, #104]	@ (8006f38 <UART_InitCallbacksToDefault+0x74>)
 8006ed0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a19      	ldr	r2, [pc, #100]	@ (8006f3c <UART_InitCallbacksToDefault+0x78>)
 8006ed8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a18      	ldr	r2, [pc, #96]	@ (8006f40 <UART_InitCallbacksToDefault+0x7c>)
 8006ee0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a17      	ldr	r2, [pc, #92]	@ (8006f44 <UART_InitCallbacksToDefault+0x80>)
 8006ee8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a16      	ldr	r2, [pc, #88]	@ (8006f48 <UART_InitCallbacksToDefault+0x84>)
 8006ef0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a15      	ldr	r2, [pc, #84]	@ (8006f4c <UART_InitCallbacksToDefault+0x88>)
 8006ef8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a14      	ldr	r2, [pc, #80]	@ (8006f50 <UART_InitCallbacksToDefault+0x8c>)
 8006f00:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a13      	ldr	r2, [pc, #76]	@ (8006f54 <UART_InitCallbacksToDefault+0x90>)
 8006f08:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a12      	ldr	r2, [pc, #72]	@ (8006f58 <UART_InitCallbacksToDefault+0x94>)
 8006f10:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a11      	ldr	r2, [pc, #68]	@ (8006f5c <UART_InitCallbacksToDefault+0x98>)
 8006f18:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a10      	ldr	r2, [pc, #64]	@ (8006f60 <UART_InitCallbacksToDefault+0x9c>)
 8006f20:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a0f      	ldr	r2, [pc, #60]	@ (8006f64 <UART_InitCallbacksToDefault+0xa0>)
 8006f28:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	08006d59 	.word	0x08006d59
 8006f3c:	08006d45 	.word	0x08006d45
 8006f40:	08006d81 	.word	0x08006d81
 8006f44:	08006d6d 	.word	0x08006d6d
 8006f48:	08006d95 	.word	0x08006d95
 8006f4c:	08006da9 	.word	0x08006da9
 8006f50:	08006dbd 	.word	0x08006dbd
 8006f54:	08006dd1 	.word	0x08006dd1
 8006f58:	08007eb5 	.word	0x08007eb5
 8006f5c:	08007ec9 	.word	0x08007ec9
 8006f60:	08007edd 	.word	0x08007edd
 8006f64:	08006de5 	.word	0x08006de5

08006f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f6c:	b08c      	sub	sp, #48	@ 0x30
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	431a      	orrs	r2, r3
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	4baa      	ldr	r3, [pc, #680]	@ (8007240 <UART_SetConfig+0x2d8>)
 8006f98:	4013      	ands	r3, r2
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	6812      	ldr	r2, [r2, #0]
 8006f9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fa0:	430b      	orrs	r3, r1
 8006fa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a9f      	ldr	r2, [pc, #636]	@ (8007244 <UART_SetConfig+0x2dc>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d004      	beq.n	8006fd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006fde:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	6812      	ldr	r2, [r2, #0]
 8006fe6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fe8:	430b      	orrs	r3, r1
 8006fea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff2:	f023 010f 	bic.w	r1, r3, #15
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a90      	ldr	r2, [pc, #576]	@ (8007248 <UART_SetConfig+0x2e0>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d125      	bne.n	8007058 <UART_SetConfig+0xf0>
 800700c:	4b8f      	ldr	r3, [pc, #572]	@ (800724c <UART_SetConfig+0x2e4>)
 800700e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	2b03      	cmp	r3, #3
 8007018:	d81a      	bhi.n	8007050 <UART_SetConfig+0xe8>
 800701a:	a201      	add	r2, pc, #4	@ (adr r2, 8007020 <UART_SetConfig+0xb8>)
 800701c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007020:	08007031 	.word	0x08007031
 8007024:	08007041 	.word	0x08007041
 8007028:	08007039 	.word	0x08007039
 800702c:	08007049 	.word	0x08007049
 8007030:	2301      	movs	r3, #1
 8007032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007036:	e116      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007038:	2302      	movs	r3, #2
 800703a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800703e:	e112      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007040:	2304      	movs	r3, #4
 8007042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007046:	e10e      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007048:	2308      	movs	r3, #8
 800704a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800704e:	e10a      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007050:	2310      	movs	r3, #16
 8007052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007056:	e106      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a7c      	ldr	r2, [pc, #496]	@ (8007250 <UART_SetConfig+0x2e8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d138      	bne.n	80070d4 <UART_SetConfig+0x16c>
 8007062:	4b7a      	ldr	r3, [pc, #488]	@ (800724c <UART_SetConfig+0x2e4>)
 8007064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007068:	f003 030c 	and.w	r3, r3, #12
 800706c:	2b0c      	cmp	r3, #12
 800706e:	d82d      	bhi.n	80070cc <UART_SetConfig+0x164>
 8007070:	a201      	add	r2, pc, #4	@ (adr r2, 8007078 <UART_SetConfig+0x110>)
 8007072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007076:	bf00      	nop
 8007078:	080070ad 	.word	0x080070ad
 800707c:	080070cd 	.word	0x080070cd
 8007080:	080070cd 	.word	0x080070cd
 8007084:	080070cd 	.word	0x080070cd
 8007088:	080070bd 	.word	0x080070bd
 800708c:	080070cd 	.word	0x080070cd
 8007090:	080070cd 	.word	0x080070cd
 8007094:	080070cd 	.word	0x080070cd
 8007098:	080070b5 	.word	0x080070b5
 800709c:	080070cd 	.word	0x080070cd
 80070a0:	080070cd 	.word	0x080070cd
 80070a4:	080070cd 	.word	0x080070cd
 80070a8:	080070c5 	.word	0x080070c5
 80070ac:	2300      	movs	r3, #0
 80070ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b2:	e0d8      	b.n	8007266 <UART_SetConfig+0x2fe>
 80070b4:	2302      	movs	r3, #2
 80070b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ba:	e0d4      	b.n	8007266 <UART_SetConfig+0x2fe>
 80070bc:	2304      	movs	r3, #4
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c2:	e0d0      	b.n	8007266 <UART_SetConfig+0x2fe>
 80070c4:	2308      	movs	r3, #8
 80070c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ca:	e0cc      	b.n	8007266 <UART_SetConfig+0x2fe>
 80070cc:	2310      	movs	r3, #16
 80070ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070d2:	e0c8      	b.n	8007266 <UART_SetConfig+0x2fe>
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a5e      	ldr	r2, [pc, #376]	@ (8007254 <UART_SetConfig+0x2ec>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d125      	bne.n	800712a <UART_SetConfig+0x1c2>
 80070de:	4b5b      	ldr	r3, [pc, #364]	@ (800724c <UART_SetConfig+0x2e4>)
 80070e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80070e8:	2b30      	cmp	r3, #48	@ 0x30
 80070ea:	d016      	beq.n	800711a <UART_SetConfig+0x1b2>
 80070ec:	2b30      	cmp	r3, #48	@ 0x30
 80070ee:	d818      	bhi.n	8007122 <UART_SetConfig+0x1ba>
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	d00a      	beq.n	800710a <UART_SetConfig+0x1a2>
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	d814      	bhi.n	8007122 <UART_SetConfig+0x1ba>
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <UART_SetConfig+0x19a>
 80070fc:	2b10      	cmp	r3, #16
 80070fe:	d008      	beq.n	8007112 <UART_SetConfig+0x1aa>
 8007100:	e00f      	b.n	8007122 <UART_SetConfig+0x1ba>
 8007102:	2300      	movs	r3, #0
 8007104:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007108:	e0ad      	b.n	8007266 <UART_SetConfig+0x2fe>
 800710a:	2302      	movs	r3, #2
 800710c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007110:	e0a9      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007112:	2304      	movs	r3, #4
 8007114:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007118:	e0a5      	b.n	8007266 <UART_SetConfig+0x2fe>
 800711a:	2308      	movs	r3, #8
 800711c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007120:	e0a1      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007122:	2310      	movs	r3, #16
 8007124:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007128:	e09d      	b.n	8007266 <UART_SetConfig+0x2fe>
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a4a      	ldr	r2, [pc, #296]	@ (8007258 <UART_SetConfig+0x2f0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d125      	bne.n	8007180 <UART_SetConfig+0x218>
 8007134:	4b45      	ldr	r3, [pc, #276]	@ (800724c <UART_SetConfig+0x2e4>)
 8007136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800713a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800713e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007140:	d016      	beq.n	8007170 <UART_SetConfig+0x208>
 8007142:	2bc0      	cmp	r3, #192	@ 0xc0
 8007144:	d818      	bhi.n	8007178 <UART_SetConfig+0x210>
 8007146:	2b80      	cmp	r3, #128	@ 0x80
 8007148:	d00a      	beq.n	8007160 <UART_SetConfig+0x1f8>
 800714a:	2b80      	cmp	r3, #128	@ 0x80
 800714c:	d814      	bhi.n	8007178 <UART_SetConfig+0x210>
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <UART_SetConfig+0x1f0>
 8007152:	2b40      	cmp	r3, #64	@ 0x40
 8007154:	d008      	beq.n	8007168 <UART_SetConfig+0x200>
 8007156:	e00f      	b.n	8007178 <UART_SetConfig+0x210>
 8007158:	2300      	movs	r3, #0
 800715a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800715e:	e082      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007160:	2302      	movs	r3, #2
 8007162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007166:	e07e      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007168:	2304      	movs	r3, #4
 800716a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800716e:	e07a      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007170:	2308      	movs	r3, #8
 8007172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007176:	e076      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007178:	2310      	movs	r3, #16
 800717a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800717e:	e072      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a35      	ldr	r2, [pc, #212]	@ (800725c <UART_SetConfig+0x2f4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d12a      	bne.n	80071e0 <UART_SetConfig+0x278>
 800718a:	4b30      	ldr	r3, [pc, #192]	@ (800724c <UART_SetConfig+0x2e4>)
 800718c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007190:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007194:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007198:	d01a      	beq.n	80071d0 <UART_SetConfig+0x268>
 800719a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800719e:	d81b      	bhi.n	80071d8 <UART_SetConfig+0x270>
 80071a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071a4:	d00c      	beq.n	80071c0 <UART_SetConfig+0x258>
 80071a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071aa:	d815      	bhi.n	80071d8 <UART_SetConfig+0x270>
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <UART_SetConfig+0x250>
 80071b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071b4:	d008      	beq.n	80071c8 <UART_SetConfig+0x260>
 80071b6:	e00f      	b.n	80071d8 <UART_SetConfig+0x270>
 80071b8:	2300      	movs	r3, #0
 80071ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071be:	e052      	b.n	8007266 <UART_SetConfig+0x2fe>
 80071c0:	2302      	movs	r3, #2
 80071c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071c6:	e04e      	b.n	8007266 <UART_SetConfig+0x2fe>
 80071c8:	2304      	movs	r3, #4
 80071ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ce:	e04a      	b.n	8007266 <UART_SetConfig+0x2fe>
 80071d0:	2308      	movs	r3, #8
 80071d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071d6:	e046      	b.n	8007266 <UART_SetConfig+0x2fe>
 80071d8:	2310      	movs	r3, #16
 80071da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071de:	e042      	b.n	8007266 <UART_SetConfig+0x2fe>
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a17      	ldr	r2, [pc, #92]	@ (8007244 <UART_SetConfig+0x2dc>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d13a      	bne.n	8007260 <UART_SetConfig+0x2f8>
 80071ea:	4b18      	ldr	r3, [pc, #96]	@ (800724c <UART_SetConfig+0x2e4>)
 80071ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80071f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071f8:	d01a      	beq.n	8007230 <UART_SetConfig+0x2c8>
 80071fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071fe:	d81b      	bhi.n	8007238 <UART_SetConfig+0x2d0>
 8007200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007204:	d00c      	beq.n	8007220 <UART_SetConfig+0x2b8>
 8007206:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800720a:	d815      	bhi.n	8007238 <UART_SetConfig+0x2d0>
 800720c:	2b00      	cmp	r3, #0
 800720e:	d003      	beq.n	8007218 <UART_SetConfig+0x2b0>
 8007210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007214:	d008      	beq.n	8007228 <UART_SetConfig+0x2c0>
 8007216:	e00f      	b.n	8007238 <UART_SetConfig+0x2d0>
 8007218:	2300      	movs	r3, #0
 800721a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800721e:	e022      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007220:	2302      	movs	r3, #2
 8007222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007226:	e01e      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007228:	2304      	movs	r3, #4
 800722a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800722e:	e01a      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007230:	2308      	movs	r3, #8
 8007232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007236:	e016      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007238:	2310      	movs	r3, #16
 800723a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800723e:	e012      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007240:	cfff69f3 	.word	0xcfff69f3
 8007244:	40008000 	.word	0x40008000
 8007248:	40013800 	.word	0x40013800
 800724c:	40021000 	.word	0x40021000
 8007250:	40004400 	.word	0x40004400
 8007254:	40004800 	.word	0x40004800
 8007258:	40004c00 	.word	0x40004c00
 800725c:	40005000 	.word	0x40005000
 8007260:	2310      	movs	r3, #16
 8007262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4aae      	ldr	r2, [pc, #696]	@ (8007524 <UART_SetConfig+0x5bc>)
 800726c:	4293      	cmp	r3, r2
 800726e:	f040 8097 	bne.w	80073a0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007272:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007276:	2b08      	cmp	r3, #8
 8007278:	d823      	bhi.n	80072c2 <UART_SetConfig+0x35a>
 800727a:	a201      	add	r2, pc, #4	@ (adr r2, 8007280 <UART_SetConfig+0x318>)
 800727c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007280:	080072a5 	.word	0x080072a5
 8007284:	080072c3 	.word	0x080072c3
 8007288:	080072ad 	.word	0x080072ad
 800728c:	080072c3 	.word	0x080072c3
 8007290:	080072b3 	.word	0x080072b3
 8007294:	080072c3 	.word	0x080072c3
 8007298:	080072c3 	.word	0x080072c3
 800729c:	080072c3 	.word	0x080072c3
 80072a0:	080072bb 	.word	0x080072bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072a4:	f7fc fa6c 	bl	8003780 <HAL_RCC_GetPCLK1Freq>
 80072a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072aa:	e010      	b.n	80072ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072ac:	4b9e      	ldr	r3, [pc, #632]	@ (8007528 <UART_SetConfig+0x5c0>)
 80072ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072b0:	e00d      	b.n	80072ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072b2:	f7fc f9f7 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 80072b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072b8:	e009      	b.n	80072ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072c0:	e005      	b.n	80072ce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 8130 	beq.w	8007536 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072da:	4a94      	ldr	r2, [pc, #592]	@ (800752c <UART_SetConfig+0x5c4>)
 80072dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80072e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	4613      	mov	r3, r2
 80072f0:	005b      	lsls	r3, r3, #1
 80072f2:	4413      	add	r3, r2
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d305      	bcc.n	8007306 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	429a      	cmp	r2, r3
 8007304:	d903      	bls.n	800730e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800730c:	e113      	b.n	8007536 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007310:	2200      	movs	r2, #0
 8007312:	60bb      	str	r3, [r7, #8]
 8007314:	60fa      	str	r2, [r7, #12]
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731a:	4a84      	ldr	r2, [pc, #528]	@ (800752c <UART_SetConfig+0x5c4>)
 800731c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007320:	b29b      	uxth	r3, r3
 8007322:	2200      	movs	r2, #0
 8007324:	603b      	str	r3, [r7, #0]
 8007326:	607a      	str	r2, [r7, #4]
 8007328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800732c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007330:	f7f8 ff72 	bl	8000218 <__aeabi_uldivmod>
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	4610      	mov	r0, r2
 800733a:	4619      	mov	r1, r3
 800733c:	f04f 0200 	mov.w	r2, #0
 8007340:	f04f 0300 	mov.w	r3, #0
 8007344:	020b      	lsls	r3, r1, #8
 8007346:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800734a:	0202      	lsls	r2, r0, #8
 800734c:	6979      	ldr	r1, [r7, #20]
 800734e:	6849      	ldr	r1, [r1, #4]
 8007350:	0849      	lsrs	r1, r1, #1
 8007352:	2000      	movs	r0, #0
 8007354:	460c      	mov	r4, r1
 8007356:	4605      	mov	r5, r0
 8007358:	eb12 0804 	adds.w	r8, r2, r4
 800735c:	eb43 0905 	adc.w	r9, r3, r5
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	469a      	mov	sl, r3
 8007368:	4693      	mov	fp, r2
 800736a:	4652      	mov	r2, sl
 800736c:	465b      	mov	r3, fp
 800736e:	4640      	mov	r0, r8
 8007370:	4649      	mov	r1, r9
 8007372:	f7f8 ff51 	bl	8000218 <__aeabi_uldivmod>
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	4613      	mov	r3, r2
 800737c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007384:	d308      	bcc.n	8007398 <UART_SetConfig+0x430>
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800738c:	d204      	bcs.n	8007398 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6a3a      	ldr	r2, [r7, #32]
 8007394:	60da      	str	r2, [r3, #12]
 8007396:	e0ce      	b.n	8007536 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800739e:	e0ca      	b.n	8007536 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073a8:	d166      	bne.n	8007478 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80073aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073ae:	2b08      	cmp	r3, #8
 80073b0:	d827      	bhi.n	8007402 <UART_SetConfig+0x49a>
 80073b2:	a201      	add	r2, pc, #4	@ (adr r2, 80073b8 <UART_SetConfig+0x450>)
 80073b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b8:	080073dd 	.word	0x080073dd
 80073bc:	080073e5 	.word	0x080073e5
 80073c0:	080073ed 	.word	0x080073ed
 80073c4:	08007403 	.word	0x08007403
 80073c8:	080073f3 	.word	0x080073f3
 80073cc:	08007403 	.word	0x08007403
 80073d0:	08007403 	.word	0x08007403
 80073d4:	08007403 	.word	0x08007403
 80073d8:	080073fb 	.word	0x080073fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073dc:	f7fc f9d0 	bl	8003780 <HAL_RCC_GetPCLK1Freq>
 80073e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073e2:	e014      	b.n	800740e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073e4:	f7fc f9e2 	bl	80037ac <HAL_RCC_GetPCLK2Freq>
 80073e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073ea:	e010      	b.n	800740e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073ec:	4b4e      	ldr	r3, [pc, #312]	@ (8007528 <UART_SetConfig+0x5c0>)
 80073ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073f0:	e00d      	b.n	800740e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073f2:	f7fc f957 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 80073f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073f8:	e009      	b.n	800740e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007400:	e005      	b.n	800740e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007402:	2300      	movs	r3, #0
 8007404:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800740c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800740e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8090 	beq.w	8007536 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800741a:	4a44      	ldr	r2, [pc, #272]	@ (800752c <UART_SetConfig+0x5c4>)
 800741c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007420:	461a      	mov	r2, r3
 8007422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007424:	fbb3 f3f2 	udiv	r3, r3, r2
 8007428:	005a      	lsls	r2, r3, #1
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	085b      	lsrs	r3, r3, #1
 8007430:	441a      	add	r2, r3
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	fbb2 f3f3 	udiv	r3, r2, r3
 800743a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	2b0f      	cmp	r3, #15
 8007440:	d916      	bls.n	8007470 <UART_SetConfig+0x508>
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007448:	d212      	bcs.n	8007470 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	b29b      	uxth	r3, r3
 800744e:	f023 030f 	bic.w	r3, r3, #15
 8007452:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	085b      	lsrs	r3, r3, #1
 8007458:	b29b      	uxth	r3, r3
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	b29a      	uxth	r2, r3
 8007460:	8bfb      	ldrh	r3, [r7, #30]
 8007462:	4313      	orrs	r3, r2
 8007464:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	8bfa      	ldrh	r2, [r7, #30]
 800746c:	60da      	str	r2, [r3, #12]
 800746e:	e062      	b.n	8007536 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007476:	e05e      	b.n	8007536 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007478:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800747c:	2b08      	cmp	r3, #8
 800747e:	d828      	bhi.n	80074d2 <UART_SetConfig+0x56a>
 8007480:	a201      	add	r2, pc, #4	@ (adr r2, 8007488 <UART_SetConfig+0x520>)
 8007482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007486:	bf00      	nop
 8007488:	080074ad 	.word	0x080074ad
 800748c:	080074b5 	.word	0x080074b5
 8007490:	080074bd 	.word	0x080074bd
 8007494:	080074d3 	.word	0x080074d3
 8007498:	080074c3 	.word	0x080074c3
 800749c:	080074d3 	.word	0x080074d3
 80074a0:	080074d3 	.word	0x080074d3
 80074a4:	080074d3 	.word	0x080074d3
 80074a8:	080074cb 	.word	0x080074cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074ac:	f7fc f968 	bl	8003780 <HAL_RCC_GetPCLK1Freq>
 80074b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074b2:	e014      	b.n	80074de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074b4:	f7fc f97a 	bl	80037ac <HAL_RCC_GetPCLK2Freq>
 80074b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074ba:	e010      	b.n	80074de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007528 <UART_SetConfig+0x5c0>)
 80074be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074c0:	e00d      	b.n	80074de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074c2:	f7fc f8ef 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 80074c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074c8:	e009      	b.n	80074de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074d0:	e005      	b.n	80074de <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80074dc:	bf00      	nop
    }

    if (pclk != 0U)
 80074de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d028      	beq.n	8007536 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e8:	4a10      	ldr	r2, [pc, #64]	@ (800752c <UART_SetConfig+0x5c4>)
 80074ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ee:	461a      	mov	r2, r3
 80074f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	085b      	lsrs	r3, r3, #1
 80074fc:	441a      	add	r2, r3
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	fbb2 f3f3 	udiv	r3, r2, r3
 8007506:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	2b0f      	cmp	r3, #15
 800750c:	d910      	bls.n	8007530 <UART_SetConfig+0x5c8>
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007514:	d20c      	bcs.n	8007530 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	b29a      	uxth	r2, r3
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	60da      	str	r2, [r3, #12]
 8007520:	e009      	b.n	8007536 <UART_SetConfig+0x5ce>
 8007522:	bf00      	nop
 8007524:	40008000 	.word	0x40008000
 8007528:	00f42400 	.word	0x00f42400
 800752c:	0800819c 	.word	0x0800819c
      }
      else
      {
        ret = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2201      	movs	r2, #1
 800753a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2201      	movs	r2, #1
 8007542:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2200      	movs	r2, #0
 800754a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2200      	movs	r2, #0
 8007550:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007552:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007556:	4618      	mov	r0, r3
 8007558:	3730      	adds	r7, #48	@ 0x30
 800755a:	46bd      	mov	sp, r7
 800755c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007560 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756c:	f003 0308 	and.w	r3, r3, #8
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00a      	beq.n	800758a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00a      	beq.n	80075ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f4:	f003 0310 	and.w	r3, r3, #16
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00a      	beq.n	8007612 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800763c:	2b00      	cmp	r3, #0
 800763e:	d01a      	beq.n	8007676 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800765a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800765e:	d10a      	bne.n	8007676 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800767a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00a      	beq.n	8007698 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	605a      	str	r2, [r3, #4]
  }
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b098      	sub	sp, #96	@ 0x60
 80076a8:	af02      	add	r7, sp, #8
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076b4:	f7fa fcf4 	bl	80020a0 <HAL_GetTick>
 80076b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0308 	and.w	r3, r3, #8
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d12f      	bne.n	8007728 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076d0:	2200      	movs	r2, #0
 80076d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f88e 	bl	80077f8 <UART_WaitOnFlagUntilTimeout>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d022      	beq.n	8007728 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ea:	e853 3f00 	ldrex	r3, [r3]
 80076ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	461a      	mov	r2, r3
 80076fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007700:	647b      	str	r3, [r7, #68]	@ 0x44
 8007702:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007704:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007706:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007708:	e841 2300 	strex	r3, r2, [r1]
 800770c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800770e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1e6      	bne.n	80076e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2220      	movs	r2, #32
 8007718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e063      	b.n	80077f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0304 	and.w	r3, r3, #4
 8007732:	2b04      	cmp	r3, #4
 8007734:	d149      	bne.n	80077ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007736:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800773e:	2200      	movs	r2, #0
 8007740:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f857 	bl	80077f8 <UART_WaitOnFlagUntilTimeout>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d03c      	beq.n	80077ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007758:	e853 3f00 	ldrex	r3, [r3]
 800775c:	623b      	str	r3, [r7, #32]
   return(result);
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007764:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800776e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007770:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007772:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007776:	e841 2300 	strex	r3, r2, [r1]
 800777a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800777c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1e6      	bne.n	8007750 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3308      	adds	r3, #8
 8007788:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	e853 3f00 	ldrex	r3, [r3]
 8007790:	60fb      	str	r3, [r7, #12]
   return(result);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f023 0301 	bic.w	r3, r3, #1
 8007798:	64bb      	str	r3, [r7, #72]	@ 0x48
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3308      	adds	r3, #8
 80077a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077a2:	61fa      	str	r2, [r7, #28]
 80077a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a6:	69b9      	ldr	r1, [r7, #24]
 80077a8:	69fa      	ldr	r2, [r7, #28]
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	617b      	str	r3, [r7, #20]
   return(result);
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e5      	bne.n	8007782 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2220      	movs	r2, #32
 80077ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e012      	b.n	80077f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3758      	adds	r7, #88	@ 0x58
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	603b      	str	r3, [r7, #0]
 8007804:	4613      	mov	r3, r2
 8007806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007808:	e04f      	b.n	80078aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007810:	d04b      	beq.n	80078aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007812:	f7fa fc45 	bl	80020a0 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	429a      	cmp	r2, r3
 8007820:	d302      	bcc.n	8007828 <UART_WaitOnFlagUntilTimeout+0x30>
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e04e      	b.n	80078ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0304 	and.w	r3, r3, #4
 8007836:	2b00      	cmp	r3, #0
 8007838:	d037      	beq.n	80078aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2b80      	cmp	r3, #128	@ 0x80
 800783e:	d034      	beq.n	80078aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2b40      	cmp	r3, #64	@ 0x40
 8007844:	d031      	beq.n	80078aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	f003 0308 	and.w	r3, r3, #8
 8007850:	2b08      	cmp	r3, #8
 8007852:	d110      	bne.n	8007876 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2208      	movs	r2, #8
 800785a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 f920 	bl	8007aa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2208      	movs	r2, #8
 8007866:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e029      	b.n	80078ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007880:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007884:	d111      	bne.n	80078aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800788e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f906 	bl	8007aa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2220      	movs	r2, #32
 800789a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e00f      	b.n	80078ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69da      	ldr	r2, [r3, #28]
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	4013      	ands	r3, r2
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	bf0c      	ite	eq
 80078ba:	2301      	moveq	r3, #1
 80078bc:	2300      	movne	r3, #0
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	461a      	mov	r2, r3
 80078c2:	79fb      	ldrb	r3, [r7, #7]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d0a0      	beq.n	800780a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
	...

080078d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b096      	sub	sp, #88	@ 0x58
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	4613      	mov	r3, r2
 80078e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	88fa      	ldrh	r2, [r7, #6]
 80078ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2222      	movs	r2, #34	@ 0x22
 80078fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007906:	2b00      	cmp	r3, #0
 8007908:	d02d      	beq.n	8007966 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007910:	4a40      	ldr	r2, [pc, #256]	@ (8007a14 <UART_Start_Receive_DMA+0x140>)
 8007912:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800791a:	4a3f      	ldr	r2, [pc, #252]	@ (8007a18 <UART_Start_Receive_DMA+0x144>)
 800791c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007924:	4a3d      	ldr	r2, [pc, #244]	@ (8007a1c <UART_Start_Receive_DMA+0x148>)
 8007926:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800792e:	2200      	movs	r2, #0
 8007930:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3324      	adds	r3, #36	@ 0x24
 800793e:	4619      	mov	r1, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007944:	461a      	mov	r2, r3
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	f7fa fd6e 	bl	8002428 <HAL_DMA_Start_IT>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d009      	beq.n	8007966 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2210      	movs	r2, #16
 8007956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2220      	movs	r2, #32
 800795e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e051      	b.n	8007a0a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d018      	beq.n	80079a0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007976:	e853 3f00 	ldrex	r3, [r3]
 800797a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800797c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007982:	657b      	str	r3, [r7, #84]	@ 0x54
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	461a      	mov	r2, r3
 800798a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800798c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800798e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007990:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007992:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007994:	e841 2300 	strex	r3, r2, [r1]
 8007998:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800799a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e6      	bne.n	800796e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3308      	adds	r3, #8
 80079a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079aa:	e853 3f00 	ldrex	r3, [r3]
 80079ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b2:	f043 0301 	orr.w	r3, r3, #1
 80079b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3308      	adds	r3, #8
 80079be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80079c0:	637a      	str	r2, [r7, #52]	@ 0x34
 80079c2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079c8:	e841 2300 	strex	r3, r2, [r1]
 80079cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80079ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1e5      	bne.n	80079a0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3308      	adds	r3, #8
 80079da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	e853 3f00 	ldrex	r3, [r3]
 80079e2:	613b      	str	r3, [r7, #16]
   return(result);
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3308      	adds	r3, #8
 80079f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80079f4:	623a      	str	r2, [r7, #32]
 80079f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	69f9      	ldr	r1, [r7, #28]
 80079fa:	6a3a      	ldr	r2, [r7, #32]
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e5      	bne.n	80079d4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3758      	adds	r7, #88	@ 0x58
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	08007c2d 	.word	0x08007c2d
 8007a18:	08007d61 	.word	0x08007d61
 8007a1c:	08007da7 	.word	0x08007da7

08007a20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b08f      	sub	sp, #60	@ 0x3c
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	461a      	mov	r2, r3
 8007a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a48:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e6      	bne.n	8007a28 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3308      	adds	r3, #8
 8007a60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007a70:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3308      	adds	r3, #8
 8007a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a7a:	61ba      	str	r2, [r7, #24]
 8007a7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6979      	ldr	r1, [r7, #20]
 8007a80:	69ba      	ldr	r2, [r7, #24]
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	613b      	str	r3, [r7, #16]
   return(result);
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e5      	bne.n	8007a5a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007a96:	bf00      	nop
 8007a98:	373c      	adds	r7, #60	@ 0x3c
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b095      	sub	sp, #84	@ 0x54
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ab2:	e853 3f00 	ldrex	r3, [r3]
 8007ab6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ac8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007aca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007acc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ace:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ad0:	e841 2300 	strex	r3, r2, [r1]
 8007ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e6      	bne.n	8007aaa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	e853 3f00 	ldrex	r3, [r3]
 8007aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007af2:	f023 0301 	bic.w	r3, r3, #1
 8007af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3308      	adds	r3, #8
 8007afe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b08:	e841 2300 	strex	r3, r2, [r1]
 8007b0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e3      	bne.n	8007adc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d118      	bne.n	8007b4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f023 0310 	bic.w	r3, r3, #16
 8007b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	461a      	mov	r2, r3
 8007b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b3a:	61bb      	str	r3, [r7, #24]
 8007b3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	6979      	ldr	r1, [r7, #20]
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	613b      	str	r3, [r7, #16]
   return(result);
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e6      	bne.n	8007b1c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007b62:	bf00      	nop
 8007b64:	3754      	adds	r7, #84	@ 0x54
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b090      	sub	sp, #64	@ 0x40
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0320 	and.w	r3, r3, #32
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d137      	bne.n	8007bfa <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3308      	adds	r3, #8
 8007b98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9c:	e853 3f00 	ldrex	r3, [r3]
 8007ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3308      	adds	r3, #8
 8007bb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bb2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bba:	e841 2300 	strex	r3, r2, [r1]
 8007bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e5      	bne.n	8007b92 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	e853 3f00 	ldrex	r3, [r3]
 8007bd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	461a      	mov	r2, r3
 8007be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007be4:	61fb      	str	r3, [r7, #28]
 8007be6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be8:	69b9      	ldr	r1, [r7, #24]
 8007bea:	69fa      	ldr	r2, [r7, #28]
 8007bec:	e841 2300 	strex	r3, r2, [r1]
 8007bf0:	617b      	str	r3, [r7, #20]
   return(result);
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1e6      	bne.n	8007bc6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bf8:	e004      	b.n	8007c04 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8007bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c00:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007c02:	4798      	blx	r3
}
 8007c04:	bf00      	nop
 8007c06:	3740      	adds	r7, #64	@ 0x40
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c18:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c24:	bf00      	nop
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b09c      	sub	sp, #112	@ 0x70
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c38:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0320 	and.w	r3, r3, #32
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d171      	bne.n	8007d2c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e6      	bne.n	8007c50 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3308      	adds	r3, #8
 8007c88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8c:	e853 3f00 	ldrex	r3, [r3]
 8007c90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c94:	f023 0301 	bic.w	r3, r3, #1
 8007c98:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007ca2:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ca4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ca8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007caa:	e841 2300 	strex	r3, r2, [r1]
 8007cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1e5      	bne.n	8007c82 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3308      	adds	r3, #8
 8007cbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	623b      	str	r3, [r7, #32]
   return(result);
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ccc:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007cd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e5      	bne.n	8007cb6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cec:	2220      	movs	r2, #32
 8007cee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d118      	bne.n	8007d2c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	e853 3f00 	ldrex	r3, [r3]
 8007d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0310 	bic.w	r3, r3, #16
 8007d0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	461a      	mov	r2, r3
 8007d16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d18:	61fb      	str	r3, [r7, #28]
 8007d1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1c:	69b9      	ldr	r1, [r7, #24]
 8007d1e:	69fa      	ldr	r2, [r7, #28]
 8007d20:	e841 2300 	strex	r3, r2, [r1]
 8007d24:	617b      	str	r3, [r7, #20]
   return(result);
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e6      	bne.n	8007cfa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d2e:	2200      	movs	r2, #0
 8007d30:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d109      	bne.n	8007d4e <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8007d3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d42:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8007d46:	4611      	mov	r1, r2
 8007d48:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007d4a:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d4c:	e004      	b.n	8007d58 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8007d4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d54:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007d56:	4798      	blx	r3
}
 8007d58:	bf00      	nop
 8007d5a:	3770      	adds	r7, #112	@ 0x70
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d6c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2201      	movs	r2, #1
 8007d72:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d10b      	bne.n	8007d94 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8007d88:	0852      	lsrs	r2, r2, #1
 8007d8a:	b292      	uxth	r2, r2
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d92:	e004      	b.n	8007d9e <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	4798      	blx	r3
}
 8007d9e:	bf00      	nop
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b086      	sub	sp, #24
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dce:	2b80      	cmp	r3, #128	@ 0x80
 8007dd0:	d109      	bne.n	8007de6 <UART_DMAError+0x40>
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	2b21      	cmp	r3, #33	@ 0x21
 8007dd6:	d106      	bne.n	8007de6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007de0:	6978      	ldr	r0, [r7, #20]
 8007de2:	f7ff fe1d 	bl	8007a20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007df0:	2b40      	cmp	r3, #64	@ 0x40
 8007df2:	d109      	bne.n	8007e08 <UART_DMAError+0x62>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b22      	cmp	r3, #34	@ 0x22
 8007df8:	d106      	bne.n	8007e08 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007e02:	6978      	ldr	r0, [r7, #20]
 8007e04:	f7ff fe4d 	bl	8007aa2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e0e:	f043 0210 	orr.w	r2, r3, #16
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e1e:	6978      	ldr	r0, [r7, #20]
 8007e20:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e22:	bf00      	nop
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e52:	bf00      	nop
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b088      	sub	sp, #32
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e76:	61fb      	str	r3, [r7, #28]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	61bb      	str	r3, [r7, #24]
 8007e82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6979      	ldr	r1, [r7, #20]
 8007e86:	69ba      	ldr	r2, [r7, #24]
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e6      	bne.n	8007e62 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eac:	bf00      	nop
 8007eae:	3720      	adds	r7, #32
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d101      	bne.n	8007f06 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f02:	2302      	movs	r3, #2
 8007f04:	e027      	b.n	8007f56 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2224      	movs	r2, #36	@ 0x24
 8007f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0201 	bic.w	r2, r2, #1
 8007f2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2220      	movs	r2, #32
 8007f48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b084      	sub	sp, #16
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f76:	2302      	movs	r3, #2
 8007f78:	e02d      	b.n	8007fd6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2224      	movs	r2, #36	@ 0x24
 8007f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0201 	bic.w	r2, r2, #1
 8007fa0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f850 	bl	800805c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d101      	bne.n	8007ff6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	e02d      	b.n	8008052 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2224      	movs	r2, #36	@ 0x24
 8008002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0201 	bic.w	r2, r2, #1
 800801c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f812 	bl	800805c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2220      	movs	r2, #32
 8008044:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
	...

0800805c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008068:	2b00      	cmp	r3, #0
 800806a:	d108      	bne.n	800807e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800807c:	e031      	b.n	80080e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800807e:	2308      	movs	r3, #8
 8008080:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008082:	2308      	movs	r3, #8
 8008084:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	0e5b      	lsrs	r3, r3, #25
 800808e:	b2db      	uxtb	r3, r3
 8008090:	f003 0307 	and.w	r3, r3, #7
 8008094:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	0f5b      	lsrs	r3, r3, #29
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	f003 0307 	and.w	r3, r3, #7
 80080a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
 80080a8:	7b3a      	ldrb	r2, [r7, #12]
 80080aa:	4911      	ldr	r1, [pc, #68]	@ (80080f0 <UARTEx_SetNbDataToProcess+0x94>)
 80080ac:	5c8a      	ldrb	r2, [r1, r2]
 80080ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080b2:	7b3a      	ldrb	r2, [r7, #12]
 80080b4:	490f      	ldr	r1, [pc, #60]	@ (80080f4 <UARTEx_SetNbDataToProcess+0x98>)
 80080b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80080bc:	b29a      	uxth	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
 80080c6:	7b7a      	ldrb	r2, [r7, #13]
 80080c8:	4909      	ldr	r1, [pc, #36]	@ (80080f0 <UARTEx_SetNbDataToProcess+0x94>)
 80080ca:	5c8a      	ldrb	r2, [r1, r2]
 80080cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080d0:	7b7a      	ldrb	r2, [r7, #13]
 80080d2:	4908      	ldr	r1, [pc, #32]	@ (80080f4 <UARTEx_SetNbDataToProcess+0x98>)
 80080d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80080da:	b29a      	uxth	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80080e2:	bf00      	nop
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	080081b4 	.word	0x080081b4
 80080f4:	080081bc 	.word	0x080081bc

080080f8 <memset>:
 80080f8:	4402      	add	r2, r0
 80080fa:	4603      	mov	r3, r0
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d100      	bne.n	8008102 <memset+0xa>
 8008100:	4770      	bx	lr
 8008102:	f803 1b01 	strb.w	r1, [r3], #1
 8008106:	e7f9      	b.n	80080fc <memset+0x4>

08008108 <__libc_init_array>:
 8008108:	b570      	push	{r4, r5, r6, lr}
 800810a:	4d0d      	ldr	r5, [pc, #52]	@ (8008140 <__libc_init_array+0x38>)
 800810c:	4c0d      	ldr	r4, [pc, #52]	@ (8008144 <__libc_init_array+0x3c>)
 800810e:	1b64      	subs	r4, r4, r5
 8008110:	10a4      	asrs	r4, r4, #2
 8008112:	2600      	movs	r6, #0
 8008114:	42a6      	cmp	r6, r4
 8008116:	d109      	bne.n	800812c <__libc_init_array+0x24>
 8008118:	4d0b      	ldr	r5, [pc, #44]	@ (8008148 <__libc_init_array+0x40>)
 800811a:	4c0c      	ldr	r4, [pc, #48]	@ (800814c <__libc_init_array+0x44>)
 800811c:	f000 f826 	bl	800816c <_init>
 8008120:	1b64      	subs	r4, r4, r5
 8008122:	10a4      	asrs	r4, r4, #2
 8008124:	2600      	movs	r6, #0
 8008126:	42a6      	cmp	r6, r4
 8008128:	d105      	bne.n	8008136 <__libc_init_array+0x2e>
 800812a:	bd70      	pop	{r4, r5, r6, pc}
 800812c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008130:	4798      	blx	r3
 8008132:	3601      	adds	r6, #1
 8008134:	e7ee      	b.n	8008114 <__libc_init_array+0xc>
 8008136:	f855 3b04 	ldr.w	r3, [r5], #4
 800813a:	4798      	blx	r3
 800813c:	3601      	adds	r6, #1
 800813e:	e7f2      	b.n	8008126 <__libc_init_array+0x1e>
 8008140:	080081cc 	.word	0x080081cc
 8008144:	080081cc 	.word	0x080081cc
 8008148:	080081cc 	.word	0x080081cc
 800814c:	080081d0 	.word	0x080081d0

08008150 <memcpy>:
 8008150:	440a      	add	r2, r1
 8008152:	4291      	cmp	r1, r2
 8008154:	f100 33ff 	add.w	r3, r0, #4294967295
 8008158:	d100      	bne.n	800815c <memcpy+0xc>
 800815a:	4770      	bx	lr
 800815c:	b510      	push	{r4, lr}
 800815e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008162:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008166:	4291      	cmp	r1, r2
 8008168:	d1f9      	bne.n	800815e <memcpy+0xe>
 800816a:	bd10      	pop	{r4, pc}

0800816c <_init>:
 800816c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816e:	bf00      	nop
 8008170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008172:	bc08      	pop	{r3}
 8008174:	469e      	mov	lr, r3
 8008176:	4770      	bx	lr

08008178 <_fini>:
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817a:	bf00      	nop
 800817c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817e:	bc08      	pop	{r3}
 8008180:	469e      	mov	lr, r3
 8008182:	4770      	bx	lr
