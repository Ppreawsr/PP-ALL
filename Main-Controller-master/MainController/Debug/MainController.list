
MainController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008db8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008f90  08008f90  00009f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fd0  08008fd0  0000a20c  2**0
                  CONTENTS
  4 .ARM          00000008  08008fd0  08008fd0  00009fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fd8  08008fd8  0000a20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fd8  08008fd8  00009fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fdc  08008fdc  00009fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08008fe0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f04  20000210  080091ec  0000a210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001114  080091ec  0000b114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b26  00000000  00000000  0000a23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bbd  00000000  00000000  00020d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00023920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e49  00000000  00000000  00024b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e96  00000000  00000000  00025989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016201  00000000  00000000  0004c81f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe8e4  00000000  00000000  00062a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161304  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e60  00000000  00000000  00161348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  001661a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000210 	.word	0x20000210
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008f78 	.word	0x08008f78

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000214 	.word	0x20000214
 8000214:	08008f78 	.word	0x08008f78

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96a 	b.w	8000d80 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	460c      	mov	r4, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	458c      	cmp	ip, r1
 8000ad4:	4686      	mov	lr, r0
 8000ad6:	fab2 f282 	clz	r2, r2
 8000ada:	d962      	bls.n	8000ba2 <__udivmoddi4+0xde>
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	4319      	orrs	r1, r3
 8000aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f f68c 	uxth.w	r6, ip
 8000afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb07 1114 	mls	r1, r7, r4, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb04 f106 	mul.w	r1, r4, r6
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b1a:	f080 8112 	bcs.w	8000d42 <__udivmoddi4+0x27e>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 810f 	bls.w	8000d42 <__udivmoddi4+0x27e>
 8000b24:	3c02      	subs	r4, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a59      	subs	r1, r3, r1
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b32:	fb07 1110 	mls	r1, r7, r0, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb00 f606 	mul.w	r6, r0, r6
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x94>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4a:	f080 80fc 	bcs.w	8000d46 <__udivmoddi4+0x282>
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	f240 80f9 	bls.w	8000d46 <__udivmoddi4+0x282>
 8000b54:	4463      	add	r3, ip
 8000b56:	3802      	subs	r0, #2
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b5e:	2100      	movs	r1, #0
 8000b60:	b11d      	cbz	r5, 8000b6a <__udivmoddi4+0xa6>
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d905      	bls.n	8000b7e <__udivmoddi4+0xba>
 8000b72:	b10d      	cbz	r5, 8000b78 <__udivmoddi4+0xb4>
 8000b74:	e9c5 0100 	strd	r0, r1, [r5]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e7f5      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000b7e:	fab3 f183 	clz	r1, r3
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d146      	bne.n	8000c14 <__udivmoddi4+0x150>
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xcc>
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	f0c0 80f0 	bcc.w	8000d70 <__udivmoddi4+0x2ac>
 8000b90:	1a86      	subs	r6, r0, r2
 8000b92:	eb64 0303 	sbc.w	r3, r4, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d0e6      	beq.n	8000b6a <__udivmoddi4+0xa6>
 8000b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba0:	e7e3      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8090 	bne.w	8000cc8 <__udivmoddi4+0x204>
 8000ba8:	eba1 040c 	sub.w	r4, r1, ip
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa1f f78c 	uxth.w	r7, ip
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb07 f006 	mul.w	r0, r7, r6
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x11c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x11a>
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000bde:	4626      	mov	r6, r4
 8000be0:	1a1c      	subs	r4, r3, r0
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bea:	fb08 4410 	mls	r4, r8, r0, r4
 8000bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf2:	fb00 f707 	mul.w	r7, r0, r7
 8000bf6:	429f      	cmp	r7, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x148>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x146>
 8000c04:	429f      	cmp	r7, r3
 8000c06:	f200 80b0 	bhi.w	8000d6a <__udivmoddi4+0x2a6>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	1bdb      	subs	r3, r3, r7
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	e7a5      	b.n	8000b60 <__udivmoddi4+0x9c>
 8000c14:	f1c1 0620 	rsb	r6, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c24:	fa04 f301 	lsl.w	r3, r4, r1
 8000c28:	ea43 030c 	orr.w	r3, r3, ip
 8000c2c:	40f4      	lsrs	r4, r6
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	0c38      	lsrs	r0, r7, #16
 8000c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c38:	fbb4 fef0 	udiv	lr, r4, r0
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fb00 441e 	mls	r4, r0, lr, r4
 8000c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c48:	fb0e f90c 	mul.w	r9, lr, ip
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x1a6>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c5a:	f080 8084 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8081 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	eba4 0409 	sub.w	r4, r4, r9
 8000c6e:	fa1f f983 	uxth.w	r9, r3
 8000c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c76:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x1d2>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8c:	d267      	bcs.n	8000d5e <__udivmoddi4+0x29a>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0x29a>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	443c      	add	r4, r7
 8000c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	d351      	bcc.n	8000d4e <__udivmoddi4+0x28a>
 8000caa:	d04e      	beq.n	8000d4a <__udivmoddi4+0x286>
 8000cac:	b155      	cbz	r5, 8000cc4 <__udivmoddi4+0x200>
 8000cae:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cba:	40cb      	lsrs	r3, r1
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e750      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	430c      	orrs	r4, r1
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf0:	0c23      	lsrs	r3, r4, #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb00 f107 	mul.w	r1, r0, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x24c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d06:	d22c      	bcs.n	8000d62 <__udivmoddi4+0x29e>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d92a      	bls.n	8000d62 <__udivmoddi4+0x29e>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d18:	fb08 3311 	mls	r3, r8, r1, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb01 f307 	mul.w	r3, r1, r7
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x276>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d30:	d213      	bcs.n	8000d5a <__udivmoddi4+0x296>
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	d911      	bls.n	8000d5a <__udivmoddi4+0x296>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1ae4      	subs	r4, r4, r3
 8000d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d40:	e739      	b.n	8000bb6 <__udivmoddi4+0xf2>
 8000d42:	4604      	mov	r4, r0
 8000d44:	e6f0      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e706      	b.n	8000b58 <__udivmoddi4+0x94>
 8000d4a:	45c8      	cmp	r8, r9
 8000d4c:	d2ae      	bcs.n	8000cac <__udivmoddi4+0x1e8>
 8000d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <__udivmoddi4+0x1e8>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e7ed      	b.n	8000d3a <__udivmoddi4+0x276>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e799      	b.n	8000c96 <__udivmoddi4+0x1d2>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e7d4      	b.n	8000d10 <__udivmoddi4+0x24c>
 8000d66:	46d6      	mov	lr, sl
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1a6>
 8000d6a:	4463      	add	r3, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e74d      	b.n	8000c0c <__udivmoddi4+0x148>
 8000d70:	4606      	mov	r6, r0
 8000d72:	4623      	mov	r3, r4
 8000d74:	4608      	mov	r0, r1
 8000d76:	e70f      	b.n	8000b98 <__udivmoddi4+0xd4>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	e730      	b.n	8000be0 <__udivmoddi4+0x11c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000d88:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <modbus_1t5_Timeout+0x3c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000d90:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <modbus_1t5_Timeout+0x3c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <modbus_1t5_Timeout+0x3c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <modbus_1t5_Timeout+0x3c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	691b      	ldr	r3, [r3, #16]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0201 	orr.w	r2, r2, #1
 8000db2:	601a      	str	r2, [r3, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	2000022c 	.word	0x2000022c

08000dc4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000dcc:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <modbus_3t5_Timeout+0x1c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	755a      	strb	r2, [r3, #21]

}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	2000022c 	.word	0x2000022c

08000de4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f006 ff2b 	bl	8007c48 <HAL_UART_GetError>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b20      	cmp	r3, #32
 8000df6:	d101      	bne.n	8000dfc <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000df8:	f7ff ffc4 	bl	8000d84 <modbus_1t5_Timeout>

	}
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000e0e:	4a25      	ldr	r2, [pc, #148]	@ (8000ea4 <Modbus_init+0xa0>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000e14:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <Modbus_init+0xa0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	4a21      	ldr	r2, [pc, #132]	@ (8000ea8 <Modbus_init+0xa4>)
 8000e22:	210e      	movs	r1, #14
 8000e24:	4618      	mov	r0, r3
 8000e26:	f005 f831 	bl	8005e8c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	2110      	movs	r1, #16
 8000e30:	4618      	mov	r0, r3
 8000e32:	f006 feb3 	bl	8007b9c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f006 feca 	bl	8007bd4 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	4a19      	ldr	r2, [pc, #100]	@ (8000eac <Modbus_init+0xa8>)
 8000e46:	2104      	movs	r1, #4
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f006 f991 	bl	8007170 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000e4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <Modbus_init+0xa0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000e54:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <Modbus_init+0xa0>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <Modbus_init+0xa0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000e60:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000e64:	4413      	add	r3, r2
 8000e66:	3302      	adds	r3, #2
 8000e68:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f006 fab9 	bl	80073e4 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000e72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <Modbus_init+0xa0>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d10c      	bne.n	8000e9c <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000e82:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <Modbus_init+0xa0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 fedd 	bl	8004c48 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000e8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <Modbus_init+0xa0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f004 fa34 	bl	8005304 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000022c 	.word	0x2000022c
 8000ea8:	08000dc5 	.word	0x08000dc5
 8000eac:	08000de5 	.word	0x08000de5

08000eb0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000ebc:	23ff      	movs	r3, #255	@ 0xff
 8000ebe:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000ec0:	23ff      	movs	r3, #255	@ 0xff
 8000ec2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000ec4:	e013      	b.n	8000eee <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	1c5a      	adds	r2, r3, #1
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	781a      	ldrb	r2, [r3, #0]
 8000ece:	7bbb      	ldrb	r3, [r7, #14]
 8000ed0:	4053      	eors	r3, r2
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f14 <CRC16+0x64>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4413      	add	r3, r2
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	4053      	eors	r3, r2
 8000ee2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8000f18 <CRC16+0x68>)
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	4413      	add	r3, r2
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000eee:	883b      	ldrh	r3, [r7, #0]
 8000ef0:	1e5a      	subs	r2, r3, #1
 8000ef2:	803a      	strh	r2, [r7, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1e6      	bne.n	8000ec6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	7bbb      	ldrb	r3, [r7, #14]
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b21b      	sxth	r3, r3
 8000f06:	b29b      	uxth	r3, r3
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	20000100 	.word	0x20000100
 8000f18:	20000000 	.word	0x20000000

08000f1c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000f22:	4b7e      	ldr	r3, [pc, #504]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	7ddb      	ldrb	r3, [r3, #23]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d80a      	bhi.n	8000f44 <Modbus_Protocal_Worker+0x28>
 8000f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f34 <Modbus_Protocal_Worker+0x18>)
 8000f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f34:	08000f4f 	.word	0x08000f4f
 8000f38:	080010e3 	.word	0x080010e3
 8000f3c:	08000fdb 	.word	0x08000fdb
 8000f40:	0800101f 	.word	0x0800101f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000f44:	4b75      	ldr	r3, [pc, #468]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	75da      	strb	r2, [r3, #23]
		break;
 8000f4c:	e0e1      	b.n	8001112 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000f4e:	4b73      	ldr	r3, [pc, #460]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d006      	beq.n	8000f68 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 8000f5a:	4b70      	ldr	r3, [pc, #448]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8000f62:	f000 f9cd 	bl	8001300 <Modbus_Emission>
 8000f66:	e018      	b.n	8000f9a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8000f68:	4b6c      	ldr	r3, [pc, #432]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8000f72:	4b6a      	ldr	r3, [pc, #424]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d00b      	beq.n	8000f9a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000f82:	4b66      	ldr	r3, [pc, #408]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000f8a:	4b64      	ldr	r3, [pc, #400]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000f92:	4b62      	ldr	r3, [pc, #392]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2203      	movs	r2, #3
 8000f98:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000f9a:	4b60      	ldr	r3, [pc, #384]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fa4:	2b20      	cmp	r3, #32
 8000fa6:	f040 80ad 	bne.w	8001104 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000faa:	4b5c      	ldr	r3, [pc, #368]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000fb4:	4b59      	ldr	r3, [pc, #356]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000fba:	4b58      	ldr	r3, [pc, #352]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4b57      	ldr	r3, [pc, #348]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000fc6:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000fca:	4413      	add	r3, r2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f006 fa06 	bl	80073e4 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8000fd8:	e094      	b.n	8001104 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000fda:	4b50      	ldr	r3, [pc, #320]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	7d1b      	ldrb	r3, [r3, #20]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 8091 	beq.w	8001108 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000fe6:	4b4d      	ldr	r3, [pc, #308]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	22fe      	movs	r2, #254	@ 0xfe
 8000fec:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000fee:	4b4b      	ldr	r3, [pc, #300]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8000ff8:	4b48      	ldr	r3, [pc, #288]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001008:	4b44      	ldr	r3, [pc, #272]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 800100a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800100c:	1a8a      	subs	r2, r1, r2
 800100e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001010:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001014:	4b41      	ldr	r3, [pc, #260]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2204      	movs	r2, #4
 800101a:	75da      	strb	r2, [r3, #23]
		}
		break;
 800101c:	e074      	b.n	8001108 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800101e:	4b3f      	ldr	r3, [pc, #252]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001026:	f113 0f02 	cmn.w	r3, #2
 800102a:	d150      	bne.n	80010ce <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800102c:	4b3b      	ldr	r3, [pc, #236]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2200      	movs	r2, #0
 8001032:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001034:	4b39      	ldr	r3, [pc, #228]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f203 2272 	addw	r2, r3, #626	@ 0x272
 800103c:	4b37      	ldr	r3, [pc, #220]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001044:	3b02      	subs	r3, #2
 8001046:	4619      	mov	r1, r3
 8001048:	4610      	mov	r0, r2
 800104a:	f7ff ff31 	bl	8000eb0 <CRC16>
 800104e:	4603      	mov	r3, r0
 8001050:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001052:	793a      	ldrb	r2, [r7, #4]
 8001054:	4b31      	ldr	r3, [pc, #196]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8001056:	6819      	ldr	r1, [r3, #0]
 8001058:	4b30      	ldr	r3, [pc, #192]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001060:	3b02      	subs	r3, #2
 8001062:	440b      	add	r3, r1
 8001064:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001068:	429a      	cmp	r2, r3
 800106a:	d10c      	bne.n	8001086 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800106c:	797a      	ldrb	r2, [r7, #5]
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8001070:	6819      	ldr	r1, [r3, #0]
 8001072:	4b2a      	ldr	r3, [pc, #168]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800107a:	3b01      	subs	r3, #1
 800107c:	440b      	add	r3, r1
 800107e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001082:	429a      	cmp	r2, r3
 8001084:	d004      	beq.n	8001090 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	22ff      	movs	r2, #255	@ 0xff
 800108c:	759a      	strb	r2, [r3, #22]
				break;
 800108e:	e040      	b.n	8001112 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001090:	4b22      	ldr	r3, [pc, #136]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001098:	4b20      	ldr	r3, [pc, #128]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d113      	bne.n	80010ca <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80010a2:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80010aa:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80010b2:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80010bc:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80010be:	461a      	mov	r2, r3
 80010c0:	f007 ff4c 	bl	8008f5c <memcpy>

			//execute command
			Modbus_frame_response();
 80010c4:	f000 f904 	bl	80012d0 <Modbus_frame_response>
 80010c8:	e001      	b.n	80010ce <Modbus_Protocal_Worker+0x1b2>
				break;
 80010ca:	bf00      	nop
					}
		break;


	}
}
 80010cc:	e021      	b.n	8001112 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	7d5b      	ldrb	r3, [r3, #21]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d019      	beq.n	800110c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80010d8:	4b10      	ldr	r3, [pc, #64]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2201      	movs	r2, #1
 80010de:	75da      	strb	r2, [r3, #23]
		break;
 80010e0:	e014      	b.n	800110c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80010e2:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ec:	2b20      	cmp	r3, #32
 80010ee:	d10f      	bne.n	8001110 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 80010fa:	4b08      	ldr	r3, [pc, #32]	@ (800111c <Modbus_Protocal_Worker+0x200>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2201      	movs	r2, #1
 8001100:	75da      	strb	r2, [r3, #23]
		break;
 8001102:	e005      	b.n	8001110 <Modbus_Protocal_Worker+0x1f4>
		break;
 8001104:	bf00      	nop
 8001106:	e004      	b.n	8001112 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001108:	bf00      	nop
 800110a:	e002      	b.n	8001112 <Modbus_Protocal_Worker+0x1f6>
		break;
 800110c:	bf00      	nop
 800110e:	e000      	b.n	8001112 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001110:	bf00      	nop
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000022c 	.word	0x2000022c

08001120 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001126:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <modbusWrite1Register+0x7c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	7e5b      	ldrb	r3, [r3, #25]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b29b      	uxth	r3, r3
 8001130:	4a1a      	ldr	r2, [pc, #104]	@ (800119c <modbusWrite1Register+0x7c>)
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	7e92      	ldrb	r2, [r2, #26]
 8001136:	4413      	add	r3, r2
 8001138:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800113a:	88fa      	ldrh	r2, [r7, #6]
 800113c:	4b17      	ldr	r3, [pc, #92]	@ (800119c <modbusWrite1Register+0x7c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	429a      	cmp	r2, r3
 8001144:	d903      	bls.n	800114e <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001146:	2002      	movs	r0, #2
 8001148:	f000 f8a0 	bl	800128c <ModbusErrorReply>
			 return;
 800114c:	e023      	b.n	8001196 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800114e:	4b13      	ldr	r3, [pc, #76]	@ (800119c <modbusWrite1Register+0x7c>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4b12      	ldr	r3, [pc, #72]	@ (800119c <modbusWrite1Register+0x7c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6859      	ldr	r1, [r3, #4]
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	440b      	add	r3, r1
 800115e:	7ed2      	ldrb	r2, [r2, #27]
 8001160:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <modbusWrite1Register+0x7c>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <modbusWrite1Register+0x7c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6859      	ldr	r1, [r3, #4]
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	440b      	add	r3, r1
 8001172:	7f12      	ldrb	r2, [r2, #28]
 8001174:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001176:	4b09      	ldr	r3, [pc, #36]	@ (800119c <modbusWrite1Register+0x7c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800117e:	4b07      	ldr	r3, [pc, #28]	@ (800119c <modbusWrite1Register+0x7c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001184:	2208      	movs	r2, #8
 8001186:	4619      	mov	r1, r3
 8001188:	f007 fee8 	bl	8008f5c <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800118c:	4b03      	ldr	r3, [pc, #12]	@ (800119c <modbusWrite1Register+0x7c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2205      	movs	r2, #5
 8001192:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	2000022c 	.word	0x2000022c

080011a0 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80011a6:	4b38      	ldr	r3, [pc, #224]	@ (8001288 <modbusRead1Register+0xe8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	7edb      	ldrb	r3, [r3, #27]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4a35      	ldr	r2, [pc, #212]	@ (8001288 <modbusRead1Register+0xe8>)
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	7f12      	ldrb	r2, [r2, #28]
 80011b6:	4413      	add	r3, r2
 80011b8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80011ba:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <modbusRead1Register+0xe8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	7e5b      	ldrb	r3, [r3, #25]
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	4a30      	ldr	r2, [pc, #192]	@ (8001288 <modbusRead1Register+0xe8>)
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	7e92      	ldrb	r2, [r2, #26]
 80011ca:	4413      	add	r3, r2
 80011cc:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <modbusRead1Register+0x3a>
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	2b7d      	cmp	r3, #125	@ 0x7d
 80011d8:	d903      	bls.n	80011e2 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80011da:	2003      	movs	r0, #3
 80011dc:	f000 f856 	bl	800128c <ModbusErrorReply>
		 return;
 80011e0:	e04e      	b.n	8001280 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80011e2:	88ba      	ldrh	r2, [r7, #4]
 80011e4:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <modbusRead1Register+0xe8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d808      	bhi.n	8001200 <modbusRead1Register+0x60>
 80011ee:	88ba      	ldrh	r2, [r7, #4]
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	4413      	add	r3, r2
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <modbusRead1Register+0xe8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d903      	bls.n	8001208 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001200:	2002      	movs	r0, #2
 8001202:	f000 f843 	bl	800128c <ModbusErrorReply>
		 return;
 8001206:	e03b      	b.n	8001280 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001208:	4b1f      	ldr	r3, [pc, #124]	@ (8001288 <modbusRead1Register+0xe8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2203      	movs	r2, #3
 800120e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <modbusRead1Register+0xe8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	0052      	lsls	r2, r2, #1
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001222:	2400      	movs	r4, #0
 8001224:	e020      	b.n	8001268 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <modbusRead1Register+0xe8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	88bb      	ldrh	r3, [r7, #4]
 800122e:	4423      	add	r3, r4
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	18d1      	adds	r1, r2, r3
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <modbusRead1Register+0xe8>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	1c63      	adds	r3, r4, #1
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	7849      	ldrb	r1, [r1, #1]
 800123e:	4413      	add	r3, r2
 8001240:	460a      	mov	r2, r1
 8001242:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <modbusRead1Register+0xe8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	88bb      	ldrh	r3, [r7, #4]
 800124e:	4423      	add	r3, r4
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	18d1      	adds	r1, r2, r3
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <modbusRead1Register+0xe8>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	0063      	lsls	r3, r4, #1
 800125a:	3303      	adds	r3, #3
 800125c:	7809      	ldrb	r1, [r1, #0]
 800125e:	4413      	add	r3, r2
 8001260:	460a      	mov	r2, r1
 8001262:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001266:	3401      	adds	r4, #1
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	429c      	cmp	r4, r3
 800126c:	dbdb      	blt.n	8001226 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	3301      	adds	r3, #1
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b04      	ldr	r3, [pc, #16]	@ (8001288 <modbusRead1Register+0xe8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	0052      	lsls	r2, r2, #1
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bd90      	pop	{r4, r7, pc}
 8001286:	bf00      	nop
 8001288:	2000022c 	.word	0x2000022c

0800128c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001296:	4b0d      	ldr	r3, [pc, #52]	@ (80012cc <ModbusErrorReply+0x40>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	7e1a      	ldrb	r2, [r3, #24]
 800129c:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <ModbusErrorReply+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80012aa:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <ModbusErrorReply+0x40>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	79fa      	ldrb	r2, [r7, #7]
 80012b0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80012b4:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <ModbusErrorReply+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2202      	movs	r2, #2
 80012ba:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	2000022c 	.word	0x2000022c

080012d0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80012d4:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <Modbus_frame_response+0x2c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	7e1b      	ldrb	r3, [r3, #24]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d004      	beq.n	80012e8 <Modbus_frame_response+0x18>
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d105      	bne.n	80012ee <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80012e2:	f7ff ff1d 	bl	8001120 <modbusWrite1Register>
		break;
 80012e6:	e006      	b.n	80012f6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80012e8:	f7ff ff5a 	bl	80011a0 <modbusRead1Register>
		break;
 80012ec:	e003      	b.n	80012f6 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80012ee:	2001      	movs	r0, #1
 80012f0:	f7ff ffcc 	bl	800128c <ModbusErrorReply>
		break;
 80012f4:	bf00      	nop

	}
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000022c 	.word	0x2000022c

08001300 <Modbus_Emission>:

void Modbus_Emission()
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001306:	4b38      	ldr	r3, [pc, #224]	@ (80013e8 <Modbus_Emission+0xe8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001310:	2b20      	cmp	r3, #32
 8001312:	d15d      	bne.n	80013d0 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001314:	4b34      	ldr	r3, [pc, #208]	@ (80013e8 <Modbus_Emission+0xe8>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b33      	ldr	r3, [pc, #204]	@ (80013e8 <Modbus_Emission+0xe8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	7812      	ldrb	r2, [r2, #0]
 800131e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001322:	4b31      	ldr	r3, [pc, #196]	@ (80013e8 <Modbus_Emission+0xe8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800132a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800132c:	4b2e      	ldr	r3, [pc, #184]	@ (80013e8 <Modbus_Emission+0xe8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001334:	4b2c      	ldr	r3, [pc, #176]	@ (80013e8 <Modbus_Emission+0xe8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 800133c:	461a      	mov	r2, r3
 800133e:	f007 fe0d 	bl	8008f5c <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001342:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <Modbus_Emission+0xe8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800134a:	461a      	mov	r2, r3
 800134c:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <Modbus_Emission+0xe8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3203      	adds	r2, #3
 8001352:	b292      	uxth	r2, r2
 8001354:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001358:	4b23      	ldr	r3, [pc, #140]	@ (80013e8 <Modbus_Emission+0xe8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001360:	4b21      	ldr	r3, [pc, #132]	@ (80013e8 <Modbus_Emission+0xe8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001368:	3b02      	subs	r3, #2
 800136a:	4619      	mov	r1, r3
 800136c:	4610      	mov	r0, r2
 800136e:	f7ff fd9f 	bl	8000eb0 <CRC16>
 8001372:	4603      	mov	r3, r0
 8001374:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001376:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <Modbus_Emission+0xe8>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <Modbus_Emission+0xe8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001382:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001384:	7939      	ldrb	r1, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	460a      	mov	r2, r1
 800138a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800138e:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <Modbus_Emission+0xe8>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <Modbus_Emission+0xe8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800139a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800139c:	7979      	ldrb	r1, [r7, #5]
 800139e:	4413      	add	r3, r2
 80013a0:	460a      	mov	r2, r1
 80013a2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <Modbus_Emission+0xe8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013b0:	2b20      	cmp	r3, #32
 80013b2:	d10d      	bne.n	80013d0 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80013b4:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <Modbus_Emission+0xe8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80013ba:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <Modbus_Emission+0xe8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80013c2:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <Modbus_Emission+0xe8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80013c6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80013ca:	461a      	mov	r2, r3
 80013cc:	f005 ff8a 	bl	80072e4 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80013d0:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <Modbus_Emission+0xe8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2200      	movs	r2, #0
 80013d6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80013d8:	4b03      	ldr	r3, [pc, #12]	@ (80013e8 <Modbus_Emission+0xe8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2200      	movs	r2, #0
 80013de:	755a      	strb	r2, [r3, #21]

}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2000022c 	.word	0x2000022c
 80013ec:	00000000 	.word	0x00000000

080013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f4:	f001 fcbf 	bl	8002d76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f8:	f000 f8b6 	bl	8001568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fc:	f000 fc54 	bl	8001ca8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001400:	f000 fc04 	bl	8001c0c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001404:	f000 fb68 	bl	8001ad8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001408:	f000 fbb2 	bl	8001b70 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800140c:	f000 f8f8 	bl	8001600 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001410:	f000 f9ca 	bl	80017a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001414:	f000 fa1c 	bl	8001850 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001418:	f000 fade 	bl	80019d8 <MX_TIM5_Init>
  MX_TIM16_Init();
 800141c:	f000 fb2c 	bl	8001a78 <MX_TIM16_Init>
  MX_TIM4_Init();
 8001420:	f000 fa8c 	bl	800193c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  ///TRAJECTORY
  PID.Kp = 10.0;
 8001424:	4b3e      	ldr	r3, [pc, #248]	@ (8001520 <main+0x130>)
 8001426:	4a3f      	ldr	r2, [pc, #252]	@ (8001524 <main+0x134>)
 8001428:	619a      	str	r2, [r3, #24]
  PID.Ki = 0.0;
 800142a:	4b3d      	ldr	r3, [pc, #244]	@ (8001520 <main+0x130>)
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.0;
 8001432:	4b3b      	ldr	r3, [pc, #236]	@ (8001520 <main+0x130>)
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	621a      	str	r2, [r3, #32]

  arm_pid_init_f32(&PID, 0);
 800143a:	2100      	movs	r1, #0
 800143c:	4838      	ldr	r0, [pc, #224]	@ (8001520 <main+0x130>)
 800143e:	f007 fd2b 	bl	8008e98 <arm_pid_init_f32>
  // @User: Setup UART 1 for communication with joy stick
  HAL_UART_Receive_DMA(&huart1, joystickPayload, 10);
 8001442:	220a      	movs	r2, #10
 8001444:	4938      	ldr	r1, [pc, #224]	@ (8001528 <main+0x138>)
 8001446:	4839      	ldr	r0, [pc, #228]	@ (800152c <main+0x13c>)
 8001448:	f005 ffcc 	bl	80073e4 <HAL_UART_Receive_DMA>

  // @User: Setup UART 2 for communication with Base system
  HAL_TIM_Base_Start_IT(&htim5); //open Timer 5 (interrupt)
 800144c:	4838      	ldr	r0, [pc, #224]	@ (8001530 <main+0x140>)
 800144e:	f003 fbfb 	bl	8004c48 <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 8001452:	4b38      	ldr	r3, [pc, #224]	@ (8001534 <main+0x144>)
 8001454:	4a38      	ldr	r2, [pc, #224]	@ (8001538 <main+0x148>)
 8001456:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8001458:	4b36      	ldr	r3, [pc, #216]	@ (8001534 <main+0x144>)
 800145a:	4a38      	ldr	r2, [pc, #224]	@ (800153c <main+0x14c>)
 800145c:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 800145e:	4b35      	ldr	r3, [pc, #212]	@ (8001534 <main+0x144>)
 8001460:	2215      	movs	r2, #21
 8001462:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8001464:	4b33      	ldr	r3, [pc, #204]	@ (8001534 <main+0x144>)
 8001466:	22c8      	movs	r2, #200	@ 0xc8
 8001468:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 800146a:	4935      	ldr	r1, [pc, #212]	@ (8001540 <main+0x150>)
 800146c:	4831      	ldr	r0, [pc, #196]	@ (8001534 <main+0x144>)
 800146e:	f7ff fcc9 	bl	8000e04 <Modbus_init>
  reed = 0;
 8001472:	4b34      	ldr	r3, [pc, #208]	@ (8001544 <main+0x154>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]

  shelfPos[0] = 1;
 8001478:	4b33      	ldr	r3, [pc, #204]	@ (8001548 <main+0x158>)
 800147a:	2201      	movs	r2, #1
 800147c:	801a      	strh	r2, [r3, #0]
  shelfPos[1] = 2;
 800147e:	4b32      	ldr	r3, [pc, #200]	@ (8001548 <main+0x158>)
 8001480:	2202      	movs	r2, #2
 8001482:	805a      	strh	r2, [r3, #2]
  shelfPos[2] = 3;
 8001484:	4b30      	ldr	r3, [pc, #192]	@ (8001548 <main+0x158>)
 8001486:	2203      	movs	r2, #3
 8001488:	809a      	strh	r2, [r3, #4]
  shelfPos[3] = 4;
 800148a:	4b2f      	ldr	r3, [pc, #188]	@ (8001548 <main+0x158>)
 800148c:	2204      	movs	r2, #4
 800148e:	80da      	strh	r2, [r3, #6]
  shelfPos[4] = 5;
 8001490:	4b2d      	ldr	r3, [pc, #180]	@ (8001548 <main+0x158>)
 8001492:	2205      	movs	r2, #5
 8001494:	811a      	strh	r2, [r3, #8]

  // @User: Setup Timer 1 for Motor drive
  HAL_TIM_Base_Start(&htim1);
 8001496:	482d      	ldr	r0, [pc, #180]	@ (800154c <main+0x15c>)
 8001498:	f003 fb66 	bl	8004b68 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800149c:	2100      	movs	r1, #0
 800149e:	482b      	ldr	r0, [pc, #172]	@ (800154c <main+0x15c>)
 80014a0:	f003 fcb8 	bl	8004e14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80014a4:	2104      	movs	r1, #4
 80014a6:	4829      	ldr	r0, [pc, #164]	@ (800154c <main+0x15c>)
 80014a8:	f003 fcb4 	bl	8004e14 <HAL_TIM_PWM_Start>

  // @User: Setup Timer 2 as encoder interface
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80014ac:	213c      	movs	r1, #60	@ 0x3c
 80014ae:	4828      	ldr	r0, [pc, #160]	@ (8001550 <main+0x160>)
 80014b0:	f004 f86a 	bl	8005588 <HAL_TIM_Encoder_Start>


  // @User: Setup Timer 3 for sending led data
  HAL_TIM_Base_Start(&htim3);
 80014b4:	4827      	ldr	r0, [pc, #156]	@ (8001554 <main+0x164>)
 80014b6:	f003 fb57 	bl	8004b68 <HAL_TIM_Base_Start>

  // TODO: Test subroutine
//  uint16_t result = retractX();
//  uint16_t result = extendX();
  HAL_TIM_Base_Start_IT(&htim4);
 80014ba:	4827      	ldr	r0, [pc, #156]	@ (8001558 <main+0x168>)
 80014bc:	f003 fbc4 	bl	8004c48 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if ( St == 1)
 80014c0:	4b26      	ldr	r3, [pc, #152]	@ (800155c <main+0x16c>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d10d      	bne.n	80014e4 <main+0xf4>
	  {
		  if (qeirawread <= (8192*5))
 80014c8:	4b25      	ldr	r3, [pc, #148]	@ (8001560 <main+0x170>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80014d0:	d808      	bhi.n	80014e4 <main+0xf4>
		  	  {
		  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65535);
 80014d2:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <main+0x15c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014da:	635a      	str	r2, [r3, #52]	@ 0x34
		  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <main+0x15c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2200      	movs	r2, #0
 80014e2:	639a      	str	r2, [r3, #56]	@ 0x38
//	  }



	  // TODO: Test encoder QEI, remove later
	  qeiRaw = (__HAL_TIM_GET_COUNTER(&htim2))*(60.19/8192);
 80014e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <main+0x160>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7fe ffd6 	bl	800049c <__aeabi_ui2d>
 80014f0:	a309      	add	r3, pc, #36	@ (adr r3, 8001518 <main+0x128>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f84b 	bl	8000590 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f7ff fa77 	bl	80009f4 <__aeabi_d2f>
 8001506:	4603      	mov	r3, r0
 8001508:	4a16      	ldr	r2, [pc, #88]	@ (8001564 <main+0x174>)
 800150a:	6013      	str	r3, [r2, #0]
	  BaseAction();
 800150c:	f000 fc8c 	bl	8001e28 <BaseAction>
	  Modbus_Protocal_Worker();
 8001510:	f7ff fd04 	bl	8000f1c <Modbus_Protocal_Worker>
	  if ( St == 1)
 8001514:	e7d4      	b.n	80014c0 <main+0xd0>
 8001516:	bf00      	nop
 8001518:	eb851eb8 	.word	0xeb851eb8
 800151c:	3f7e1851 	.word	0x3f7e1851
 8001520:	200010d0 	.word	0x200010d0
 8001524:	41200000 	.word	0x41200000
 8001528:	20000a10 	.word	0x20000a10
 800152c:	20000758 	.word	0x20000758
 8001530:	20000560 	.word	0x20000560
 8001534:	20000a24 	.word	0x20000a24
 8001538:	20000824 	.word	0x20000824
 800153c:	2000062c 	.word	0x2000062c
 8001540:	20000f10 	.word	0x20000f10
 8001544:	20000f02 	.word	0x20000f02
 8001548:	200010a0 	.word	0x200010a0
 800154c:	20000230 	.word	0x20000230
 8001550:	200002fc 	.word	0x200002fc
 8001554:	200003c8 	.word	0x200003c8
 8001558:	20000494 	.word	0x20000494
 800155c:	200010ce 	.word	0x200010ce
 8001560:	200010f4 	.word	0x200010f4
 8001564:	20000a1c 	.word	0x20000a1c

08001568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b094      	sub	sp, #80	@ 0x50
 800156c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156e:	f107 0318 	add.w	r3, r7, #24
 8001572:	2238      	movs	r2, #56	@ 0x38
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f007 fcc4 	bl	8008f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800158a:	2000      	movs	r0, #0
 800158c:	f002 fa58 	bl	8003a40 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001594:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800159a:	2340      	movs	r3, #64	@ 0x40
 800159c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159e:	2302      	movs	r3, #2
 80015a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a2:	2302      	movs	r3, #2
 80015a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80015a6:	2304      	movs	r3, #4
 80015a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80015aa:	2355      	movs	r3, #85	@ 0x55
 80015ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ae:	2302      	movs	r3, #2
 80015b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ba:	f107 0318 	add.w	r3, r7, #24
 80015be:	4618      	mov	r0, r3
 80015c0:	f002 faf2 	bl	8003ba8 <HAL_RCC_OscConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015ca:	f001 f82f 	bl	800262c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ce:	230f      	movs	r3, #15
 80015d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d2:	2303      	movs	r3, #3
 80015d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2104      	movs	r1, #4
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 fdf0 	bl	80041cc <HAL_RCC_ClockConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80015f2:	f001 f81b 	bl	800262c <Error_Handler>
  }
}
 80015f6:	bf00      	nop
 80015f8:	3750      	adds	r7, #80	@ 0x50
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b09e      	sub	sp, #120	@ 0x78
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001606:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001614:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001620:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800162c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
 800163c:	615a      	str	r2, [r3, #20]
 800163e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001640:	463b      	mov	r3, r7
 8001642:	2234      	movs	r2, #52	@ 0x34
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f007 fc5c 	bl	8008f04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800164c:	4b54      	ldr	r3, [pc, #336]	@ (80017a0 <MX_TIM1_Init+0x1a0>)
 800164e:	4a55      	ldr	r2, [pc, #340]	@ (80017a4 <MX_TIM1_Init+0x1a4>)
 8001650:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001652:	4b53      	ldr	r3, [pc, #332]	@ (80017a0 <MX_TIM1_Init+0x1a0>)
 8001654:	2201      	movs	r2, #1
 8001656:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	4b51      	ldr	r3, [pc, #324]	@ (80017a0 <MX_TIM1_Init+0x1a0>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800165e:	4b50      	ldr	r3, [pc, #320]	@ (80017a0 <MX_TIM1_Init+0x1a0>)
 8001660:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001664:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001666:	4b4e      	ldr	r3, [pc, #312]	@ (80017a0 <MX_TIM1_Init+0x1a0>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800166c:	4b4c      	ldr	r3, [pc, #304]	@ (80017a0 <MX_TIM1_Init+0x1a0>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001672:	4b4b      	ldr	r3, [pc, #300]	@ (80017a0 <MX_TIM1_Init+0x1a0>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001678:	4849      	ldr	r0, [pc, #292]	@ (80017a0 <MX_TIM1_Init+0x1a0>)
 800167a:	f003 fa11 	bl	8004aa0 <HAL_TIM_Base_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001684:	f000 ffd2 	bl	800262c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800168c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800168e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001692:	4619      	mov	r1, r3
 8001694:	4842      	ldr	r0, [pc, #264]	@ (80017a0 <MX_TIM1_Init+0x1a0>)
 8001696:	f004 fa93 	bl	8005bc0 <HAL_TIM_ConfigClockSource>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80016a0:	f000 ffc4 	bl	800262c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016a4:	483e      	ldr	r0, [pc, #248]	@ (80017a0 <MX_TIM1_Init+0x1a0>)
 80016a6:	f003 fb47 	bl	8004d38 <HAL_TIM_PWM_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80016b0:	f000 ffbc 	bl	800262c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b4:	2300      	movs	r3, #0
 80016b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016c0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80016c4:	4619      	mov	r1, r3
 80016c6:	4836      	ldr	r0, [pc, #216]	@ (80017a0 <MX_TIM1_Init+0x1a0>)
 80016c8:	f005 fa56 	bl	8006b78 <HAL_TIMEx_MasterConfigSynchronization>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80016d2:	f000 ffab 	bl	800262c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80016d6:	2301      	movs	r3, #1
 80016d8:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80016da:	2301      	movs	r3, #1
 80016dc:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 80016de:	2301      	movs	r3, #1
 80016e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80016e2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80016e6:	461a      	mov	r2, r3
 80016e8:	2101      	movs	r1, #1
 80016ea:	482d      	ldr	r0, [pc, #180]	@ (80017a0 <MX_TIM1_Init+0x1a0>)
 80016ec:	f005 fb6e 	bl	8006dcc <HAL_TIMEx_ConfigBreakInput>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80016f6:	f000 ff99 	bl	800262c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016fa:	2360      	movs	r3, #96	@ 0x60
 80016fc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001702:	2300      	movs	r3, #0
 8001704:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001706:	2300      	movs	r3, #0
 8001708:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001716:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800171a:	2200      	movs	r2, #0
 800171c:	4619      	mov	r1, r3
 800171e:	4820      	ldr	r0, [pc, #128]	@ (80017a0 <MX_TIM1_Init+0x1a0>)
 8001720:	f004 f93a 	bl	8005998 <HAL_TIM_PWM_ConfigChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800172a:	f000 ff7f 	bl	800262c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800172e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001732:	2204      	movs	r2, #4
 8001734:	4619      	mov	r1, r3
 8001736:	481a      	ldr	r0, [pc, #104]	@ (80017a0 <MX_TIM1_Init+0x1a0>)
 8001738:	f004 f92e 	bl	8005998 <HAL_TIM_PWM_ConfigChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001742:	f000 ff73 	bl	800262c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001756:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800175a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800176c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001776:	2300      	movs	r3, #0
 8001778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800177e:	463b      	mov	r3, r7
 8001780:	4619      	mov	r1, r3
 8001782:	4807      	ldr	r0, [pc, #28]	@ (80017a0 <MX_TIM1_Init+0x1a0>)
 8001784:	f005 fa8e 	bl	8006ca4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 800178e:	f000 ff4d 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001792:	4803      	ldr	r0, [pc, #12]	@ (80017a0 <MX_TIM1_Init+0x1a0>)
 8001794:	f001 f896 	bl	80028c4 <HAL_TIM_MspPostInit>

}
 8001798:	bf00      	nop
 800179a:	3778      	adds	r7, #120	@ 0x78
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000230 	.word	0x20000230
 80017a4:	40012c00 	.word	0x40012c00

080017a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08c      	sub	sp, #48	@ 0x30
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	2224      	movs	r2, #36	@ 0x24
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f007 fba4 	bl	8008f04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017bc:	463b      	mov	r3, r7
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017c6:	4b21      	ldr	r3, [pc, #132]	@ (800184c <MX_TIM2_Init+0xa4>)
 80017c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017ce:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <MX_TIM2_Init+0xa4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	4b1d      	ldr	r3, [pc, #116]	@ (800184c <MX_TIM2_Init+0xa4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017da:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <MX_TIM2_Init+0xa4>)
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	@ (800184c <MX_TIM2_Init+0xa4>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e8:	4b18      	ldr	r3, [pc, #96]	@ (800184c <MX_TIM2_Init+0xa4>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017ee:	2303      	movs	r3, #3
 80017f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017f6:	2301      	movs	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001806:	2301      	movs	r3, #1
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800180a:	2300      	movs	r3, #0
 800180c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	4619      	mov	r1, r3
 8001818:	480c      	ldr	r0, [pc, #48]	@ (800184c <MX_TIM2_Init+0xa4>)
 800181a:	f003 fe01 	bl	8005420 <HAL_TIM_Encoder_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001824:	f000 ff02 	bl	800262c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001830:	463b      	mov	r3, r7
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	@ (800184c <MX_TIM2_Init+0xa4>)
 8001836:	f005 f99f 	bl	8006b78 <HAL_TIMEx_MasterConfigSynchronization>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001840:	f000 fef4 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	3730      	adds	r7, #48	@ 0x30
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200002fc 	.word	0x200002fc

08001850 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08e      	sub	sp, #56	@ 0x38
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001856:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001870:	463b      	mov	r3, r7
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]
 800187e:	615a      	str	r2, [r3, #20]
 8001880:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001882:	4b2c      	ldr	r3, [pc, #176]	@ (8001934 <MX_TIM3_Init+0xe4>)
 8001884:	4a2c      	ldr	r2, [pc, #176]	@ (8001938 <MX_TIM3_Init+0xe8>)
 8001886:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001888:	4b2a      	ldr	r3, [pc, #168]	@ (8001934 <MX_TIM3_Init+0xe4>)
 800188a:	2201      	movs	r2, #1
 800188c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b29      	ldr	r3, [pc, #164]	@ (8001934 <MX_TIM3_Init+0xe4>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 106;
 8001894:	4b27      	ldr	r3, [pc, #156]	@ (8001934 <MX_TIM3_Init+0xe4>)
 8001896:	226a      	movs	r2, #106	@ 0x6a
 8001898:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189a:	4b26      	ldr	r3, [pc, #152]	@ (8001934 <MX_TIM3_Init+0xe4>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a0:	4b24      	ldr	r3, [pc, #144]	@ (8001934 <MX_TIM3_Init+0xe4>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018a6:	4823      	ldr	r0, [pc, #140]	@ (8001934 <MX_TIM3_Init+0xe4>)
 80018a8:	f003 f8fa 	bl	8004aa0 <HAL_TIM_Base_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80018b2:	f000 febb 	bl	800262c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018c0:	4619      	mov	r1, r3
 80018c2:	481c      	ldr	r0, [pc, #112]	@ (8001934 <MX_TIM3_Init+0xe4>)
 80018c4:	f004 f97c 	bl	8005bc0 <HAL_TIM_ConfigClockSource>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80018ce:	f000 fead 	bl	800262c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018d2:	4818      	ldr	r0, [pc, #96]	@ (8001934 <MX_TIM3_Init+0xe4>)
 80018d4:	f003 fa30 	bl	8004d38 <HAL_TIM_PWM_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80018de:	f000 fea5 	bl	800262c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	4619      	mov	r1, r3
 80018f0:	4810      	ldr	r0, [pc, #64]	@ (8001934 <MX_TIM3_Init+0xe4>)
 80018f2:	f005 f941 	bl	8006b78 <HAL_TIMEx_MasterConfigSynchronization>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80018fc:	f000 fe96 	bl	800262c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001900:	2360      	movs	r3, #96	@ 0x60
 8001902:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001910:	463b      	mov	r3, r7
 8001912:	2204      	movs	r2, #4
 8001914:	4619      	mov	r1, r3
 8001916:	4807      	ldr	r0, [pc, #28]	@ (8001934 <MX_TIM3_Init+0xe4>)
 8001918:	f004 f83e 	bl	8005998 <HAL_TIM_PWM_ConfigChannel>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001922:	f000 fe83 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001926:	4803      	ldr	r0, [pc, #12]	@ (8001934 <MX_TIM3_Init+0xe4>)
 8001928:	f000 ffcc 	bl	80028c4 <HAL_TIM_MspPostInit>

}
 800192c:	bf00      	nop
 800192e:	3738      	adds	r7, #56	@ 0x38
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200003c8 	.word	0x200003c8
 8001938:	40000400 	.word	0x40000400

0800193c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001942:	f107 0310 	add.w	r3, r7, #16
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800195a:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <MX_TIM4_Init+0x94>)
 800195c:	4a1d      	ldr	r2, [pc, #116]	@ (80019d4 <MX_TIM4_Init+0x98>)
 800195e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001960:	4b1b      	ldr	r3, [pc, #108]	@ (80019d0 <MX_TIM4_Init+0x94>)
 8001962:	22a9      	movs	r2, #169	@ 0xa9
 8001964:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001966:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <MX_TIM4_Init+0x94>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800196c:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <MX_TIM4_Init+0x94>)
 800196e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001972:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001974:	4b16      	ldr	r3, [pc, #88]	@ (80019d0 <MX_TIM4_Init+0x94>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197a:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <MX_TIM4_Init+0x94>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001980:	4813      	ldr	r0, [pc, #76]	@ (80019d0 <MX_TIM4_Init+0x94>)
 8001982:	f003 f88d 	bl	8004aa0 <HAL_TIM_Base_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800198c:	f000 fe4e 	bl	800262c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001994:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001996:	f107 0310 	add.w	r3, r7, #16
 800199a:	4619      	mov	r1, r3
 800199c:	480c      	ldr	r0, [pc, #48]	@ (80019d0 <MX_TIM4_Init+0x94>)
 800199e:	f004 f90f 	bl	8005bc0 <HAL_TIM_ConfigClockSource>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80019a8:	f000 fe40 	bl	800262c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	@ (80019d0 <MX_TIM4_Init+0x94>)
 80019ba:	f005 f8dd 	bl	8006b78 <HAL_TIMEx_MasterConfigSynchronization>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80019c4:	f000 fe32 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000494 	.word	0x20000494
 80019d4:	40000800 	.word	0x40000800

080019d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019de:	f107 0310 	add.w	r3, r7, #16
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a70 <MX_TIM5_Init+0x98>)
 80019f8:	4a1e      	ldr	r2, [pc, #120]	@ (8001a74 <MX_TIM5_Init+0x9c>)
 80019fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16999;
 80019fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a70 <MX_TIM5_Init+0x98>)
 80019fe:	f244 2267 	movw	r2, #16999	@ 0x4267
 8001a02:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a04:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <MX_TIM5_Init+0x98>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8001a0a:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <MX_TIM5_Init+0x98>)
 8001a0c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001a10:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a12:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <MX_TIM5_Init+0x98>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a18:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <MX_TIM5_Init+0x98>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a1e:	4814      	ldr	r0, [pc, #80]	@ (8001a70 <MX_TIM5_Init+0x98>)
 8001a20:	f003 f83e 	bl	8004aa0 <HAL_TIM_Base_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001a2a:	f000 fdff 	bl	800262c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480d      	ldr	r0, [pc, #52]	@ (8001a70 <MX_TIM5_Init+0x98>)
 8001a3c:	f004 f8c0 	bl	8005bc0 <HAL_TIM_ConfigClockSource>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001a46:	f000 fdf1 	bl	800262c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	4619      	mov	r1, r3
 8001a56:	4806      	ldr	r0, [pc, #24]	@ (8001a70 <MX_TIM5_Init+0x98>)
 8001a58:	f005 f88e 	bl	8006b78 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001a62:	f000 fde3 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	3720      	adds	r7, #32
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000560 	.word	0x20000560
 8001a74:	40000c00 	.word	0x40000c00

08001a78 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001a7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <MX_TIM16_Init+0x58>)
 8001a7e:	4a15      	ldr	r2, [pc, #84]	@ (8001ad4 <MX_TIM16_Init+0x5c>)
 8001a80:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001a82:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <MX_TIM16_Init+0x58>)
 8001a84:	22a9      	movs	r2, #169	@ 0xa9
 8001a86:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <MX_TIM16_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <MX_TIM16_Init+0x58>)
 8001a90:	f240 4279 	movw	r2, #1145	@ 0x479
 8001a94:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <MX_TIM16_Init+0x58>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <MX_TIM16_Init+0x58>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <MX_TIM16_Init+0x58>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001aa8:	4809      	ldr	r0, [pc, #36]	@ (8001ad0 <MX_TIM16_Init+0x58>)
 8001aaa:	f002 fff9 	bl	8004aa0 <HAL_TIM_Base_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001ab4:	f000 fdba 	bl	800262c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001ab8:	2108      	movs	r1, #8
 8001aba:	4805      	ldr	r0, [pc, #20]	@ (8001ad0 <MX_TIM16_Init+0x58>)
 8001abc:	f003 fbba 	bl	8005234 <HAL_TIM_OnePulse_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001ac6:	f000 fdb1 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000062c 	.word	0x2000062c
 8001ad4:	40014400 	.word	0x40014400

08001ad8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001adc:	4b22      	ldr	r3, [pc, #136]	@ (8001b68 <MX_USART1_UART_Init+0x90>)
 8001ade:	4a23      	ldr	r2, [pc, #140]	@ (8001b6c <MX_USART1_UART_Init+0x94>)
 8001ae0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ae2:	4b21      	ldr	r3, [pc, #132]	@ (8001b68 <MX_USART1_UART_Init+0x90>)
 8001ae4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ae8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aea:	4b1f      	ldr	r3, [pc, #124]	@ (8001b68 <MX_USART1_UART_Init+0x90>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001af0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <MX_USART1_UART_Init+0x90>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001af6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b68 <MX_USART1_UART_Init+0x90>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001afc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b68 <MX_USART1_UART_Init+0x90>)
 8001afe:	220c      	movs	r2, #12
 8001b00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b02:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <MX_USART1_UART_Init+0x90>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b08:	4b17      	ldr	r3, [pc, #92]	@ (8001b68 <MX_USART1_UART_Init+0x90>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b0e:	4b16      	ldr	r3, [pc, #88]	@ (8001b68 <MX_USART1_UART_Init+0x90>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b14:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <MX_USART1_UART_Init+0x90>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b1a:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <MX_USART1_UART_Init+0x90>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b20:	4811      	ldr	r0, [pc, #68]	@ (8001b68 <MX_USART1_UART_Init+0x90>)
 8001b22:	f005 fac5 	bl	80070b0 <HAL_UART_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b2c:	f000 fd7e 	bl	800262c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b30:	2100      	movs	r1, #0
 8001b32:	480d      	ldr	r0, [pc, #52]	@ (8001b68 <MX_USART1_UART_Init+0x90>)
 8001b34:	f007 f8e5 	bl	8008d02 <HAL_UARTEx_SetTxFifoThreshold>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b3e:	f000 fd75 	bl	800262c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b42:	2100      	movs	r1, #0
 8001b44:	4808      	ldr	r0, [pc, #32]	@ (8001b68 <MX_USART1_UART_Init+0x90>)
 8001b46:	f007 f91a 	bl	8008d7e <HAL_UARTEx_SetRxFifoThreshold>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b50:	f000 fd6c 	bl	800262c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b54:	4804      	ldr	r0, [pc, #16]	@ (8001b68 <MX_USART1_UART_Init+0x90>)
 8001b56:	f007 f89b 	bl	8008c90 <HAL_UARTEx_DisableFifoMode>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b60:	f000 fd64 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000758 	.word	0x20000758
 8001b6c:	40013800 	.word	0x40013800

08001b70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b74:	4b23      	ldr	r3, [pc, #140]	@ (8001c04 <MX_USART2_UART_Init+0x94>)
 8001b76:	4a24      	ldr	r2, [pc, #144]	@ (8001c08 <MX_USART2_UART_Init+0x98>)
 8001b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001b7a:	4b22      	ldr	r3, [pc, #136]	@ (8001c04 <MX_USART2_UART_Init+0x94>)
 8001b7c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001b82:	4b20      	ldr	r3, [pc, #128]	@ (8001c04 <MX_USART2_UART_Init+0x94>)
 8001b84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b88:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c04 <MX_USART2_UART_Init+0x94>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	@ (8001c04 <MX_USART2_UART_Init+0x94>)
 8001b92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <MX_USART2_UART_Init+0x94>)
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9e:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <MX_USART2_UART_Init+0x94>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba4:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <MX_USART2_UART_Init+0x94>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001baa:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <MX_USART2_UART_Init+0x94>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <MX_USART2_UART_Init+0x94>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <MX_USART2_UART_Init+0x94>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bbc:	4811      	ldr	r0, [pc, #68]	@ (8001c04 <MX_USART2_UART_Init+0x94>)
 8001bbe:	f005 fa77 	bl	80070b0 <HAL_UART_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001bc8:	f000 fd30 	bl	800262c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bcc:	2100      	movs	r1, #0
 8001bce:	480d      	ldr	r0, [pc, #52]	@ (8001c04 <MX_USART2_UART_Init+0x94>)
 8001bd0:	f007 f897 	bl	8008d02 <HAL_UARTEx_SetTxFifoThreshold>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001bda:	f000 fd27 	bl	800262c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bde:	2100      	movs	r1, #0
 8001be0:	4808      	ldr	r0, [pc, #32]	@ (8001c04 <MX_USART2_UART_Init+0x94>)
 8001be2:	f007 f8cc 	bl	8008d7e <HAL_UARTEx_SetRxFifoThreshold>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001bec:	f000 fd1e 	bl	800262c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001bf0:	4804      	ldr	r0, [pc, #16]	@ (8001c04 <MX_USART2_UART_Init+0x94>)
 8001bf2:	f007 f84d 	bl	8008c90 <HAL_UARTEx_DisableFifoMode>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001bfc:	f000 fd16 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000824 	.word	0x20000824
 8001c08:	40004400 	.word	0x40004400

08001c0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c12:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <MX_DMA_Init+0x98>)
 8001c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c16:	4a23      	ldr	r2, [pc, #140]	@ (8001ca4 <MX_DMA_Init+0x98>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <MX_DMA_Init+0x98>)
 8001c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <MX_DMA_Init+0x98>)
 8001c2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca4 <MX_DMA_Init+0x98>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c36:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca4 <MX_DMA_Init+0x98>)
 8001c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c42:	4b18      	ldr	r3, [pc, #96]	@ (8001ca4 <MX_DMA_Init+0x98>)
 8001c44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c46:	4a17      	ldr	r2, [pc, #92]	@ (8001ca4 <MX_DMA_Init+0x98>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <MX_DMA_Init+0x98>)
 8001c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	200b      	movs	r0, #11
 8001c60:	f001 f9d5 	bl	800300e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c64:	200b      	movs	r0, #11
 8001c66:	f001 f9ec 	bl	8003042 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	200c      	movs	r0, #12
 8001c70:	f001 f9cd 	bl	800300e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c74:	200c      	movs	r0, #12
 8001c76:	f001 f9e4 	bl	8003042 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	200d      	movs	r0, #13
 8001c80:	f001 f9c5 	bl	800300e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c84:	200d      	movs	r0, #13
 8001c86:	f001 f9dc 	bl	8003042 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2039      	movs	r0, #57	@ 0x39
 8001c90:	f001 f9bd 	bl	800300e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001c94:	2039      	movs	r0, #57	@ 0x39
 8001c96:	f001 f9d4 	bl	8003042 <HAL_NVIC_EnableIRQ>

}
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	@ 0x28
 8001cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbe:	4b57      	ldr	r3, [pc, #348]	@ (8001e1c <MX_GPIO_Init+0x174>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc2:	4a56      	ldr	r2, [pc, #344]	@ (8001e1c <MX_GPIO_Init+0x174>)
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cca:	4b54      	ldr	r3, [pc, #336]	@ (8001e1c <MX_GPIO_Init+0x174>)
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cd6:	4b51      	ldr	r3, [pc, #324]	@ (8001e1c <MX_GPIO_Init+0x174>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cda:	4a50      	ldr	r2, [pc, #320]	@ (8001e1c <MX_GPIO_Init+0x174>)
 8001cdc:	f043 0320 	orr.w	r3, r3, #32
 8001ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce2:	4b4e      	ldr	r3, [pc, #312]	@ (8001e1c <MX_GPIO_Init+0x174>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce6:	f003 0320 	and.w	r3, r3, #32
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	4b4b      	ldr	r3, [pc, #300]	@ (8001e1c <MX_GPIO_Init+0x174>)
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf2:	4a4a      	ldr	r2, [pc, #296]	@ (8001e1c <MX_GPIO_Init+0x174>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cfa:	4b48      	ldr	r3, [pc, #288]	@ (8001e1c <MX_GPIO_Init+0x174>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	4b45      	ldr	r3, [pc, #276]	@ (8001e1c <MX_GPIO_Init+0x174>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0a:	4a44      	ldr	r2, [pc, #272]	@ (8001e1c <MX_GPIO_Init+0x174>)
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d12:	4b42      	ldr	r3, [pc, #264]	@ (8001e1c <MX_GPIO_Init+0x174>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f240 4111 	movw	r1, #1041	@ 0x411
 8001d24:	483e      	ldr	r0, [pc, #248]	@ (8001e20 <MX_GPIO_Init+0x178>)
 8001d26:	f001 fe5b 	bl	80039e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2180      	movs	r1, #128	@ 0x80
 8001d2e:	483d      	ldr	r0, [pc, #244]	@ (8001e24 <MX_GPIO_Init+0x17c>)
 8001d30:	f001 fe56 	bl	80039e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4836      	ldr	r0, [pc, #216]	@ (8001e24 <MX_GPIO_Init+0x17c>)
 8001d4c:	f001 fcc6 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d50:	2380      	movs	r3, #128	@ 0x80
 8001d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d66:	f001 fcb9 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4;
 8001d6a:	f240 4311 	movw	r3, #1041	@ 0x411
 8001d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4619      	mov	r1, r3
 8001d82:	4827      	ldr	r0, [pc, #156]	@ (8001e20 <MX_GPIO_Init+0x178>)
 8001d84:	f001 fcaa 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d88:	2380      	movs	r3, #128	@ 0x80
 8001d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4821      	ldr	r0, [pc, #132]	@ (8001e24 <MX_GPIO_Init+0x17c>)
 8001da0:	f001 fc9c 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001da4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001daa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001db0:	2301      	movs	r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dbe:	f001 fc8d 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001dc2:	2320      	movs	r3, #32
 8001dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dc6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4812      	ldr	r0, [pc, #72]	@ (8001e20 <MX_GPIO_Init+0x178>)
 8001dd8:	f001 fc80 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ddc:	2340      	movs	r3, #64	@ 0x40
 8001dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001de4:	2301      	movs	r3, #1
 8001de6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	4619      	mov	r1, r3
 8001dee:	480c      	ldr	r0, [pc, #48]	@ (8001e20 <MX_GPIO_Init+0x178>)
 8001df0:	f001 fc74 	bl	80036dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2100      	movs	r1, #0
 8001df8:	2017      	movs	r0, #23
 8001dfa:	f001 f908 	bl	800300e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001dfe:	2017      	movs	r0, #23
 8001e00:	f001 f91f 	bl	8003042 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2100      	movs	r1, #0
 8001e08:	2028      	movs	r0, #40	@ 0x28
 8001e0a:	f001 f900 	bl	800300e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e0e:	2028      	movs	r0, #40	@ 0x28
 8001e10:	f001 f917 	bl	8003042 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e14:	bf00      	nop
 8001e16:	3728      	adds	r7, #40	@ 0x28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	48000400 	.word	0x48000400
 8001e24:	48000800 	.word	0x48000800

08001e28 <BaseAction>:
	HAL_TIM_Base_Start_IT(&htim4);

	Mode = 0;

  }
void BaseAction(void){
 8001e28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e2c:	af00      	add	r7, sp, #0
	static uint16_t timestamp1 = 0;
	static uint16_t timestamp2 = 0;
	static uint16_t timestamp3 = 0;
	static uint16_t timestamp4 = 0;
	// Vacuum & Gripper
	  vacuum = registerFrame[0x02].U16;
 8001e2e:	4b90      	ldr	r3, [pc, #576]	@ (8002070 <BaseAction+0x248>)
 8001e30:	889b      	ldrh	r3, [r3, #4]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	4b8f      	ldr	r3, [pc, #572]	@ (8002074 <BaseAction+0x24c>)
 8001e36:	701a      	strb	r2, [r3, #0]
	  gripper = registerFrame[0x03].U16;	  //1 forward 0 backward
 8001e38:	4b8d      	ldr	r3, [pc, #564]	@ (8002070 <BaseAction+0x248>)
 8001e3a:	88db      	ldrh	r3, [r3, #6]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b8e      	ldr	r3, [pc, #568]	@ (8002078 <BaseAction+0x250>)
 8001e40:	701a      	strb	r2, [r3, #0]

	  reed = rState1 + (2 * rState2); //for 2 back 1
 8001e42:	4b8e      	ldr	r3, [pc, #568]	@ (800207c <BaseAction+0x254>)
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b8d      	ldr	r3, [pc, #564]	@ (8002080 <BaseAction+0x258>)
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	4413      	add	r3, r2
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4b8b      	ldr	r3, [pc, #556]	@ (8002084 <BaseAction+0x25c>)
 8001e58:	701a      	strb	r2, [r3, #0]
	  registerFrame[0x04].U16 = (reed*2%3);
 8001e5a:	4b8a      	ldr	r3, [pc, #552]	@ (8002084 <BaseAction+0x25c>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	005a      	lsls	r2, r3, #1
 8001e60:	4b89      	ldr	r3, [pc, #548]	@ (8002088 <BaseAction+0x260>)
 8001e62:	fb83 3102 	smull	r3, r1, r3, r2
 8001e66:	17d3      	asrs	r3, r2, #31
 8001e68:	1ac9      	subs	r1, r1, r3
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	440b      	add	r3, r1
 8001e70:	1ad1      	subs	r1, r2, r3
 8001e72:	b28a      	uxth	r2, r1
 8001e74:	4b7e      	ldr	r3, [pc, #504]	@ (8002070 <BaseAction+0x248>)
 8001e76:	811a      	strh	r2, [r3, #8]

	  registerFrame[0x11].U16 = (uint16_t)(linear_position * 10); //Position
 8001e78:	4b84      	ldr	r3, [pc, #528]	@ (800208c <BaseAction+0x264>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	0092      	lsls	r2, r2, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	4b7a      	ldr	r3, [pc, #488]	@ (8002070 <BaseAction+0x248>)
 8001e88:	845a      	strh	r2, [r3, #34]	@ 0x22
	  registerFrame[0x12].U16 = (uint16_t)(linear_velocity * 10); //Velocity
 8001e8a:	4b81      	ldr	r3, [pc, #516]	@ (8002090 <BaseAction+0x268>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	0092      	lsls	r2, r2, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	4b75      	ldr	r3, [pc, #468]	@ (8002070 <BaseAction+0x248>)
 8001e9a:	849a      	strh	r2, [r3, #36]	@ 0x24
	  registerFrame[0x13].U16 = (uint16_t)(linear_accel * 10)	; //Acceleration
 8001e9c:	4b7d      	ldr	r3, [pc, #500]	@ (8002094 <BaseAction+0x26c>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	4b71      	ldr	r3, [pc, #452]	@ (8002070 <BaseAction+0x248>)
 8001eac:	84da      	strh	r2, [r3, #38]	@ 0x26
	  registerFrame[0x40].U16 = x_pos; // X-axis Position
 8001eae:	4b7a      	ldr	r3, [pc, #488]	@ (8002098 <BaseAction+0x270>)
 8001eb0:	881a      	ldrh	r2, [r3, #0]
 8001eb2:	4b6f      	ldr	r3, [pc, #444]	@ (8002070 <BaseAction+0x248>)
 8001eb4:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80

	  //heartbeat protocal & debug
	  //registerFrame[0x00].U16 = 22881;
	  if(registerFrame[0x00].U16 != 22881){
 8001eb8:	4b6d      	ldr	r3, [pc, #436]	@ (8002070 <BaseAction+0x248>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d003      	beq.n	8001ecc <BaseAction+0xa4>
		  registerFrame[0x00].U16 = 22881;
 8001ec4:	4b6a      	ldr	r3, [pc, #424]	@ (8002070 <BaseAction+0x248>)
 8001ec6:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001eca:	801a      	strh	r2, [r3, #0]
	  }

	  static uint16_t timestamp = 0;

		/////Set shelves
		  if(registerFrame[0x01].U16 == 1) // order mode 1 -> open setshelf
 8001ecc:	4b68      	ldr	r3, [pc, #416]	@ (8002070 <BaseAction+0x248>)
 8001ece:	885b      	ldrh	r3, [r3, #2]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d105      	bne.n	8001ee0 <BaseAction+0xb8>
		  {
			  registerFrame[0x01].U16 = 0; //change to idle mode
 8001ed4:	4b66      	ldr	r3, [pc, #408]	@ (8002070 <BaseAction+0x248>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	805a      	strh	r2, [r3, #2]
			  registerFrame[0x10].U16 = 1; //current state set shelf mode
 8001eda:	4b65      	ldr	r3, [pc, #404]	@ (8002070 <BaseAction+0x248>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	841a      	strh	r2, [r3, #32]

			  //delay 2000ms
			 // timestamp = HAL_GetTick()+2000;
		  }
		  if(registerFrame[0x10].U16 == 1 && flagShelf == 1)
 8001ee0:	4b63      	ldr	r3, [pc, #396]	@ (8002070 <BaseAction+0x248>)
 8001ee2:	8c1b      	ldrh	r3, [r3, #32]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d123      	bne.n	8001f30 <BaseAction+0x108>
 8001ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800209c <BaseAction+0x274>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d11f      	bne.n	8001f30 <BaseAction+0x108>
		  {
			  registerFrame[0x23].U16 = shelfPos[0];
 8001ef0:	4b6b      	ldr	r3, [pc, #428]	@ (80020a0 <BaseAction+0x278>)
 8001ef2:	881a      	ldrh	r2, [r3, #0]
 8001ef4:	4b5e      	ldr	r3, [pc, #376]	@ (8002070 <BaseAction+0x248>)
 8001ef6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
			  registerFrame[0x24].U16 = shelfPos[1];
 8001efa:	4b69      	ldr	r3, [pc, #420]	@ (80020a0 <BaseAction+0x278>)
 8001efc:	885a      	ldrh	r2, [r3, #2]
 8001efe:	4b5c      	ldr	r3, [pc, #368]	@ (8002070 <BaseAction+0x248>)
 8001f00:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
			  registerFrame[0x25].U16 = shelfPos[2];
 8001f04:	4b66      	ldr	r3, [pc, #408]	@ (80020a0 <BaseAction+0x278>)
 8001f06:	889a      	ldrh	r2, [r3, #4]
 8001f08:	4b59      	ldr	r3, [pc, #356]	@ (8002070 <BaseAction+0x248>)
 8001f0a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			  registerFrame[0x26].U16 = shelfPos[3];
 8001f0e:	4b64      	ldr	r3, [pc, #400]	@ (80020a0 <BaseAction+0x278>)
 8001f10:	88da      	ldrh	r2, [r3, #6]
 8001f12:	4b57      	ldr	r3, [pc, #348]	@ (8002070 <BaseAction+0x248>)
 8001f14:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			  registerFrame[0x27].U16 = shelfPos[4];
 8001f18:	4b61      	ldr	r3, [pc, #388]	@ (80020a0 <BaseAction+0x278>)
 8001f1a:	891a      	ldrh	r2, [r3, #8]
 8001f1c:	4b54      	ldr	r3, [pc, #336]	@ (8002070 <BaseAction+0x248>)
 8001f1e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			  registerFrame[0x10].U16 = 0; //
 8001f22:	4b53      	ldr	r3, [pc, #332]	@ (8002070 <BaseAction+0x248>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	841a      	strh	r2, [r3, #32]
			  flagShelf = 0;
 8001f28:	4b5c      	ldr	r3, [pc, #368]	@ (800209c <BaseAction+0x274>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	e255      	b.n	80023dc <BaseAction+0x5b4>
		  }

		///////Home
		  else if((registerFrame[0x01].U16 == 2)) //go to mode 2: Home
 8001f30:	4b4f      	ldr	r3, [pc, #316]	@ (8002070 <BaseAction+0x248>)
 8001f32:	885b      	ldrh	r3, [r3, #2]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d10a      	bne.n	8001f4e <BaseAction+0x126>
		  	{
		  		(registerFrame[0x01].U16) = 0; //reset status
 8001f38:	4b4d      	ldr	r3, [pc, #308]	@ (8002070 <BaseAction+0x248>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	805a      	strh	r2, [r3, #2]
		  		(registerFrame[0x10].U16) = 2; //Z-home
 8001f3e:	4b4c      	ldr	r3, [pc, #304]	@ (8002070 <BaseAction+0x248>)
 8001f40:	2202      	movs	r2, #2
 8001f42:	841a      	strh	r2, [r3, #32]

		  		setPos = shelfPos[0]; // set goal to home
 8001f44:	4b56      	ldr	r3, [pc, #344]	@ (80020a0 <BaseAction+0x278>)
 8001f46:	881a      	ldrh	r2, [r3, #0]
 8001f48:	4b56      	ldr	r3, [pc, #344]	@ (80020a4 <BaseAction+0x27c>)
 8001f4a:	801a      	strh	r2, [r3, #0]
				{
					registerFrame[0x10].U16 = 0; // finish point & home mode
					rnd2 = 0;
				}
			}
	}
 8001f4c:	e246      	b.n	80023dc <BaseAction+0x5b4>
			else if((registerFrame[0x01].U16) == 8)
 8001f4e:	4b48      	ldr	r3, [pc, #288]	@ (8002070 <BaseAction+0x248>)
 8001f50:	885b      	ldrh	r3, [r3, #2]
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d10b      	bne.n	8001f6e <BaseAction+0x146>
				(registerFrame[0x01].U16) = 0; //reset status
 8001f56:	4b46      	ldr	r3, [pc, #280]	@ (8002070 <BaseAction+0x248>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	805a      	strh	r2, [r3, #2]
				(registerFrame[0x10].U16) = 16; // Z-go point
 8001f5c:	4b44      	ldr	r3, [pc, #272]	@ (8002070 <BaseAction+0x248>)
 8001f5e:	2210      	movs	r2, #16
 8001f60:	841a      	strh	r2, [r3, #32]
				setPos = (registerFrame[0x30].U16); // goal = point 30->base system 4 point mode
 8001f62:	4b43      	ldr	r3, [pc, #268]	@ (8002070 <BaseAction+0x248>)
 8001f64:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8001f68:	4b4e      	ldr	r3, [pc, #312]	@ (80020a4 <BaseAction+0x27c>)
 8001f6a:	801a      	strh	r2, [r3, #0]
	}
 8001f6c:	e236      	b.n	80023dc <BaseAction+0x5b4>
			else if((registerFrame[0x01].U16 ==4)){
 8001f6e:	4b40      	ldr	r3, [pc, #256]	@ (8002070 <BaseAction+0x248>)
 8001f70:	885b      	ldrh	r3, [r3, #2]
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d10f      	bne.n	8001f96 <BaseAction+0x16e>
				(registerFrame[0x01].U16) = 0; //reset status
 8001f76:	4b3e      	ldr	r3, [pc, #248]	@ (8002070 <BaseAction+0x248>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	805a      	strh	r2, [r3, #2]
				temPick = (registerFrame[0x21].U16);
 8001f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8002070 <BaseAction+0x248>)
 8001f7e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001f82:	4b49      	ldr	r3, [pc, #292]	@ (80020a8 <BaseAction+0x280>)
 8001f84:	801a      	strh	r2, [r3, #0]
				temPlace = (registerFrame[0x22].U16);
 8001f86:	4b3a      	ldr	r3, [pc, #232]	@ (8002070 <BaseAction+0x248>)
 8001f88:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001f8c:	4b47      	ldr	r3, [pc, #284]	@ (80020ac <BaseAction+0x284>)
 8001f8e:	801a      	strh	r2, [r3, #0]
				OrderSeparate();
 8001f90:	f000 fa30 	bl	80023f4 <OrderSeparate>
	}
 8001f94:	e222      	b.n	80023dc <BaseAction+0x5b4>
			else if(rnd > 0)
 8001f96:	4b46      	ldr	r3, [pc, #280]	@ (80020b0 <BaseAction+0x288>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 81bd 	beq.w	800231a <BaseAction+0x4f2>
			if(registerFrame[0x10].U16 == 0 && rnd== 5 && gripper == 0 && reed == 1 && vacuum == 0) // first rev
 8001fa0:	4b33      	ldr	r3, [pc, #204]	@ (8002070 <BaseAction+0x248>)
 8001fa2:	8c1b      	ldrh	r3, [r3, #32]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d122      	bne.n	8001fee <BaseAction+0x1c6>
 8001fa8:	4b41      	ldr	r3, [pc, #260]	@ (80020b0 <BaseAction+0x288>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d11e      	bne.n	8001fee <BaseAction+0x1c6>
 8001fb0:	4b31      	ldr	r3, [pc, #196]	@ (8002078 <BaseAction+0x250>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d11a      	bne.n	8001fee <BaseAction+0x1c6>
 8001fb8:	4b32      	ldr	r3, [pc, #200]	@ (8002084 <BaseAction+0x25c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d116      	bne.n	8001fee <BaseAction+0x1c6>
 8001fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8002074 <BaseAction+0x24c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d112      	bne.n	8001fee <BaseAction+0x1c6>
				mode = 9; // for debug - pick
 8001fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80020b4 <BaseAction+0x28c>)
 8001fca:	2209      	movs	r2, #9
 8001fcc:	701a      	strb	r2, [r3, #0]
				(registerFrame[0x10].U16) = 4; // Z-go pick
 8001fce:	4b28      	ldr	r3, [pc, #160]	@ (8002070 <BaseAction+0x248>)
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	841a      	strh	r2, [r3, #32]
				setPos = shelfPos[pick[5-rnd]-1];
 8001fd4:	4b36      	ldr	r3, [pc, #216]	@ (80020b0 <BaseAction+0x288>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	f1c3 0305 	rsb	r3, r3, #5
 8001fdc:	4a36      	ldr	r2, [pc, #216]	@ (80020b8 <BaseAction+0x290>)
 8001fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	4a2e      	ldr	r2, [pc, #184]	@ (80020a0 <BaseAction+0x278>)
 8001fe6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fea:	4b2e      	ldr	r3, [pc, #184]	@ (80020a4 <BaseAction+0x27c>)
 8001fec:	801a      	strh	r2, [r3, #0]
			if((piingpong && registerFrame[0x10].U16 == 8)) // prev mode: pick, do place
 8001fee:	4b33      	ldr	r3, [pc, #204]	@ (80020bc <BaseAction+0x294>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 80dc 	beq.w	80021b0 <BaseAction+0x388>
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <BaseAction+0x248>)
 8001ffa:	8c1b      	ldrh	r3, [r3, #32]
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	f040 80d7 	bne.w	80021b0 <BaseAction+0x388>
				if(mode == 6){
 8002002:	4b2c      	ldr	r3, [pc, #176]	@ (80020b4 <BaseAction+0x28c>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b06      	cmp	r3, #6
 8002008:	d10b      	bne.n	8002022 <BaseAction+0x1fa>
					timestamp1 = HAL_GetTick() + 300; // 0.5 sec delay
 800200a:	f000 ff19 	bl	8002e40 <HAL_GetTick>
 800200e:	4603      	mov	r3, r0
 8002010:	b29b      	uxth	r3, r3
 8002012:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8002016:	b29a      	uxth	r2, r3
 8002018:	4b29      	ldr	r3, [pc, #164]	@ (80020c0 <BaseAction+0x298>)
 800201a:	801a      	strh	r2, [r3, #0]
					mode = 60;
 800201c:	4b25      	ldr	r3, [pc, #148]	@ (80020b4 <BaseAction+0x28c>)
 800201e:	223c      	movs	r2, #60	@ 0x3c
 8002020:	701a      	strb	r2, [r3, #0]
				if(reed != 2 && rnd> 0 && vacuum == 1 && gripper == 0 && HAL_GetTick() >= timestamp1){
 8002022:	4b18      	ldr	r3, [pc, #96]	@ (8002084 <BaseAction+0x25c>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d04e      	beq.n	80020c8 <BaseAction+0x2a0>
 800202a:	4b21      	ldr	r3, [pc, #132]	@ (80020b0 <BaseAction+0x288>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d04a      	beq.n	80020c8 <BaseAction+0x2a0>
 8002032:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <BaseAction+0x24c>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d146      	bne.n	80020c8 <BaseAction+0x2a0>
 800203a:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <BaseAction+0x250>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d142      	bne.n	80020c8 <BaseAction+0x2a0>
 8002042:	f000 fefd 	bl	8002e40 <HAL_GetTick>
 8002046:	4603      	mov	r3, r0
 8002048:	4a1d      	ldr	r2, [pc, #116]	@ (80020c0 <BaseAction+0x298>)
 800204a:	8812      	ldrh	r2, [r2, #0]
 800204c:	4293      	cmp	r3, r2
 800204e:	d33b      	bcc.n	80020c8 <BaseAction+0x2a0>
					registerFrame[0x03].U16 = 1; // gripper forward
 8002050:	4b07      	ldr	r3, [pc, #28]	@ (8002070 <BaseAction+0x248>)
 8002052:	2201      	movs	r2, #1
 8002054:	80da      	strh	r2, [r3, #6]
					timestamp2 = HAL_GetTick() + 100;
 8002056:	f000 fef3 	bl	8002e40 <HAL_GetTick>
 800205a:	4603      	mov	r3, r0
 800205c:	b29b      	uxth	r3, r3
 800205e:	3364      	adds	r3, #100	@ 0x64
 8002060:	b29a      	uxth	r2, r3
 8002062:	4b18      	ldr	r3, [pc, #96]	@ (80020c4 <BaseAction+0x29c>)
 8002064:	801a      	strh	r2, [r3, #0]
					mode = 61;
 8002066:	4b13      	ldr	r3, [pc, #76]	@ (80020b4 <BaseAction+0x28c>)
 8002068:	223d      	movs	r2, #61	@ 0x3d
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	e06a      	b.n	8002144 <BaseAction+0x31c>
 800206e:	bf00      	nop
 8002070:	20000f10 	.word	0x20000f10
 8002074:	20000f00 	.word	0x20000f00
 8002078:	20000f01 	.word	0x20000f01
 800207c:	20000f04 	.word	0x20000f04
 8002080:	20000f06 	.word	0x20000f06
 8002084:	20000f02 	.word	0x20000f02
 8002088:	55555556 	.word	0x55555556
 800208c:	20000f0c 	.word	0x20000f0c
 8002090:	20000f08 	.word	0x20000f08
 8002094:	20000f0a 	.word	0x20000f0a
 8002098:	200010ac 	.word	0x200010ac
 800209c:	20000efc 	.word	0x20000efc
 80020a0:	200010a0 	.word	0x200010a0
 80020a4:	200010aa 	.word	0x200010aa
 80020a8:	200010b0 	.word	0x200010b0
 80020ac:	200010b2 	.word	0x200010b2
 80020b0:	200010ca 	.word	0x200010ca
 80020b4:	200010ae 	.word	0x200010ae
 80020b8:	200010b4 	.word	0x200010b4
 80020bc:	20000efe 	.word	0x20000efe
 80020c0:	20001100 	.word	0x20001100
 80020c4:	20001102 	.word	0x20001102
				else if(reed == 2 && vacuum == 1 && HAL_GetTick() >= timestamp2)//reached reed vacuum not off
 80020c8:	4b9a      	ldr	r3, [pc, #616]	@ (8002334 <BaseAction+0x50c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d119      	bne.n	8002104 <BaseAction+0x2dc>
 80020d0:	4b99      	ldr	r3, [pc, #612]	@ (8002338 <BaseAction+0x510>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d115      	bne.n	8002104 <BaseAction+0x2dc>
 80020d8:	f000 feb2 	bl	8002e40 <HAL_GetTick>
 80020dc:	4603      	mov	r3, r0
 80020de:	4a97      	ldr	r2, [pc, #604]	@ (800233c <BaseAction+0x514>)
 80020e0:	8812      	ldrh	r2, [r2, #0]
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d30e      	bcc.n	8002104 <BaseAction+0x2dc>
					registerFrame[0x02].U16 = 0; //vacuum off
 80020e6:	4b96      	ldr	r3, [pc, #600]	@ (8002340 <BaseAction+0x518>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	809a      	strh	r2, [r3, #4]
					timestamp3 = HAL_GetTick() + 100; // 0.5 sec delay
 80020ec:	f000 fea8 	bl	8002e40 <HAL_GetTick>
 80020f0:	4603      	mov	r3, r0
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3364      	adds	r3, #100	@ 0x64
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	4b92      	ldr	r3, [pc, #584]	@ (8002344 <BaseAction+0x51c>)
 80020fa:	801a      	strh	r2, [r3, #0]
					mode = 62;
 80020fc:	4b92      	ldr	r3, [pc, #584]	@ (8002348 <BaseAction+0x520>)
 80020fe:	223e      	movs	r2, #62	@ 0x3e
 8002100:	701a      	strb	r2, [r3, #0]
 8002102:	e01f      	b.n	8002144 <BaseAction+0x31c>
				else if(vacuum == 0 && gripper == 1 && HAL_GetTick() >= timestamp3)
 8002104:	4b8c      	ldr	r3, [pc, #560]	@ (8002338 <BaseAction+0x510>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d11b      	bne.n	8002144 <BaseAction+0x31c>
 800210c:	4b8f      	ldr	r3, [pc, #572]	@ (800234c <BaseAction+0x524>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d117      	bne.n	8002144 <BaseAction+0x31c>
 8002114:	f000 fe94 	bl	8002e40 <HAL_GetTick>
 8002118:	4603      	mov	r3, r0
 800211a:	4a8a      	ldr	r2, [pc, #552]	@ (8002344 <BaseAction+0x51c>)
 800211c:	8812      	ldrh	r2, [r2, #0]
 800211e:	4293      	cmp	r3, r2
 8002120:	d310      	bcc.n	8002144 <BaseAction+0x31c>
					registerFrame[0x03].U16 = 0; //gripper backward
 8002122:	4b87      	ldr	r3, [pc, #540]	@ (8002340 <BaseAction+0x518>)
 8002124:	2200      	movs	r2, #0
 8002126:	80da      	strh	r2, [r3, #6]
					load = 0;
 8002128:	4b89      	ldr	r3, [pc, #548]	@ (8002350 <BaseAction+0x528>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
					timestamp4 = HAL_GetTick() + 100;
 800212e:	f000 fe87 	bl	8002e40 <HAL_GetTick>
 8002132:	4603      	mov	r3, r0
 8002134:	b29b      	uxth	r3, r3
 8002136:	3364      	adds	r3, #100	@ 0x64
 8002138:	b29a      	uxth	r2, r3
 800213a:	4b86      	ldr	r3, [pc, #536]	@ (8002354 <BaseAction+0x52c>)
 800213c:	801a      	strh	r2, [r3, #0]
					mode = 63;
 800213e:	4b82      	ldr	r3, [pc, #520]	@ (8002348 <BaseAction+0x520>)
 8002140:	223f      	movs	r2, #63	@ 0x3f
 8002142:	701a      	strb	r2, [r3, #0]
				if(gripper == 0 && reed == 1 && vacuum == 0 && HAL_GetTick() >= timestamp4)
 8002144:	4b81      	ldr	r3, [pc, #516]	@ (800234c <BaseAction+0x524>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	f040 8146 	bne.w	80023da <BaseAction+0x5b2>
 800214e:	4b79      	ldr	r3, [pc, #484]	@ (8002334 <BaseAction+0x50c>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b01      	cmp	r3, #1
 8002154:	f040 8141 	bne.w	80023da <BaseAction+0x5b2>
 8002158:	4b77      	ldr	r3, [pc, #476]	@ (8002338 <BaseAction+0x510>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f040 813c 	bne.w	80023da <BaseAction+0x5b2>
 8002162:	f000 fe6d 	bl	8002e40 <HAL_GetTick>
 8002166:	4603      	mov	r3, r0
 8002168:	4a7a      	ldr	r2, [pc, #488]	@ (8002354 <BaseAction+0x52c>)
 800216a:	8812      	ldrh	r2, [r2, #0]
 800216c:	4293      	cmp	r3, r2
 800216e:	f0c0 8134 	bcc.w	80023da <BaseAction+0x5b2>
					rnd--;
 8002172:	4b79      	ldr	r3, [pc, #484]	@ (8002358 <BaseAction+0x530>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	3b01      	subs	r3, #1
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4b77      	ldr	r3, [pc, #476]	@ (8002358 <BaseAction+0x530>)
 800217c:	701a      	strb	r2, [r3, #0]
					if(rnd>0)
 800217e:	4b76      	ldr	r3, [pc, #472]	@ (8002358 <BaseAction+0x530>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8129 	beq.w	80023da <BaseAction+0x5b2>
						(registerFrame[0x10].U16) = 4; // Z-go pick
 8002188:	4b6d      	ldr	r3, [pc, #436]	@ (8002340 <BaseAction+0x518>)
 800218a:	2204      	movs	r2, #4
 800218c:	841a      	strh	r2, [r3, #32]
						setPos = shelfPos[pick[5-rnd]-1];
 800218e:	4b72      	ldr	r3, [pc, #456]	@ (8002358 <BaseAction+0x530>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	f1c3 0305 	rsb	r3, r3, #5
 8002196:	4a71      	ldr	r2, [pc, #452]	@ (800235c <BaseAction+0x534>)
 8002198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800219c:	3b01      	subs	r3, #1
 800219e:	4a70      	ldr	r2, [pc, #448]	@ (8002360 <BaseAction+0x538>)
 80021a0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80021a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002364 <BaseAction+0x53c>)
 80021a6:	801a      	strh	r2, [r3, #0]
						mode = 9;
 80021a8:	4b67      	ldr	r3, [pc, #412]	@ (8002348 <BaseAction+0x520>)
 80021aa:	2209      	movs	r2, #9
 80021ac:	701a      	strb	r2, [r3, #0]
				if(gripper == 0 && reed == 1 && vacuum == 0 && HAL_GetTick() >= timestamp4)
 80021ae:	e114      	b.n	80023da <BaseAction+0x5b2>
			else if(piingpong && registerFrame[0x10].U16 == 4)// prev mode: place, do pick
 80021b0:	4b6d      	ldr	r3, [pc, #436]	@ (8002368 <BaseAction+0x540>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8111 	beq.w	80023dc <BaseAction+0x5b4>
 80021ba:	4b61      	ldr	r3, [pc, #388]	@ (8002340 <BaseAction+0x518>)
 80021bc:	8c1b      	ldrh	r3, [r3, #32]
 80021be:	2b04      	cmp	r3, #4
 80021c0:	f040 810c 	bne.w	80023dc <BaseAction+0x5b4>
				if(mode == 9){
 80021c4:	4b60      	ldr	r3, [pc, #384]	@ (8002348 <BaseAction+0x520>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b09      	cmp	r3, #9
 80021ca:	d107      	bne.n	80021dc <BaseAction+0x3b4>
					timestamp1 = HAL_GetTick() + 50; // 0.05 sec delay
 80021cc:	f000 fe38 	bl	8002e40 <HAL_GetTick>
 80021d0:	4603      	mov	r3, r0
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3332      	adds	r3, #50	@ 0x32
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	4b64      	ldr	r3, [pc, #400]	@ (800236c <BaseAction+0x544>)
 80021da:	801a      	strh	r2, [r3, #0]
				if(reed == 1 && gripper == 0 && vacuum == 0 && HAL_GetTick() >= timestamp1)
 80021dc:	4b55      	ldr	r3, [pc, #340]	@ (8002334 <BaseAction+0x50c>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d11a      	bne.n	800221a <BaseAction+0x3f2>
 80021e4:	4b59      	ldr	r3, [pc, #356]	@ (800234c <BaseAction+0x524>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d116      	bne.n	800221a <BaseAction+0x3f2>
 80021ec:	4b52      	ldr	r3, [pc, #328]	@ (8002338 <BaseAction+0x510>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d112      	bne.n	800221a <BaseAction+0x3f2>
 80021f4:	f000 fe24 	bl	8002e40 <HAL_GetTick>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4a5c      	ldr	r2, [pc, #368]	@ (800236c <BaseAction+0x544>)
 80021fc:	8812      	ldrh	r2, [r2, #0]
 80021fe:	4293      	cmp	r3, r2
 8002200:	d30b      	bcc.n	800221a <BaseAction+0x3f2>
					timestamp2 = HAL_GetTick() + 100;
 8002202:	f000 fe1d 	bl	8002e40 <HAL_GetTick>
 8002206:	4603      	mov	r3, r0
 8002208:	b29b      	uxth	r3, r3
 800220a:	3364      	adds	r3, #100	@ 0x64
 800220c:	b29a      	uxth	r2, r3
 800220e:	4b4b      	ldr	r3, [pc, #300]	@ (800233c <BaseAction+0x514>)
 8002210:	801a      	strh	r2, [r3, #0]
					registerFrame[0x03].U16 = 1; //gripper forward
 8002212:	4b4b      	ldr	r3, [pc, #300]	@ (8002340 <BaseAction+0x518>)
 8002214:	2201      	movs	r2, #1
 8002216:	80da      	strh	r2, [r3, #6]
 8002218:	e03c      	b.n	8002294 <BaseAction+0x46c>
				else if(gripper == 1 && vacuum == 0 && HAL_GetTick() >= timestamp2) //if vacuum off
 800221a:	4b4c      	ldr	r3, [pc, #304]	@ (800234c <BaseAction+0x524>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d117      	bne.n	8002252 <BaseAction+0x42a>
 8002222:	4b45      	ldr	r3, [pc, #276]	@ (8002338 <BaseAction+0x510>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d113      	bne.n	8002252 <BaseAction+0x42a>
 800222a:	f000 fe09 	bl	8002e40 <HAL_GetTick>
 800222e:	4603      	mov	r3, r0
 8002230:	4a42      	ldr	r2, [pc, #264]	@ (800233c <BaseAction+0x514>)
 8002232:	8812      	ldrh	r2, [r2, #0]
 8002234:	4293      	cmp	r3, r2
 8002236:	d30c      	bcc.n	8002252 <BaseAction+0x42a>
					registerFrame[0x02].U16 = 1; //vacuum on
 8002238:	4b41      	ldr	r3, [pc, #260]	@ (8002340 <BaseAction+0x518>)
 800223a:	2201      	movs	r2, #1
 800223c:	809a      	strh	r2, [r3, #4]
					timestamp3 = HAL_GetTick() + 400;
 800223e:	f000 fdff 	bl	8002e40 <HAL_GetTick>
 8002242:	4603      	mov	r3, r0
 8002244:	b29b      	uxth	r3, r3
 8002246:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800224a:	b29a      	uxth	r2, r3
 800224c:	4b3d      	ldr	r3, [pc, #244]	@ (8002344 <BaseAction+0x51c>)
 800224e:	801a      	strh	r2, [r3, #0]
 8002250:	e020      	b.n	8002294 <BaseAction+0x46c>
				else if(reed == 2 && gripper == 1 && vacuum == 1 && HAL_GetTick() >= timestamp3)
 8002252:	4b38      	ldr	r3, [pc, #224]	@ (8002334 <BaseAction+0x50c>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d11c      	bne.n	8002294 <BaseAction+0x46c>
 800225a:	4b3c      	ldr	r3, [pc, #240]	@ (800234c <BaseAction+0x524>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d118      	bne.n	8002294 <BaseAction+0x46c>
 8002262:	4b35      	ldr	r3, [pc, #212]	@ (8002338 <BaseAction+0x510>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d114      	bne.n	8002294 <BaseAction+0x46c>
 800226a:	f000 fde9 	bl	8002e40 <HAL_GetTick>
 800226e:	4603      	mov	r3, r0
 8002270:	4a34      	ldr	r2, [pc, #208]	@ (8002344 <BaseAction+0x51c>)
 8002272:	8812      	ldrh	r2, [r2, #0]
 8002274:	4293      	cmp	r3, r2
 8002276:	d30d      	bcc.n	8002294 <BaseAction+0x46c>
					registerFrame[0x03].U16 = 0; //gripper backward
 8002278:	4b31      	ldr	r3, [pc, #196]	@ (8002340 <BaseAction+0x518>)
 800227a:	2200      	movs	r2, #0
 800227c:	80da      	strh	r2, [r3, #6]
					load = 1;
 800227e:	4b34      	ldr	r3, [pc, #208]	@ (8002350 <BaseAction+0x528>)
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
					timestamp4 = HAL_GetTick() + 200;
 8002284:	f000 fddc 	bl	8002e40 <HAL_GetTick>
 8002288:	4603      	mov	r3, r0
 800228a:	b29b      	uxth	r3, r3
 800228c:	33c8      	adds	r3, #200	@ 0xc8
 800228e:	b29a      	uxth	r2, r3
 8002290:	4b30      	ldr	r3, [pc, #192]	@ (8002354 <BaseAction+0x52c>)
 8002292:	801a      	strh	r2, [r3, #0]
				if(gripper == 0 && reed == 1 && vacuum == 1 && HAL_GetTick() >= timestamp4)
 8002294:	4b2d      	ldr	r3, [pc, #180]	@ (800234c <BaseAction+0x524>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	f040 809f 	bne.w	80023dc <BaseAction+0x5b4>
 800229e:	4b25      	ldr	r3, [pc, #148]	@ (8002334 <BaseAction+0x50c>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	f040 809a 	bne.w	80023dc <BaseAction+0x5b4>
 80022a8:	4b23      	ldr	r3, [pc, #140]	@ (8002338 <BaseAction+0x510>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	f040 8095 	bne.w	80023dc <BaseAction+0x5b4>
 80022b2:	f000 fdc5 	bl	8002e40 <HAL_GetTick>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4a26      	ldr	r2, [pc, #152]	@ (8002354 <BaseAction+0x52c>)
 80022ba:	8812      	ldrh	r2, [r2, #0]
 80022bc:	4293      	cmp	r3, r2
 80022be:	f0c0 808d 	bcc.w	80023dc <BaseAction+0x5b4>
					(registerFrame[0x10].U16) = 8; // Z-go place
 80022c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002340 <BaseAction+0x518>)
 80022c4:	2208      	movs	r2, #8
 80022c6:	841a      	strh	r2, [r3, #32]
					if(place[5-rnd] == 5){
 80022c8:	4b23      	ldr	r3, [pc, #140]	@ (8002358 <BaseAction+0x530>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	f1c3 0305 	rsb	r3, r3, #5
 80022d0:	4a27      	ldr	r2, [pc, #156]	@ (8002370 <BaseAction+0x548>)
 80022d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022d6:	2b05      	cmp	r3, #5
 80022d8:	d10f      	bne.n	80022fa <BaseAction+0x4d2>
						setPos = shelfPos[place[5-rnd]-1] + 50; // goal + 5mm
 80022da:	4b1f      	ldr	r3, [pc, #124]	@ (8002358 <BaseAction+0x530>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	f1c3 0305 	rsb	r3, r3, #5
 80022e2:	4a23      	ldr	r2, [pc, #140]	@ (8002370 <BaseAction+0x548>)
 80022e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002360 <BaseAction+0x538>)
 80022ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022f0:	3332      	adds	r3, #50	@ 0x32
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002364 <BaseAction+0x53c>)
 80022f6:	801a      	strh	r2, [r3, #0]
	}
 80022f8:	e070      	b.n	80023dc <BaseAction+0x5b4>
						setPos = shelfPos[place[5-rnd]-1] + 100; // goal + 5mm
 80022fa:	4b17      	ldr	r3, [pc, #92]	@ (8002358 <BaseAction+0x530>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	f1c3 0305 	rsb	r3, r3, #5
 8002302:	4a1b      	ldr	r2, [pc, #108]	@ (8002370 <BaseAction+0x548>)
 8002304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002308:	3b01      	subs	r3, #1
 800230a:	4a15      	ldr	r2, [pc, #84]	@ (8002360 <BaseAction+0x538>)
 800230c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002310:	3364      	adds	r3, #100	@ 0x64
 8002312:	b29a      	uxth	r2, r3
 8002314:	4b13      	ldr	r3, [pc, #76]	@ (8002364 <BaseAction+0x53c>)
 8002316:	801a      	strh	r2, [r3, #0]
	}
 8002318:	e060      	b.n	80023dc <BaseAction+0x5b4>
			else if(registerFrame[0x10].U16 == 8 && rnd== 0)
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <BaseAction+0x518>)
 800231c:	8c1b      	ldrh	r3, [r3, #32]
 800231e:	2b08      	cmp	r3, #8
 8002320:	d128      	bne.n	8002374 <BaseAction+0x54c>
 8002322:	4b0d      	ldr	r3, [pc, #52]	@ (8002358 <BaseAction+0x530>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d124      	bne.n	8002374 <BaseAction+0x54c>
				(registerFrame[0x10].U16 = 0); // End Jogs
 800232a:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <BaseAction+0x518>)
 800232c:	2200      	movs	r2, #0
 800232e:	841a      	strh	r2, [r3, #32]
 8002330:	e054      	b.n	80023dc <BaseAction+0x5b4>
 8002332:	bf00      	nop
 8002334:	20000f02 	.word	0x20000f02
 8002338:	20000f00 	.word	0x20000f00
 800233c:	20001102 	.word	0x20001102
 8002340:	20000f10 	.word	0x20000f10
 8002344:	20001104 	.word	0x20001104
 8002348:	200010ae 	.word	0x200010ae
 800234c:	20000f01 	.word	0x20000f01
 8002350:	200010cc 	.word	0x200010cc
 8002354:	20001106 	.word	0x20001106
 8002358:	200010ca 	.word	0x200010ca
 800235c:	200010b4 	.word	0x200010b4
 8002360:	200010a0 	.word	0x200010a0
 8002364:	200010aa 	.word	0x200010aa
 8002368:	20000efe 	.word	0x20000efe
 800236c:	20001100 	.word	0x20001100
 8002370:	200010c0 	.word	0x200010c0
			else if(piingpong && (registerFrame[0x10].U16 == 2 || registerFrame[0x10].U16 == 16))
 8002374:	4b1b      	ldr	r3, [pc, #108]	@ (80023e4 <BaseAction+0x5bc>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d02f      	beq.n	80023dc <BaseAction+0x5b4>
 800237c:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <BaseAction+0x5c0>)
 800237e:	8c1b      	ldrh	r3, [r3, #32]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d003      	beq.n	800238c <BaseAction+0x564>
 8002384:	4b18      	ldr	r3, [pc, #96]	@ (80023e8 <BaseAction+0x5c0>)
 8002386:	8c1b      	ldrh	r3, [r3, #32]
 8002388:	2b10      	cmp	r3, #16
 800238a:	d127      	bne.n	80023dc <BaseAction+0x5b4>
				if(rnd2 == 0){
 800238c:	4b17      	ldr	r3, [pc, #92]	@ (80023ec <BaseAction+0x5c4>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10e      	bne.n	80023b2 <BaseAction+0x58a>
					Timestamp = HAL_GetTick() + 1000; //delay
 8002394:	f000 fd54 	bl	8002e40 <HAL_GetTick>
 8002398:	4603      	mov	r3, r0
 800239a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800239e:	2200      	movs	r2, #0
 80023a0:	4698      	mov	r8, r3
 80023a2:	4691      	mov	r9, r2
 80023a4:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <BaseAction+0x5c8>)
 80023a6:	e9c3 8900 	strd	r8, r9, [r3]
					rnd2 = 1;
 80023aa:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <BaseAction+0x5c4>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	701a      	strb	r2, [r3, #0]
	}
 80023b0:	e014      	b.n	80023dc <BaseAction+0x5b4>
				else if(HAL_GetTick() >= Timestamp)
 80023b2:	f000 fd45 	bl	8002e40 <HAL_GetTick>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2200      	movs	r2, #0
 80023ba:	461c      	mov	r4, r3
 80023bc:	4615      	mov	r5, r2
 80023be:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <BaseAction+0x5c8>)
 80023c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c4:	4294      	cmp	r4, r2
 80023c6:	eb75 0303 	sbcs.w	r3, r5, r3
 80023ca:	d307      	bcc.n	80023dc <BaseAction+0x5b4>
					registerFrame[0x10].U16 = 0; // finish point & home mode
 80023cc:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <BaseAction+0x5c0>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	841a      	strh	r2, [r3, #32]
					rnd2 = 0;
 80023d2:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <BaseAction+0x5c4>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
	}
 80023d8:	e000      	b.n	80023dc <BaseAction+0x5b4>
				if(gripper == 0 && reed == 1 && vacuum == 0 && HAL_GetTick() >= timestamp4)
 80023da:	bf00      	nop
	}
 80023dc:	bf00      	nop
 80023de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023e2:	bf00      	nop
 80023e4:	20000efe 	.word	0x20000efe
 80023e8:	20000f10 	.word	0x20000f10
 80023ec:	200010cb 	.word	0x200010cb
 80023f0:	20001108 	.word	0x20001108

080023f4 <OrderSeparate>:


void OrderSeparate(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
	rnd = 0;
 80023fa:	4b36      	ldr	r3, [pc, #216]	@ (80024d4 <OrderSeparate+0xe0>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
	////// Convert to string
	for(uint16_t p = 10000;p>=1;p/=10)
 8002400:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002404:	80fb      	strh	r3, [r7, #6]
 8002406:	e05a      	b.n	80024be <OrderSeparate+0xca>
	{
		if(temPick/p <= 0 || temPick/p > 5 || temPlace/p <= 0 || temPlace/p > 5) // check if 0 or > 5
 8002408:	4b33      	ldr	r3, [pc, #204]	@ (80024d8 <OrderSeparate+0xe4>)
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	88fa      	ldrh	r2, [r7, #6]
 800240e:	429a      	cmp	r2, r3
 8002410:	d814      	bhi.n	800243c <OrderSeparate+0x48>
 8002412:	4b31      	ldr	r3, [pc, #196]	@ (80024d8 <OrderSeparate+0xe4>)
 8002414:	881a      	ldrh	r2, [r3, #0]
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	fbb2 f3f3 	udiv	r3, r2, r3
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b05      	cmp	r3, #5
 8002420:	d80c      	bhi.n	800243c <OrderSeparate+0x48>
 8002422:	4b2e      	ldr	r3, [pc, #184]	@ (80024dc <OrderSeparate+0xe8>)
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	88fa      	ldrh	r2, [r7, #6]
 8002428:	429a      	cmp	r2, r3
 800242a:	d807      	bhi.n	800243c <OrderSeparate+0x48>
 800242c:	4b2b      	ldr	r3, [pc, #172]	@ (80024dc <OrderSeparate+0xe8>)
 800242e:	881a      	ldrh	r2, [r3, #0]
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	fbb2 f3f3 	udiv	r3, r2, r3
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b05      	cmp	r3, #5
 800243a:	d906      	bls.n	800244a <OrderSeparate+0x56>
		{
			rnd = 0;
 800243c:	4b25      	ldr	r3, [pc, #148]	@ (80024d4 <OrderSeparate+0xe0>)
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
			mode = 100;
 8002442:	4b27      	ldr	r3, [pc, #156]	@ (80024e0 <OrderSeparate+0xec>)
 8002444:	2264      	movs	r2, #100	@ 0x64
 8002446:	701a      	strb	r2, [r3, #0]
			break;
 8002448:	e03d      	b.n	80024c6 <OrderSeparate+0xd2>
		}
		pick[rnd] = temPick/p; // use this for pick
 800244a:	4b23      	ldr	r3, [pc, #140]	@ (80024d8 <OrderSeparate+0xe4>)
 800244c:	881a      	ldrh	r2, [r3, #0]
 800244e:	4b21      	ldr	r3, [pc, #132]	@ (80024d4 <OrderSeparate+0xe0>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4619      	mov	r1, r3
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	fbb2 f3f3 	udiv	r3, r2, r3
 800245a:	b29a      	uxth	r2, r3
 800245c:	4b21      	ldr	r3, [pc, #132]	@ (80024e4 <OrderSeparate+0xf0>)
 800245e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		place[rnd] = temPlace/p; // use this for place
 8002462:	4b1e      	ldr	r3, [pc, #120]	@ (80024dc <OrderSeparate+0xe8>)
 8002464:	881a      	ldrh	r2, [r3, #0]
 8002466:	4b1b      	ldr	r3, [pc, #108]	@ (80024d4 <OrderSeparate+0xe0>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	4619      	mov	r1, r3
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	b29a      	uxth	r2, r3
 8002474:	4b1c      	ldr	r3, [pc, #112]	@ (80024e8 <OrderSeparate+0xf4>)
 8002476:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		temPick = temPick%p;
 800247a:	4b17      	ldr	r3, [pc, #92]	@ (80024d8 <OrderSeparate+0xe4>)
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	88fa      	ldrh	r2, [r7, #6]
 8002480:	fbb3 f1f2 	udiv	r1, r3, r2
 8002484:	fb01 f202 	mul.w	r2, r1, r2
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	b29a      	uxth	r2, r3
 800248c:	4b12      	ldr	r3, [pc, #72]	@ (80024d8 <OrderSeparate+0xe4>)
 800248e:	801a      	strh	r2, [r3, #0]
		temPlace = temPlace%p;
 8002490:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <OrderSeparate+0xe8>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	88fa      	ldrh	r2, [r7, #6]
 8002496:	fbb3 f1f2 	udiv	r1, r3, r2
 800249a:	fb01 f202 	mul.w	r2, r1, r2
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	4b0e      	ldr	r3, [pc, #56]	@ (80024dc <OrderSeparate+0xe8>)
 80024a4:	801a      	strh	r2, [r3, #0]
		rnd++;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <OrderSeparate+0xe0>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	3301      	adds	r3, #1
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b09      	ldr	r3, [pc, #36]	@ (80024d4 <OrderSeparate+0xe0>)
 80024b0:	701a      	strb	r2, [r3, #0]
	for(uint16_t p = 10000;p>=1;p/=10)
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	4a0d      	ldr	r2, [pc, #52]	@ (80024ec <OrderSeparate+0xf8>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	08db      	lsrs	r3, r3, #3
 80024bc:	80fb      	strh	r3, [r7, #6]
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1a1      	bne.n	8002408 <OrderSeparate+0x14>
	}
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	200010ca 	.word	0x200010ca
 80024d8:	200010b0 	.word	0x200010b0
 80024dc:	200010b2 	.word	0x200010b2
 80024e0:	200010ae 	.word	0x200010ae
 80024e4:	200010b4 	.word	0x200010b4
 80024e8:	200010c0 	.word	0x200010c0
 80024ec:	cccccccd 	.word	0xcccccccd

080024f0 <getEncoderValue>:
 *	Parameter:
 *		void
 *
 */

uint32_t getEncoderValue(){
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2);
 80024f4:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <getEncoderValue+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	200002fc 	.word	0x200002fc

08002508 <HAL_GPIO_EXTI_Callback>:
uint8_t getZStop(){
	return zStop;
}

// @User : Stop motor when hit the end stop
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_5 || GPIO_Pin == GPIO_PIN_10){
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	2b20      	cmp	r3, #32
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_EXTI_Callback+0x18>
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800251e:	d10b      	bne.n	8002538 <HAL_GPIO_EXTI_Callback+0x30>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002520:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2200      	movs	r2, #0
 8002526:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002528:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <HAL_GPIO_EXTI_Callback+0x4c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2200      	movs	r2, #0
 800252e:	639a      	str	r2, [r3, #56]	@ 0x38
		zStop = 1;
 8002530:	4b09      	ldr	r3, [pc, #36]	@ (8002558 <HAL_GPIO_EXTI_Callback+0x50>)
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
	else if(GPIO_Pin == GPIO_PIN_13)
	{
		St = 1;
	}

}
 8002536:	e006      	b.n	8002546 <HAL_GPIO_EXTI_Callback+0x3e>
	else if(GPIO_Pin == GPIO_PIN_13)
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800253e:	d102      	bne.n	8002546 <HAL_GPIO_EXTI_Callback+0x3e>
		St = 1;
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <HAL_GPIO_EXTI_Callback+0x54>)
 8002542:	2201      	movs	r2, #1
 8002544:	801a      	strh	r2, [r3, #0]
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000230 	.word	0x20000230
 8002558:	20000a20 	.word	0x20000a20
 800255c:	200010ce 	.word	0x200010ce

08002560 <HAL_TIM_PWM_PulseFinishedCallback>:


// @User : Stop timer3 that send data to led
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3){
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a05      	ldr	r2, [pc, #20]	@ (8002584 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d103      	bne.n	800257a <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 8002572:	2104      	movs	r1, #4
 8002574:	4804      	ldr	r0, [pc, #16]	@ (8002588 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8002576:	f002 fd5f 	bl	8005038 <HAL_TIM_PWM_Stop_DMA>
	}

}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40000400 	.word	0x40000400
 8002588:	200003c8 	.word	0x200003c8
 800258c:	00000000 	.word	0x00000000

08002590 <HAL_TIM_PeriodElapsedCallback>:

//Callback -> Timer finish
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a1d      	ldr	r2, [pc, #116]	@ (8002610 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d103      	bne.n	80025a8 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		registerFrame[0x00].U16 = 22881; //send "Ya"
 80025a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002614 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80025a2:	f645 1261 	movw	r2, #22881	@ 0x5961
 80025a6:	801a      	strh	r2, [r3, #0]
	}
	if(htim == &htim4)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002618 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d126      	bne.n	80025fe <HAL_TIM_PeriodElapsedCallback+0x6e>
	{
		qeirawread = getEncoderValue();
 80025b0:	f7ff ff9e 	bl	80024f0 <getEncoderValue>
 80025b4:	4603      	mov	r3, r0
 80025b6:	4a19      	ldr	r2, [pc, #100]	@ (800261c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80025b8:	6013      	str	r3, [r2, #0]
		spd = (qeirawread * 1000) * (60.19/8192);
 80025ba:	4b18      	ldr	r3, [pc, #96]	@ (800261c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025c2:	fb02 f303 	mul.w	r3, r2, r3
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd ff68 	bl	800049c <__aeabi_ui2d>
 80025cc:	a30e      	add	r3, pc, #56	@ (adr r3, 8002608 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	f7fd ffdd 	bl	8000590 <__aeabi_dmul>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	f7fe f9e9 	bl	80009b4 <__aeabi_d2uiz>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002620 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80025e6:	6013      	str	r3, [r2, #0]
		pos += spd;
 80025e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002624 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002620 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4413      	add	r3, r2
 80025f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002624 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80025f4:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 80025f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002628 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2200      	movs	r2, #0
 80025fc:	625a      	str	r2, [r3, #36]	@ 0x24
//		i+=1;
//		generate_Velocity();

	}

}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	eb851eb8 	.word	0xeb851eb8
 800260c:	3f7e1851 	.word	0x3f7e1851
 8002610:	20000560 	.word	0x20000560
 8002614:	20000f10 	.word	0x20000f10
 8002618:	20000494 	.word	0x20000494
 800261c:	200010f4 	.word	0x200010f4
 8002620:	200010f8 	.word	0x200010f8
 8002624:	200010fc 	.word	0x200010fc
 8002628:	200002fc 	.word	0x200002fc

0800262c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002630:	b672      	cpsid	i
}
 8002632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <Error_Handler+0x8>

08002638 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263e:	4b0f      	ldr	r3, [pc, #60]	@ (800267c <HAL_MspInit+0x44>)
 8002640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002642:	4a0e      	ldr	r2, [pc, #56]	@ (800267c <HAL_MspInit+0x44>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6613      	str	r3, [r2, #96]	@ 0x60
 800264a:	4b0c      	ldr	r3, [pc, #48]	@ (800267c <HAL_MspInit+0x44>)
 800264c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	4b09      	ldr	r3, [pc, #36]	@ (800267c <HAL_MspInit+0x44>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265a:	4a08      	ldr	r2, [pc, #32]	@ (800267c <HAL_MspInit+0x44>)
 800265c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002660:	6593      	str	r3, [r2, #88]	@ 0x58
 8002662:	4b06      	ldr	r3, [pc, #24]	@ (800267c <HAL_MspInit+0x44>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800266e:	f001 fa8b 	bl	8003b88 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000

08002680 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08e      	sub	sp, #56	@ 0x38
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a61      	ldr	r2, [pc, #388]	@ (8002824 <HAL_TIM_Base_MspInit+0x1a4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d131      	bne.n	8002706 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026a2:	4b61      	ldr	r3, [pc, #388]	@ (8002828 <HAL_TIM_Base_MspInit+0x1a8>)
 80026a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a6:	4a60      	ldr	r2, [pc, #384]	@ (8002828 <HAL_TIM_Base_MspInit+0x1a8>)
 80026a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80026ae:	4b5e      	ldr	r3, [pc, #376]	@ (8002828 <HAL_TIM_Base_MspInit+0x1a8>)
 80026b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026b6:	623b      	str	r3, [r7, #32]
 80026b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002828 <HAL_TIM_Base_MspInit+0x1a8>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026be:	4a5a      	ldr	r2, [pc, #360]	@ (8002828 <HAL_TIM_Base_MspInit+0x1a8>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026c6:	4b58      	ldr	r3, [pc, #352]	@ (8002828 <HAL_TIM_Base_MspInit+0x1a8>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026d2:	2340      	movs	r3, #64	@ 0x40
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026d6:	2312      	movs	r3, #18
 80026d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026da:	2301      	movs	r3, #1
 80026dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80026e2:	2306      	movs	r3, #6
 80026e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ea:	4619      	mov	r1, r3
 80026ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026f0:	f000 fff4 	bl	80036dc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80026f4:	2200      	movs	r2, #0
 80026f6:	2100      	movs	r1, #0
 80026f8:	2019      	movs	r0, #25
 80026fa:	f000 fc88 	bl	800300e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80026fe:	2019      	movs	r0, #25
 8002700:	f000 fc9f 	bl	8003042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002704:	e089      	b.n	800281a <HAL_TIM_Base_MspInit+0x19a>
  else if(htim_base->Instance==TIM3)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a48      	ldr	r2, [pc, #288]	@ (800282c <HAL_TIM_Base_MspInit+0x1ac>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d137      	bne.n	8002780 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002710:	4b45      	ldr	r3, [pc, #276]	@ (8002828 <HAL_TIM_Base_MspInit+0x1a8>)
 8002712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002714:	4a44      	ldr	r2, [pc, #272]	@ (8002828 <HAL_TIM_Base_MspInit+0x1a8>)
 8002716:	f043 0302 	orr.w	r3, r3, #2
 800271a:	6593      	str	r3, [r2, #88]	@ 0x58
 800271c:	4b42      	ldr	r3, [pc, #264]	@ (8002828 <HAL_TIM_Base_MspInit+0x1a8>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch2.Instance = DMA1_Channel3;
 8002728:	4b41      	ldr	r3, [pc, #260]	@ (8002830 <HAL_TIM_Base_MspInit+0x1b0>)
 800272a:	4a42      	ldr	r2, [pc, #264]	@ (8002834 <HAL_TIM_Base_MspInit+0x1b4>)
 800272c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800272e:	4b40      	ldr	r3, [pc, #256]	@ (8002830 <HAL_TIM_Base_MspInit+0x1b0>)
 8002730:	223e      	movs	r2, #62	@ 0x3e
 8002732:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002734:	4b3e      	ldr	r3, [pc, #248]	@ (8002830 <HAL_TIM_Base_MspInit+0x1b0>)
 8002736:	2210      	movs	r2, #16
 8002738:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800273a:	4b3d      	ldr	r3, [pc, #244]	@ (8002830 <HAL_TIM_Base_MspInit+0x1b0>)
 800273c:	2200      	movs	r2, #0
 800273e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002740:	4b3b      	ldr	r3, [pc, #236]	@ (8002830 <HAL_TIM_Base_MspInit+0x1b0>)
 8002742:	2280      	movs	r2, #128	@ 0x80
 8002744:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002746:	4b3a      	ldr	r3, [pc, #232]	@ (8002830 <HAL_TIM_Base_MspInit+0x1b0>)
 8002748:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800274c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800274e:	4b38      	ldr	r3, [pc, #224]	@ (8002830 <HAL_TIM_Base_MspInit+0x1b0>)
 8002750:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002754:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8002756:	4b36      	ldr	r3, [pc, #216]	@ (8002830 <HAL_TIM_Base_MspInit+0x1b0>)
 8002758:	2200      	movs	r2, #0
 800275a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800275c:	4b34      	ldr	r3, [pc, #208]	@ (8002830 <HAL_TIM_Base_MspInit+0x1b0>)
 800275e:	2200      	movs	r2, #0
 8002760:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002762:	4833      	ldr	r0, [pc, #204]	@ (8002830 <HAL_TIM_Base_MspInit+0x1b0>)
 8002764:	f000 fc88 	bl	8003078 <HAL_DMA_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_TIM_Base_MspInit+0xf2>
      Error_Handler();
 800276e:	f7ff ff5d 	bl	800262c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a2e      	ldr	r2, [pc, #184]	@ (8002830 <HAL_TIM_Base_MspInit+0x1b0>)
 8002776:	629a      	str	r2, [r3, #40]	@ 0x28
 8002778:	4a2d      	ldr	r2, [pc, #180]	@ (8002830 <HAL_TIM_Base_MspInit+0x1b0>)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800277e:	e04c      	b.n	800281a <HAL_TIM_Base_MspInit+0x19a>
  else if(htim_base->Instance==TIM4)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a2c      	ldr	r2, [pc, #176]	@ (8002838 <HAL_TIM_Base_MspInit+0x1b8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d114      	bne.n	80027b4 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800278a:	4b27      	ldr	r3, [pc, #156]	@ (8002828 <HAL_TIM_Base_MspInit+0x1a8>)
 800278c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278e:	4a26      	ldr	r2, [pc, #152]	@ (8002828 <HAL_TIM_Base_MspInit+0x1a8>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	6593      	str	r3, [r2, #88]	@ 0x58
 8002796:	4b24      	ldr	r3, [pc, #144]	@ (8002828 <HAL_TIM_Base_MspInit+0x1a8>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2100      	movs	r1, #0
 80027a6:	201e      	movs	r0, #30
 80027a8:	f000 fc31 	bl	800300e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027ac:	201e      	movs	r0, #30
 80027ae:	f000 fc48 	bl	8003042 <HAL_NVIC_EnableIRQ>
}
 80027b2:	e032      	b.n	800281a <HAL_TIM_Base_MspInit+0x19a>
  else if(htim_base->Instance==TIM5)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a20      	ldr	r2, [pc, #128]	@ (800283c <HAL_TIM_Base_MspInit+0x1bc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d114      	bne.n	80027e8 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027be:	4b1a      	ldr	r3, [pc, #104]	@ (8002828 <HAL_TIM_Base_MspInit+0x1a8>)
 80027c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c2:	4a19      	ldr	r2, [pc, #100]	@ (8002828 <HAL_TIM_Base_MspInit+0x1a8>)
 80027c4:	f043 0308 	orr.w	r3, r3, #8
 80027c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80027ca:	4b17      	ldr	r3, [pc, #92]	@ (8002828 <HAL_TIM_Base_MspInit+0x1a8>)
 80027cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	2032      	movs	r0, #50	@ 0x32
 80027dc:	f000 fc17 	bl	800300e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80027e0:	2032      	movs	r0, #50	@ 0x32
 80027e2:	f000 fc2e 	bl	8003042 <HAL_NVIC_EnableIRQ>
}
 80027e6:	e018      	b.n	800281a <HAL_TIM_Base_MspInit+0x19a>
  else if(htim_base->Instance==TIM16)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a14      	ldr	r2, [pc, #80]	@ (8002840 <HAL_TIM_Base_MspInit+0x1c0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d113      	bne.n	800281a <HAL_TIM_Base_MspInit+0x19a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80027f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002828 <HAL_TIM_Base_MspInit+0x1a8>)
 80027f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002828 <HAL_TIM_Base_MspInit+0x1a8>)
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80027fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <HAL_TIM_Base_MspInit+0x1a8>)
 8002800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	2019      	movs	r0, #25
 8002810:	f000 fbfd 	bl	800300e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002814:	2019      	movs	r0, #25
 8002816:	f000 fc14 	bl	8003042 <HAL_NVIC_EnableIRQ>
}
 800281a:	bf00      	nop
 800281c:	3738      	adds	r7, #56	@ 0x38
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40021000 	.word	0x40021000
 800282c:	40000400 	.word	0x40000400
 8002830:	200006f8 	.word	0x200006f8
 8002834:	40020030 	.word	0x40020030
 8002838:	40000800 	.word	0x40000800
 800283c:	40000c00 	.word	0x40000c00
 8002840:	40014400 	.word	0x40014400

08002844 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	@ 0x28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002864:	d128      	bne.n	80028b8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002866:	4b16      	ldr	r3, [pc, #88]	@ (80028c0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286a:	4a15      	ldr	r2, [pc, #84]	@ (80028c0 <HAL_TIM_Encoder_MspInit+0x7c>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6593      	str	r3, [r2, #88]	@ 0x58
 8002872:	4b13      	ldr	r3, [pc, #76]	@ (80028c0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002882:	4a0f      	ldr	r2, [pc, #60]	@ (80028c0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800288a:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <HAL_TIM_Encoder_MspInit+0x7c>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002896:	2322      	movs	r3, #34	@ 0x22
 8002898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028a6:	2301      	movs	r3, #1
 80028a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028aa:	f107 0314 	add.w	r3, r7, #20
 80028ae:	4619      	mov	r1, r3
 80028b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028b4:	f000 ff12 	bl	80036dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028b8:	bf00      	nop
 80028ba:	3728      	adds	r7, #40	@ 0x28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000

080028c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	@ 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a23      	ldr	r2, [pc, #140]	@ (8002970 <HAL_TIM_MspPostInit+0xac>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d11e      	bne.n	8002924 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e6:	4b23      	ldr	r3, [pc, #140]	@ (8002974 <HAL_TIM_MspPostInit+0xb0>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ea:	4a22      	ldr	r2, [pc, #136]	@ (8002974 <HAL_TIM_MspPostInit+0xb0>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028f2:	4b20      	ldr	r3, [pc, #128]	@ (8002974 <HAL_TIM_MspPostInit+0xb0>)
 80028f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002904:	2302      	movs	r3, #2
 8002906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290c:	2300      	movs	r3, #0
 800290e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002910:	2306      	movs	r3, #6
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	4619      	mov	r1, r3
 800291a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800291e:	f000 fedd 	bl	80036dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002922:	e021      	b.n	8002968 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a13      	ldr	r2, [pc, #76]	@ (8002978 <HAL_TIM_MspPostInit+0xb4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d11c      	bne.n	8002968 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292e:	4b11      	ldr	r3, [pc, #68]	@ (8002974 <HAL_TIM_MspPostInit+0xb0>)
 8002930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002932:	4a10      	ldr	r2, [pc, #64]	@ (8002974 <HAL_TIM_MspPostInit+0xb0>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800293a:	4b0e      	ldr	r3, [pc, #56]	@ (8002974 <HAL_TIM_MspPostInit+0xb0>)
 800293c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002946:	2310      	movs	r3, #16
 8002948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	2302      	movs	r3, #2
 800294c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2300      	movs	r3, #0
 8002954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002956:	2302      	movs	r3, #2
 8002958:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	4619      	mov	r1, r3
 8002960:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002964:	f000 feba 	bl	80036dc <HAL_GPIO_Init>
}
 8002968:	bf00      	nop
 800296a:	3728      	adds	r7, #40	@ 0x28
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40012c00 	.word	0x40012c00
 8002974:	40021000 	.word	0x40021000
 8002978:	40000400 	.word	0x40000400

0800297c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b0a0      	sub	sp, #128	@ 0x80
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002984:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002994:	f107 0318 	add.w	r3, r7, #24
 8002998:	2254      	movs	r2, #84	@ 0x54
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f006 fab1 	bl	8008f04 <memset>
  if(huart->Instance==USART1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a80      	ldr	r2, [pc, #512]	@ (8002ba8 <HAL_UART_MspInit+0x22c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d161      	bne.n	8002a70 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029ac:	2301      	movs	r3, #1
 80029ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029b4:	f107 0318 	add.w	r3, r7, #24
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 fe23 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029c4:	f7ff fe32 	bl	800262c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029c8:	4b78      	ldr	r3, [pc, #480]	@ (8002bac <HAL_UART_MspInit+0x230>)
 80029ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029cc:	4a77      	ldr	r2, [pc, #476]	@ (8002bac <HAL_UART_MspInit+0x230>)
 80029ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80029d4:	4b75      	ldr	r3, [pc, #468]	@ (8002bac <HAL_UART_MspInit+0x230>)
 80029d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e0:	4b72      	ldr	r3, [pc, #456]	@ (8002bac <HAL_UART_MspInit+0x230>)
 80029e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e4:	4a71      	ldr	r2, [pc, #452]	@ (8002bac <HAL_UART_MspInit+0x230>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029ec:	4b6f      	ldr	r3, [pc, #444]	@ (8002bac <HAL_UART_MspInit+0x230>)
 80029ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80029f8:	2330      	movs	r3, #48	@ 0x30
 80029fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	2302      	movs	r3, #2
 80029fe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a04:	2300      	movs	r3, #0
 8002a06:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a08:	2307      	movs	r3, #7
 8002a0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002a10:	4619      	mov	r1, r3
 8002a12:	4867      	ldr	r0, [pc, #412]	@ (8002bb0 <HAL_UART_MspInit+0x234>)
 8002a14:	f000 fe62 	bl	80036dc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel2;
 8002a18:	4b66      	ldr	r3, [pc, #408]	@ (8002bb4 <HAL_UART_MspInit+0x238>)
 8002a1a:	4a67      	ldr	r2, [pc, #412]	@ (8002bb8 <HAL_UART_MspInit+0x23c>)
 8002a1c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002a1e:	4b65      	ldr	r3, [pc, #404]	@ (8002bb4 <HAL_UART_MspInit+0x238>)
 8002a20:	2218      	movs	r2, #24
 8002a22:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a24:	4b63      	ldr	r3, [pc, #396]	@ (8002bb4 <HAL_UART_MspInit+0x238>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a2a:	4b62      	ldr	r3, [pc, #392]	@ (8002bb4 <HAL_UART_MspInit+0x238>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a30:	4b60      	ldr	r3, [pc, #384]	@ (8002bb4 <HAL_UART_MspInit+0x238>)
 8002a32:	2280      	movs	r2, #128	@ 0x80
 8002a34:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a36:	4b5f      	ldr	r3, [pc, #380]	@ (8002bb4 <HAL_UART_MspInit+0x238>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a3c:	4b5d      	ldr	r3, [pc, #372]	@ (8002bb4 <HAL_UART_MspInit+0x238>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002a42:	4b5c      	ldr	r3, [pc, #368]	@ (8002bb4 <HAL_UART_MspInit+0x238>)
 8002a44:	2220      	movs	r2, #32
 8002a46:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a48:	4b5a      	ldr	r3, [pc, #360]	@ (8002bb4 <HAL_UART_MspInit+0x238>)
 8002a4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a50:	4858      	ldr	r0, [pc, #352]	@ (8002bb4 <HAL_UART_MspInit+0x238>)
 8002a52:	f000 fb11 	bl	8003078 <HAL_DMA_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8002a5c:	f7ff fde6 	bl	800262c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a54      	ldr	r2, [pc, #336]	@ (8002bb4 <HAL_UART_MspInit+0x238>)
 8002a64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002a68:	4a52      	ldr	r2, [pc, #328]	@ (8002bb4 <HAL_UART_MspInit+0x238>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a6e:	e097      	b.n	8002ba0 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a51      	ldr	r2, [pc, #324]	@ (8002bbc <HAL_UART_MspInit+0x240>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	f040 8092 	bne.w	8002ba0 <HAL_UART_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a80:	2300      	movs	r3, #0
 8002a82:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a84:	f107 0318 	add.w	r3, r7, #24
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f001 fdbb 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8002a94:	f7ff fdca 	bl	800262c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a98:	4b44      	ldr	r3, [pc, #272]	@ (8002bac <HAL_UART_MspInit+0x230>)
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9c:	4a43      	ldr	r2, [pc, #268]	@ (8002bac <HAL_UART_MspInit+0x230>)
 8002a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aa4:	4b41      	ldr	r3, [pc, #260]	@ (8002bac <HAL_UART_MspInit+0x230>)
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8002bac <HAL_UART_MspInit+0x230>)
 8002ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab4:	4a3d      	ldr	r2, [pc, #244]	@ (8002bac <HAL_UART_MspInit+0x230>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002abc:	4b3b      	ldr	r3, [pc, #236]	@ (8002bac <HAL_UART_MspInit+0x230>)
 8002abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ac8:	230c      	movs	r3, #12
 8002aca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002acc:	2302      	movs	r3, #2
 8002ace:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ad8:	2307      	movs	r3, #7
 8002ada:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002adc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ae6:	f000 fdf9 	bl	80036dc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8002aea:	4b35      	ldr	r3, [pc, #212]	@ (8002bc0 <HAL_UART_MspInit+0x244>)
 8002aec:	4a35      	ldr	r2, [pc, #212]	@ (8002bc4 <HAL_UART_MspInit+0x248>)
 8002aee:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002af0:	4b33      	ldr	r3, [pc, #204]	@ (8002bc0 <HAL_UART_MspInit+0x244>)
 8002af2:	221a      	movs	r2, #26
 8002af4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002af6:	4b32      	ldr	r3, [pc, #200]	@ (8002bc0 <HAL_UART_MspInit+0x244>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002afc:	4b30      	ldr	r3, [pc, #192]	@ (8002bc0 <HAL_UART_MspInit+0x244>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b02:	4b2f      	ldr	r3, [pc, #188]	@ (8002bc0 <HAL_UART_MspInit+0x244>)
 8002b04:	2280      	movs	r2, #128	@ 0x80
 8002b06:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b08:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc0 <HAL_UART_MspInit+0x244>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002bc0 <HAL_UART_MspInit+0x244>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002b14:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc0 <HAL_UART_MspInit+0x244>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b1a:	4b29      	ldr	r3, [pc, #164]	@ (8002bc0 <HAL_UART_MspInit+0x244>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b20:	4827      	ldr	r0, [pc, #156]	@ (8002bc0 <HAL_UART_MspInit+0x244>)
 8002b22:	f000 faa9 	bl	8003078 <HAL_DMA_Init>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 8002b2c:	f7ff fd7e 	bl	800262c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a23      	ldr	r2, [pc, #140]	@ (8002bc0 <HAL_UART_MspInit+0x244>)
 8002b34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002b38:	4a21      	ldr	r2, [pc, #132]	@ (8002bc0 <HAL_UART_MspInit+0x244>)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8002b3e:	4b22      	ldr	r3, [pc, #136]	@ (8002bc8 <HAL_UART_MspInit+0x24c>)
 8002b40:	4a22      	ldr	r2, [pc, #136]	@ (8002bcc <HAL_UART_MspInit+0x250>)
 8002b42:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002b44:	4b20      	ldr	r3, [pc, #128]	@ (8002bc8 <HAL_UART_MspInit+0x24c>)
 8002b46:	221b      	movs	r2, #27
 8002b48:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc8 <HAL_UART_MspInit+0x24c>)
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b50:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc8 <HAL_UART_MspInit+0x24c>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b56:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <HAL_UART_MspInit+0x24c>)
 8002b58:	2280      	movs	r2, #128	@ 0x80
 8002b5a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc8 <HAL_UART_MspInit+0x24c>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b62:	4b19      	ldr	r3, [pc, #100]	@ (8002bc8 <HAL_UART_MspInit+0x24c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002b68:	4b17      	ldr	r3, [pc, #92]	@ (8002bc8 <HAL_UART_MspInit+0x24c>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b6e:	4b16      	ldr	r3, [pc, #88]	@ (8002bc8 <HAL_UART_MspInit+0x24c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b74:	4814      	ldr	r0, [pc, #80]	@ (8002bc8 <HAL_UART_MspInit+0x24c>)
 8002b76:	f000 fa7f 	bl	8003078 <HAL_DMA_Init>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8002b80:	f7ff fd54 	bl	800262c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a10      	ldr	r2, [pc, #64]	@ (8002bc8 <HAL_UART_MspInit+0x24c>)
 8002b88:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002b8a:	4a0f      	ldr	r2, [pc, #60]	@ (8002bc8 <HAL_UART_MspInit+0x24c>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b90:	2200      	movs	r2, #0
 8002b92:	2100      	movs	r1, #0
 8002b94:	2026      	movs	r0, #38	@ 0x26
 8002b96:	f000 fa3a 	bl	800300e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b9a:	2026      	movs	r0, #38	@ 0x26
 8002b9c:	f000 fa51 	bl	8003042 <HAL_NVIC_EnableIRQ>
}
 8002ba0:	bf00      	nop
 8002ba2:	3780      	adds	r7, #128	@ 0x80
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40013800 	.word	0x40013800
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	48000800 	.word	0x48000800
 8002bb4:	200008f0 	.word	0x200008f0
 8002bb8:	4002041c 	.word	0x4002041c
 8002bbc:	40004400 	.word	0x40004400
 8002bc0:	20000950 	.word	0x20000950
 8002bc4:	4002001c 	.word	0x4002001c
 8002bc8:	200009b0 	.word	0x200009b0
 8002bcc:	40020008 	.word	0x40020008

08002bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <NMI_Handler+0x4>

08002bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <HardFault_Handler+0x4>

08002be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be4:	bf00      	nop
 8002be6:	e7fd      	b.n	8002be4 <MemManage_Handler+0x4>

08002be8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bec:	bf00      	nop
 8002bee:	e7fd      	b.n	8002bec <BusFault_Handler+0x4>

08002bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf4:	bf00      	nop
 8002bf6:	e7fd      	b.n	8002bf4 <UsageFault_Handler+0x4>

08002bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c26:	f000 f8f9 	bl	8002e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002c34:	4802      	ldr	r0, [pc, #8]	@ (8002c40 <DMA1_Channel1_IRQHandler+0x10>)
 8002c36:	f000 fc02 	bl	800343e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200009b0 	.word	0x200009b0

08002c44 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002c48:	4802      	ldr	r0, [pc, #8]	@ (8002c54 <DMA1_Channel2_IRQHandler+0x10>)
 8002c4a:	f000 fbf8 	bl	800343e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000950 	.word	0x20000950

08002c58 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8002c5c:	4802      	ldr	r0, [pc, #8]	@ (8002c68 <DMA1_Channel3_IRQHandler+0x10>)
 8002c5e:	f000 fbee 	bl	800343e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200006f8 	.word	0x200006f8

08002c6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002c70:	2020      	movs	r0, #32
 8002c72:	f000 fecd 	bl	8003a10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c80:	4803      	ldr	r0, [pc, #12]	@ (8002c90 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002c82:	f002 fd0f 	bl	80056a4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002c86:	4803      	ldr	r0, [pc, #12]	@ (8002c94 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002c88:	f002 fd0c 	bl	80056a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000230 	.word	0x20000230
 8002c94:	2000062c 	.word	0x2000062c

08002c98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c9c:	4802      	ldr	r0, [pc, #8]	@ (8002ca8 <TIM4_IRQHandler+0x10>)
 8002c9e:	f002 fd01 	bl	80056a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000494 	.word	0x20000494

08002cac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002cb0:	4802      	ldr	r0, [pc, #8]	@ (8002cbc <USART2_IRQHandler+0x10>)
 8002cb2:	f004 fbe3 	bl	800747c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000824 	.word	0x20000824

08002cc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002cc4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002cc8:	f000 fea2 	bl	8003a10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002ccc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002cd0:	f000 fe9e 	bl	8003a10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002cdc:	4802      	ldr	r0, [pc, #8]	@ (8002ce8 <TIM5_IRQHandler+0x10>)
 8002cde:	f002 fce1 	bl	80056a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000560 	.word	0x20000560

08002cec <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002cf0:	4802      	ldr	r0, [pc, #8]	@ (8002cfc <DMA2_Channel2_IRQHandler+0x10>)
 8002cf2:	f000 fba4 	bl	800343e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200008f0 	.word	0x200008f0

08002d00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d04:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <SystemInit+0x20>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0a:	4a05      	ldr	r2, [pc, #20]	@ (8002d20 <SystemInit+0x20>)
 8002d0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d24:	480d      	ldr	r0, [pc, #52]	@ (8002d5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d28:	f7ff ffea 	bl	8002d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d2c:	480c      	ldr	r0, [pc, #48]	@ (8002d60 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d2e:	490d      	ldr	r1, [pc, #52]	@ (8002d64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d30:	4a0d      	ldr	r2, [pc, #52]	@ (8002d68 <LoopForever+0xe>)
  movs r3, #0
 8002d32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002d34:	e002      	b.n	8002d3c <LoopCopyDataInit>

08002d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d3a:	3304      	adds	r3, #4

08002d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d40:	d3f9      	bcc.n	8002d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d42:	4a0a      	ldr	r2, [pc, #40]	@ (8002d6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d44:	4c0a      	ldr	r4, [pc, #40]	@ (8002d70 <LoopForever+0x16>)
  movs r3, #0
 8002d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d48:	e001      	b.n	8002d4e <LoopFillZerobss>

08002d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d4c:	3204      	adds	r2, #4

08002d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d50:	d3fb      	bcc.n	8002d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d52:	f006 f8df 	bl	8008f14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d56:	f7fe fb4b 	bl	80013f0 <main>

08002d5a <LoopForever>:

LoopForever:
    b LoopForever
 8002d5a:	e7fe      	b.n	8002d5a <LoopForever>
  ldr   r0, =_estack
 8002d5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d64:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002d68:	08008fe0 	.word	0x08008fe0
  ldr r2, =_sbss
 8002d6c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002d70:	20001114 	.word	0x20001114

08002d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d74:	e7fe      	b.n	8002d74 <ADC1_2_IRQHandler>

08002d76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d80:	2003      	movs	r0, #3
 8002d82:	f000 f939 	bl	8002ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d86:	2000      	movs	r0, #0
 8002d88:	f000 f80e 	bl	8002da8 <HAL_InitTick>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	71fb      	strb	r3, [r7, #7]
 8002d96:	e001      	b.n	8002d9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d98:	f7ff fc4e 	bl	8002638 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d9c:	79fb      	ldrb	r3, [r7, #7]

}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002db4:	4b16      	ldr	r3, [pc, #88]	@ (8002e10 <HAL_InitTick+0x68>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d022      	beq.n	8002e02 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002dbc:	4b15      	ldr	r3, [pc, #84]	@ (8002e14 <HAL_InitTick+0x6c>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b13      	ldr	r3, [pc, #76]	@ (8002e10 <HAL_InitTick+0x68>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002dc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 f944 	bl	800305e <HAL_SYSTICK_Config>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10f      	bne.n	8002dfc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b0f      	cmp	r3, #15
 8002de0:	d809      	bhi.n	8002df6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de2:	2200      	movs	r2, #0
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dea:	f000 f910 	bl	800300e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dee:	4a0a      	ldr	r2, [pc, #40]	@ (8002e18 <HAL_InitTick+0x70>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	e007      	b.n	8002e06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
 8002dfa:	e004      	b.n	8002e06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	e001      	b.n	8002e06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20000208 	.word	0x20000208
 8002e14:	20000200 	.word	0x20000200
 8002e18:	20000204 	.word	0x20000204

08002e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e20:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <HAL_IncTick+0x1c>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b05      	ldr	r3, [pc, #20]	@ (8002e3c <HAL_IncTick+0x20>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4413      	add	r3, r2
 8002e2a:	4a03      	ldr	r2, [pc, #12]	@ (8002e38 <HAL_IncTick+0x1c>)
 8002e2c:	6013      	str	r3, [r2, #0]
}
 8002e2e:	bf00      	nop
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	20001110 	.word	0x20001110
 8002e3c:	20000208 	.word	0x20000208

08002e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return uwTick;
 8002e44:	4b03      	ldr	r3, [pc, #12]	@ (8002e54 <HAL_GetTick+0x14>)
 8002e46:	681b      	ldr	r3, [r3, #0]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20001110 	.word	0x20001110

08002e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e68:	4b0c      	ldr	r3, [pc, #48]	@ (8002e9c <__NVIC_SetPriorityGrouping+0x44>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e74:	4013      	ands	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e8a:	4a04      	ldr	r2, [pc, #16]	@ (8002e9c <__NVIC_SetPriorityGrouping+0x44>)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	60d3      	str	r3, [r2, #12]
}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea4:	4b04      	ldr	r3, [pc, #16]	@ (8002eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	f003 0307 	and.w	r3, r3, #7
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	db0b      	blt.n	8002ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	f003 021f 	and.w	r2, r3, #31
 8002ed4:	4907      	ldr	r1, [pc, #28]	@ (8002ef4 <__NVIC_EnableIRQ+0x38>)
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	2001      	movs	r0, #1
 8002ede:	fa00 f202 	lsl.w	r2, r0, r2
 8002ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	e000e100 	.word	0xe000e100

08002ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	6039      	str	r1, [r7, #0]
 8002f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	db0a      	blt.n	8002f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	490c      	ldr	r1, [pc, #48]	@ (8002f44 <__NVIC_SetPriority+0x4c>)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	0112      	lsls	r2, r2, #4
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f20:	e00a      	b.n	8002f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4908      	ldr	r1, [pc, #32]	@ (8002f48 <__NVIC_SetPriority+0x50>)
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	3b04      	subs	r3, #4
 8002f30:	0112      	lsls	r2, r2, #4
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	440b      	add	r3, r1
 8002f36:	761a      	strb	r2, [r3, #24]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000e100 	.word	0xe000e100
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	@ 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f1c3 0307 	rsb	r3, r3, #7
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	bf28      	it	cs
 8002f6a:	2304      	movcs	r3, #4
 8002f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3304      	adds	r3, #4
 8002f72:	2b06      	cmp	r3, #6
 8002f74:	d902      	bls.n	8002f7c <NVIC_EncodePriority+0x30>
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3b03      	subs	r3, #3
 8002f7a:	e000      	b.n	8002f7e <NVIC_EncodePriority+0x32>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f80:	f04f 32ff 	mov.w	r2, #4294967295
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	401a      	ands	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f94:	f04f 31ff 	mov.w	r1, #4294967295
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9e:	43d9      	mvns	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa4:	4313      	orrs	r3, r2
         );
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3724      	adds	r7, #36	@ 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fc4:	d301      	bcc.n	8002fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e00f      	b.n	8002fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fca:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff4 <SysTick_Config+0x40>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fd2:	210f      	movs	r1, #15
 8002fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd8:	f7ff ff8e 	bl	8002ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fdc:	4b05      	ldr	r3, [pc, #20]	@ (8002ff4 <SysTick_Config+0x40>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fe2:	4b04      	ldr	r3, [pc, #16]	@ (8002ff4 <SysTick_Config+0x40>)
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	e000e010 	.word	0xe000e010

08002ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ff29 	bl	8002e58 <__NVIC_SetPriorityGrouping>
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b086      	sub	sp, #24
 8003012:	af00      	add	r7, sp, #0
 8003014:	4603      	mov	r3, r0
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800301c:	f7ff ff40 	bl	8002ea0 <__NVIC_GetPriorityGrouping>
 8003020:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	6978      	ldr	r0, [r7, #20]
 8003028:	f7ff ff90 	bl	8002f4c <NVIC_EncodePriority>
 800302c:	4602      	mov	r2, r0
 800302e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff5f 	bl	8002ef8 <__NVIC_SetPriority>
}
 800303a:	bf00      	nop
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	4603      	mov	r3, r0
 800304a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800304c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ff33 	bl	8002ebc <__NVIC_EnableIRQ>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff ffa4 	bl	8002fb4 <SysTick_Config>
 800306c:	4603      	mov	r3, r0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e08d      	b.n	80031a6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	4b47      	ldr	r3, [pc, #284]	@ (80031b0 <HAL_DMA_Init+0x138>)
 8003092:	429a      	cmp	r2, r3
 8003094:	d80f      	bhi.n	80030b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	4b45      	ldr	r3, [pc, #276]	@ (80031b4 <HAL_DMA_Init+0x13c>)
 800309e:	4413      	add	r3, r2
 80030a0:	4a45      	ldr	r2, [pc, #276]	@ (80031b8 <HAL_DMA_Init+0x140>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	091b      	lsrs	r3, r3, #4
 80030a8:	009a      	lsls	r2, r3, #2
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a42      	ldr	r2, [pc, #264]	@ (80031bc <HAL_DMA_Init+0x144>)
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80030b4:	e00e      	b.n	80030d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b40      	ldr	r3, [pc, #256]	@ (80031c0 <HAL_DMA_Init+0x148>)
 80030be:	4413      	add	r3, r2
 80030c0:	4a3d      	ldr	r2, [pc, #244]	@ (80031b8 <HAL_DMA_Init+0x140>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	009a      	lsls	r2, r3, #2
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a3c      	ldr	r2, [pc, #240]	@ (80031c4 <HAL_DMA_Init+0x14c>)
 80030d2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80030ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80030f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003104:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003110:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fa76 	bl	8003618 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003134:	d102      	bne.n	800313c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003150:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d010      	beq.n	800317c <HAL_DMA_Init+0x104>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b04      	cmp	r3, #4
 8003160:	d80c      	bhi.n	800317c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fa96 	bl	8003694 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	e008      	b.n	800318e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40020407 	.word	0x40020407
 80031b4:	bffdfff8 	.word	0xbffdfff8
 80031b8:	cccccccd 	.word	0xcccccccd
 80031bc:	40020000 	.word	0x40020000
 80031c0:	bffdfbf8 	.word	0xbffdfbf8
 80031c4:	40020400 	.word	0x40020400

080031c8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_DMA_Start_IT+0x20>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e066      	b.n	80032b6 <HAL_DMA_Start_IT+0xee>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d155      	bne.n	80032a8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0201 	bic.w	r2, r2, #1
 8003218:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f9bb 	bl	800359c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	2b00      	cmp	r3, #0
 800322c:	d008      	beq.n	8003240 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 020e 	orr.w	r2, r2, #14
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	e00f      	b.n	8003260 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0204 	bic.w	r2, r2, #4
 800324e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 020a 	orr.w	r2, r2, #10
 800325e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003278:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800327c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003290:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003294:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	e005      	b.n	80032b4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
 80032b2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032be:	b480      	push	{r7}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d005      	beq.n	80032e2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2204      	movs	r2, #4
 80032da:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
 80032e0:	e037      	b.n	8003352 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 020e 	bic.w	r2, r2, #14
 80032f0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003300:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0201 	bic.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003316:	f003 021f 	and.w	r2, r3, #31
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	2101      	movs	r1, #1
 8003320:	fa01 f202 	lsl.w	r2, r1, r2
 8003324:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800332e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00c      	beq.n	8003352 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003342:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003346:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003350:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003362:	7bfb      	ldrb	r3, [r7, #15]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d00d      	beq.n	80033a4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2204      	movs	r2, #4
 800338c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	73fb      	strb	r3, [r7, #15]
 80033a2:	e047      	b.n	8003434 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 020e 	bic.w	r2, r2, #14
 80033b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0201 	bic.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d8:	f003 021f 	and.w	r2, r3, #31
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	2101      	movs	r1, #1
 80033e2:	fa01 f202 	lsl.w	r2, r1, r2
 80033e6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80033f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00c      	beq.n	8003414 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003404:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003408:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003412:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	4798      	blx	r3
    }
  }
  return status;
 8003434:	7bfb      	ldrb	r3, [r7, #15]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	f003 031f 	and.w	r3, r3, #31
 800345e:	2204      	movs	r2, #4
 8003460:	409a      	lsls	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d026      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x7a>
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d021      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b00      	cmp	r3, #0
 8003480:	d107      	bne.n	8003492 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0204 	bic.w	r2, r2, #4
 8003490:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003496:	f003 021f 	and.w	r2, r3, #31
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	2104      	movs	r1, #4
 80034a0:	fa01 f202 	lsl.w	r2, r1, r2
 80034a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d071      	beq.n	8003592 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80034b6:	e06c      	b.n	8003592 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	2202      	movs	r2, #2
 80034c2:	409a      	lsls	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d02e      	beq.n	800352a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d029      	beq.n	800352a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0320 	and.w	r3, r3, #32
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10b      	bne.n	80034fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 020a 	bic.w	r2, r2, #10
 80034f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003500:	f003 021f 	and.w	r2, r3, #31
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003508:	2102      	movs	r1, #2
 800350a:	fa01 f202 	lsl.w	r2, r1, r2
 800350e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d038      	beq.n	8003592 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003528:	e033      	b.n	8003592 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	2208      	movs	r2, #8
 8003534:	409a      	lsls	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4013      	ands	r3, r2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d02a      	beq.n	8003594 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d025      	beq.n	8003594 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 020e 	bic.w	r2, r2, #14
 8003556:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355c:	f003 021f 	and.w	r2, r3, #31
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f202 	lsl.w	r2, r1, r2
 800356a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003586:	2b00      	cmp	r3, #0
 8003588:	d004      	beq.n	8003594 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003592:	bf00      	nop
 8003594:	bf00      	nop
}
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035b2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d004      	beq.n	80035c6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80035c4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	f003 021f 	and.w	r2, r3, #31
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	2101      	movs	r1, #1
 80035d4:	fa01 f202 	lsl.w	r2, r1, r2
 80035d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d108      	bne.n	80035fc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035fa:	e007      	b.n	800360c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	60da      	str	r2, [r3, #12]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	461a      	mov	r2, r3
 8003626:	4b16      	ldr	r3, [pc, #88]	@ (8003680 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003628:	429a      	cmp	r2, r3
 800362a:	d802      	bhi.n	8003632 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800362c:	4b15      	ldr	r3, [pc, #84]	@ (8003684 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	e001      	b.n	8003636 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003632:	4b15      	ldr	r3, [pc, #84]	@ (8003688 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003634:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	3b08      	subs	r3, #8
 8003642:	4a12      	ldr	r2, [pc, #72]	@ (800368c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003650:	089b      	lsrs	r3, r3, #2
 8003652:	009a      	lsls	r2, r3, #2
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4413      	add	r3, r2
 8003658:	461a      	mov	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a0b      	ldr	r2, [pc, #44]	@ (8003690 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003662:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	2201      	movs	r2, #1
 800366c:	409a      	lsls	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40020407 	.word	0x40020407
 8003684:	40020800 	.word	0x40020800
 8003688:	40020820 	.word	0x40020820
 800368c:	cccccccd 	.word	0xcccccccd
 8003690:	40020880 	.word	0x40020880

08003694 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	461a      	mov	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a08      	ldr	r2, [pc, #32]	@ (80036d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80036b6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	2201      	movs	r2, #1
 80036c2:	409a      	lsls	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80036c8:	bf00      	nop
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	1000823f 	.word	0x1000823f
 80036d8:	40020940 	.word	0x40020940

080036dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80036ea:	e15a      	b.n	80039a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	2101      	movs	r1, #1
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	fa01 f303 	lsl.w	r3, r1, r3
 80036f8:	4013      	ands	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 814c 	beq.w	800399c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	2b01      	cmp	r3, #1
 800370e:	d005      	beq.n	800371c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003718:	2b02      	cmp	r3, #2
 800371a:	d130      	bne.n	800377e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	2203      	movs	r2, #3
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	43db      	mvns	r3, r3
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4013      	ands	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003752:	2201      	movs	r2, #1
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4013      	ands	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	091b      	lsrs	r3, r3, #4
 8003768:	f003 0201 	and.w	r2, r3, #1
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	2b03      	cmp	r3, #3
 8003788:	d017      	beq.n	80037ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	2203      	movs	r2, #3
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4013      	ands	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d123      	bne.n	800380e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	08da      	lsrs	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3208      	adds	r2, #8
 80037ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	220f      	movs	r2, #15
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4013      	ands	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	08da      	lsrs	r2, r3, #3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3208      	adds	r2, #8
 8003808:	6939      	ldr	r1, [r7, #16]
 800380a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	2203      	movs	r2, #3
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4013      	ands	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 0203 	and.w	r2, r3, #3
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 80a6 	beq.w	800399c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003850:	4b5b      	ldr	r3, [pc, #364]	@ (80039c0 <HAL_GPIO_Init+0x2e4>)
 8003852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003854:	4a5a      	ldr	r2, [pc, #360]	@ (80039c0 <HAL_GPIO_Init+0x2e4>)
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6613      	str	r3, [r2, #96]	@ 0x60
 800385c:	4b58      	ldr	r3, [pc, #352]	@ (80039c0 <HAL_GPIO_Init+0x2e4>)
 800385e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003868:	4a56      	ldr	r2, [pc, #344]	@ (80039c4 <HAL_GPIO_Init+0x2e8>)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	089b      	lsrs	r3, r3, #2
 800386e:	3302      	adds	r3, #2
 8003870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003874:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	220f      	movs	r2, #15
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4013      	ands	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003892:	d01f      	beq.n	80038d4 <HAL_GPIO_Init+0x1f8>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a4c      	ldr	r2, [pc, #304]	@ (80039c8 <HAL_GPIO_Init+0x2ec>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d019      	beq.n	80038d0 <HAL_GPIO_Init+0x1f4>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a4b      	ldr	r2, [pc, #300]	@ (80039cc <HAL_GPIO_Init+0x2f0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d013      	beq.n	80038cc <HAL_GPIO_Init+0x1f0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a4a      	ldr	r2, [pc, #296]	@ (80039d0 <HAL_GPIO_Init+0x2f4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00d      	beq.n	80038c8 <HAL_GPIO_Init+0x1ec>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a49      	ldr	r2, [pc, #292]	@ (80039d4 <HAL_GPIO_Init+0x2f8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d007      	beq.n	80038c4 <HAL_GPIO_Init+0x1e8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a48      	ldr	r2, [pc, #288]	@ (80039d8 <HAL_GPIO_Init+0x2fc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d101      	bne.n	80038c0 <HAL_GPIO_Init+0x1e4>
 80038bc:	2305      	movs	r3, #5
 80038be:	e00a      	b.n	80038d6 <HAL_GPIO_Init+0x1fa>
 80038c0:	2306      	movs	r3, #6
 80038c2:	e008      	b.n	80038d6 <HAL_GPIO_Init+0x1fa>
 80038c4:	2304      	movs	r3, #4
 80038c6:	e006      	b.n	80038d6 <HAL_GPIO_Init+0x1fa>
 80038c8:	2303      	movs	r3, #3
 80038ca:	e004      	b.n	80038d6 <HAL_GPIO_Init+0x1fa>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e002      	b.n	80038d6 <HAL_GPIO_Init+0x1fa>
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <HAL_GPIO_Init+0x1fa>
 80038d4:	2300      	movs	r3, #0
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	f002 0203 	and.w	r2, r2, #3
 80038dc:	0092      	lsls	r2, r2, #2
 80038de:	4093      	lsls	r3, r2
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038e6:	4937      	ldr	r1, [pc, #220]	@ (80039c4 <HAL_GPIO_Init+0x2e8>)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	089b      	lsrs	r3, r3, #2
 80038ec:	3302      	adds	r3, #2
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038f4:	4b39      	ldr	r3, [pc, #228]	@ (80039dc <HAL_GPIO_Init+0x300>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003918:	4a30      	ldr	r2, [pc, #192]	@ (80039dc <HAL_GPIO_Init+0x300>)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800391e:	4b2f      	ldr	r3, [pc, #188]	@ (80039dc <HAL_GPIO_Init+0x300>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	43db      	mvns	r3, r3
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4013      	ands	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003942:	4a26      	ldr	r2, [pc, #152]	@ (80039dc <HAL_GPIO_Init+0x300>)
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003948:	4b24      	ldr	r3, [pc, #144]	@ (80039dc <HAL_GPIO_Init+0x300>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	43db      	mvns	r3, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4013      	ands	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800396c:	4a1b      	ldr	r2, [pc, #108]	@ (80039dc <HAL_GPIO_Init+0x300>)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003972:	4b1a      	ldr	r3, [pc, #104]	@ (80039dc <HAL_GPIO_Init+0x300>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	43db      	mvns	r3, r3
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4013      	ands	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003996:	4a11      	ldr	r2, [pc, #68]	@ (80039dc <HAL_GPIO_Init+0x300>)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	3301      	adds	r3, #1
 80039a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f47f ae9d 	bne.w	80036ec <HAL_GPIO_Init+0x10>
  }
}
 80039b2:	bf00      	nop
 80039b4:	bf00      	nop
 80039b6:	371c      	adds	r7, #28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	40021000 	.word	0x40021000
 80039c4:	40010000 	.word	0x40010000
 80039c8:	48000400 	.word	0x48000400
 80039cc:	48000800 	.word	0x48000800
 80039d0:	48000c00 	.word	0x48000c00
 80039d4:	48001000 	.word	0x48001000
 80039d8:	48001400 	.word	0x48001400
 80039dc:	40010400 	.word	0x40010400

080039e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	807b      	strh	r3, [r7, #2]
 80039ec:	4613      	mov	r3, r2
 80039ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039f0:	787b      	ldrb	r3, [r7, #1]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039f6:	887a      	ldrh	r2, [r7, #2]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039fc:	e002      	b.n	8003a04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039fe:	887a      	ldrh	r2, [r7, #2]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a1a:	4b08      	ldr	r3, [pc, #32]	@ (8003a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a1c:	695a      	ldr	r2, [r3, #20]
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d006      	beq.n	8003a34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a26:	4a05      	ldr	r2, [pc, #20]	@ (8003a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a2c:	88fb      	ldrh	r3, [r7, #6]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe fd6a 	bl	8002508 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40010400 	.word	0x40010400

08003a40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d141      	bne.n	8003ad2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a4e:	4b4b      	ldr	r3, [pc, #300]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a5a:	d131      	bne.n	8003ac0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a5c:	4b47      	ldr	r3, [pc, #284]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a62:	4a46      	ldr	r2, [pc, #280]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a6c:	4b43      	ldr	r3, [pc, #268]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a74:	4a41      	ldr	r2, [pc, #260]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a7c:	4b40      	ldr	r3, [pc, #256]	@ (8003b80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2232      	movs	r2, #50	@ 0x32
 8003a82:	fb02 f303 	mul.w	r3, r2, r3
 8003a86:	4a3f      	ldr	r2, [pc, #252]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	0c9b      	lsrs	r3, r3, #18
 8003a8e:	3301      	adds	r3, #1
 8003a90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a92:	e002      	b.n	8003a9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a9a:	4b38      	ldr	r3, [pc, #224]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa6:	d102      	bne.n	8003aae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f2      	bne.n	8003a94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aae:	4b33      	ldr	r3, [pc, #204]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aba:	d158      	bne.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e057      	b.n	8003b70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ac6:	4a2d      	ldr	r2, [pc, #180]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003acc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ad0:	e04d      	b.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ad8:	d141      	bne.n	8003b5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ada:	4b28      	ldr	r3, [pc, #160]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ae6:	d131      	bne.n	8003b4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ae8:	4b24      	ldr	r3, [pc, #144]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aee:	4a23      	ldr	r2, [pc, #140]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003af8:	4b20      	ldr	r3, [pc, #128]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b00:	4a1e      	ldr	r2, [pc, #120]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b08:	4b1d      	ldr	r3, [pc, #116]	@ (8003b80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2232      	movs	r2, #50	@ 0x32
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	4a1c      	ldr	r2, [pc, #112]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	0c9b      	lsrs	r3, r3, #18
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b1e:	e002      	b.n	8003b26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b26:	4b15      	ldr	r3, [pc, #84]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b32:	d102      	bne.n	8003b3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f2      	bne.n	8003b20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b3a:	4b10      	ldr	r3, [pc, #64]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b46:	d112      	bne.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e011      	b.n	8003b70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b52:	4a0a      	ldr	r2, [pc, #40]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b5c:	e007      	b.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b5e:	4b07      	ldr	r3, [pc, #28]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b66:	4a05      	ldr	r2, [pc, #20]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40007000 	.word	0x40007000
 8003b80:	20000200 	.word	0x20000200
 8003b84:	431bde83 	.word	0x431bde83

08003b88 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003b8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	4a04      	ldr	r2, [pc, #16]	@ (8003ba4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b96:	6093      	str	r3, [r2, #8]
}
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40007000 	.word	0x40007000

08003ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e2fe      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d075      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bc6:	4b97      	ldr	r3, [pc, #604]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bd0:	4b94      	ldr	r3, [pc, #592]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	2b0c      	cmp	r3, #12
 8003bde:	d102      	bne.n	8003be6 <HAL_RCC_OscConfig+0x3e>
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d002      	beq.n	8003bec <HAL_RCC_OscConfig+0x44>
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d10b      	bne.n	8003c04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bec:	4b8d      	ldr	r3, [pc, #564]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d05b      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x108>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d157      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e2d9      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c0c:	d106      	bne.n	8003c1c <HAL_RCC_OscConfig+0x74>
 8003c0e:	4b85      	ldr	r3, [pc, #532]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a84      	ldr	r2, [pc, #528]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e01d      	b.n	8003c58 <HAL_RCC_OscConfig+0xb0>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c24:	d10c      	bne.n	8003c40 <HAL_RCC_OscConfig+0x98>
 8003c26:	4b7f      	ldr	r3, [pc, #508]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	4b7c      	ldr	r3, [pc, #496]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a7b      	ldr	r2, [pc, #492]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e00b      	b.n	8003c58 <HAL_RCC_OscConfig+0xb0>
 8003c40:	4b78      	ldr	r3, [pc, #480]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a77      	ldr	r2, [pc, #476]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	4b75      	ldr	r3, [pc, #468]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a74      	ldr	r2, [pc, #464]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d013      	beq.n	8003c88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c60:	f7ff f8ee 	bl	8002e40 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c68:	f7ff f8ea 	bl	8002e40 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b64      	cmp	r3, #100	@ 0x64
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e29e      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0xc0>
 8003c86:	e014      	b.n	8003cb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7ff f8da 	bl	8002e40 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c90:	f7ff f8d6 	bl	8002e40 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	@ 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e28a      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ca2:	4b60      	ldr	r3, [pc, #384]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f0      	bne.n	8003c90 <HAL_RCC_OscConfig+0xe8>
 8003cae:	e000      	b.n	8003cb2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d075      	beq.n	8003daa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cbe:	4b59      	ldr	r3, [pc, #356]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
 8003cc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cc8:	4b56      	ldr	r3, [pc, #344]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b0c      	cmp	r3, #12
 8003cd6:	d102      	bne.n	8003cde <HAL_RCC_OscConfig+0x136>
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d002      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x13c>
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d11f      	bne.n	8003d24 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ce4:	4b4f      	ldr	r3, [pc, #316]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_OscConfig+0x154>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e25d      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfc:	4b49      	ldr	r3, [pc, #292]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	061b      	lsls	r3, r3, #24
 8003d0a:	4946      	ldr	r1, [pc, #280]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d10:	4b45      	ldr	r3, [pc, #276]	@ (8003e28 <HAL_RCC_OscConfig+0x280>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff f847 	bl	8002da8 <HAL_InitTick>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d043      	beq.n	8003da8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e249      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d023      	beq.n	8003d74 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d2c:	4b3d      	ldr	r3, [pc, #244]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a3c      	ldr	r2, [pc, #240]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d38:	f7ff f882 	bl	8002e40 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d40:	f7ff f87e 	bl	8002e40 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e232      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d52:	4b34      	ldr	r3, [pc, #208]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d5e:	4b31      	ldr	r3, [pc, #196]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	061b      	lsls	r3, r3, #24
 8003d6c:	492d      	ldr	r1, [pc, #180]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	604b      	str	r3, [r1, #4]
 8003d72:	e01a      	b.n	8003daa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d74:	4b2b      	ldr	r3, [pc, #172]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2a      	ldr	r2, [pc, #168]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003d7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7ff f85e 	bl	8002e40 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d88:	f7ff f85a 	bl	8002e40 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e20e      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d9a:	4b22      	ldr	r3, [pc, #136]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x1e0>
 8003da6:	e000      	b.n	8003daa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003da8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d041      	beq.n	8003e3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d01c      	beq.n	8003df8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dbe:	4b19      	ldr	r3, [pc, #100]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dc4:	4a17      	ldr	r2, [pc, #92]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dce:	f7ff f837 	bl	8002e40 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd6:	f7ff f833 	bl	8002e40 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e1e7      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003de8:	4b0e      	ldr	r3, [pc, #56]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0ef      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x22e>
 8003df6:	e020      	b.n	8003e3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df8:	4b0a      	ldr	r3, [pc, #40]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dfe:	4a09      	ldr	r2, [pc, #36]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e08:	f7ff f81a 	bl	8002e40 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e0e:	e00d      	b.n	8003e2c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e10:	f7ff f816 	bl	8002e40 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d906      	bls.n	8003e2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e1ca      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000
 8003e28:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e2c:	4b8c      	ldr	r3, [pc, #560]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1ea      	bne.n	8003e10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 80a6 	beq.w	8003f94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e4c:	4b84      	ldr	r3, [pc, #528]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_OscConfig+0x2b4>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <HAL_RCC_OscConfig+0x2b6>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00d      	beq.n	8003e7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e62:	4b7f      	ldr	r3, [pc, #508]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e66:	4a7e      	ldr	r2, [pc, #504]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e6e:	4b7c      	ldr	r3, [pc, #496]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e7e:	4b79      	ldr	r3, [pc, #484]	@ (8004064 <HAL_RCC_OscConfig+0x4bc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d118      	bne.n	8003ebc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e8a:	4b76      	ldr	r3, [pc, #472]	@ (8004064 <HAL_RCC_OscConfig+0x4bc>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a75      	ldr	r2, [pc, #468]	@ (8004064 <HAL_RCC_OscConfig+0x4bc>)
 8003e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e96:	f7fe ffd3 	bl	8002e40 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9e:	f7fe ffcf 	bl	8002e40 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e183      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eb0:	4b6c      	ldr	r3, [pc, #432]	@ (8004064 <HAL_RCC_OscConfig+0x4bc>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d108      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x32e>
 8003ec4:	4b66      	ldr	r3, [pc, #408]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eca:	4a65      	ldr	r2, [pc, #404]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ed4:	e024      	b.n	8003f20 <HAL_RCC_OscConfig+0x378>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b05      	cmp	r3, #5
 8003edc:	d110      	bne.n	8003f00 <HAL_RCC_OscConfig+0x358>
 8003ede:	4b60      	ldr	r3, [pc, #384]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee4:	4a5e      	ldr	r2, [pc, #376]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003ee6:	f043 0304 	orr.w	r3, r3, #4
 8003eea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003eee:	4b5c      	ldr	r3, [pc, #368]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef4:	4a5a      	ldr	r2, [pc, #360]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003efe:	e00f      	b.n	8003f20 <HAL_RCC_OscConfig+0x378>
 8003f00:	4b57      	ldr	r3, [pc, #348]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f06:	4a56      	ldr	r2, [pc, #344]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f10:	4b53      	ldr	r3, [pc, #332]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f16:	4a52      	ldr	r2, [pc, #328]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003f18:	f023 0304 	bic.w	r3, r3, #4
 8003f1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d016      	beq.n	8003f56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f28:	f7fe ff8a 	bl	8002e40 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f2e:	e00a      	b.n	8003f46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f30:	f7fe ff86 	bl	8002e40 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e138      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f46:	4b46      	ldr	r3, [pc, #280]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0ed      	beq.n	8003f30 <HAL_RCC_OscConfig+0x388>
 8003f54:	e015      	b.n	8003f82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f56:	f7fe ff73 	bl	8002e40 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f5c:	e00a      	b.n	8003f74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5e:	f7fe ff6f 	bl	8002e40 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e121      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f74:	4b3a      	ldr	r3, [pc, #232]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1ed      	bne.n	8003f5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f82:	7ffb      	ldrb	r3, [r7, #31]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d105      	bne.n	8003f94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f88:	4b35      	ldr	r3, [pc, #212]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8c:	4a34      	ldr	r2, [pc, #208]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003f8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f92:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d03c      	beq.n	800401a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01c      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fae:	4a2c      	ldr	r2, [pc, #176]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003fb0:	f043 0301 	orr.w	r3, r3, #1
 8003fb4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb8:	f7fe ff42 	bl	8002e40 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fc0:	f7fe ff3e 	bl	8002e40 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e0f2      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fd2:	4b23      	ldr	r3, [pc, #140]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003fd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ef      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x418>
 8003fe0:	e01b      	b.n	800401a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003fe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003fea:	f023 0301 	bic.w	r3, r3, #1
 8003fee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff2:	f7fe ff25 	bl	8002e40 <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ffa:	f7fe ff21 	bl	8002e40 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e0d5      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800400c:	4b14      	ldr	r3, [pc, #80]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 800400e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1ef      	bne.n	8003ffa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 80c9 	beq.w	80041b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004024:	4b0e      	ldr	r3, [pc, #56]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 030c 	and.w	r3, r3, #12
 800402c:	2b0c      	cmp	r3, #12
 800402e:	f000 8083 	beq.w	8004138 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d15e      	bne.n	80040f8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403a:	4b09      	ldr	r3, [pc, #36]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a08      	ldr	r2, [pc, #32]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8004040:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7fe fefb 	bl	8002e40 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404c:	e00c      	b.n	8004068 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404e:	f7fe fef7 	bl	8002e40 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d905      	bls.n	8004068 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e0ab      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
 8004060:	40021000 	.word	0x40021000
 8004064:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004068:	4b55      	ldr	r3, [pc, #340]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1ec      	bne.n	800404e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004074:	4b52      	ldr	r3, [pc, #328]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	4b52      	ldr	r3, [pc, #328]	@ (80041c4 <HAL_RCC_OscConfig+0x61c>)
 800407a:	4013      	ands	r3, r2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6a11      	ldr	r1, [r2, #32]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004084:	3a01      	subs	r2, #1
 8004086:	0112      	lsls	r2, r2, #4
 8004088:	4311      	orrs	r1, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800408e:	0212      	lsls	r2, r2, #8
 8004090:	4311      	orrs	r1, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004096:	0852      	lsrs	r2, r2, #1
 8004098:	3a01      	subs	r2, #1
 800409a:	0552      	lsls	r2, r2, #21
 800409c:	4311      	orrs	r1, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040a2:	0852      	lsrs	r2, r2, #1
 80040a4:	3a01      	subs	r2, #1
 80040a6:	0652      	lsls	r2, r2, #25
 80040a8:	4311      	orrs	r1, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80040ae:	06d2      	lsls	r2, r2, #27
 80040b0:	430a      	orrs	r2, r1
 80040b2:	4943      	ldr	r1, [pc, #268]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b8:	4b41      	ldr	r3, [pc, #260]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a40      	ldr	r2, [pc, #256]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 80040be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040c4:	4b3e      	ldr	r3, [pc, #248]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4a3d      	ldr	r2, [pc, #244]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 80040ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fe feb6 	bl	8002e40 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fe feb2 	bl	8002e40 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e066      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ea:	4b35      	ldr	r3, [pc, #212]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0x530>
 80040f6:	e05e      	b.n	80041b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f8:	4b31      	ldr	r3, [pc, #196]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a30      	ldr	r2, [pc, #192]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 80040fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fe fe9c 	bl	8002e40 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410c:	f7fe fe98 	bl	8002e40 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e04c      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800411e:	4b28      	ldr	r3, [pc, #160]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800412a:	4b25      	ldr	r3, [pc, #148]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	4924      	ldr	r1, [pc, #144]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 8004130:	4b25      	ldr	r3, [pc, #148]	@ (80041c8 <HAL_RCC_OscConfig+0x620>)
 8004132:	4013      	ands	r3, r2
 8004134:	60cb      	str	r3, [r1, #12]
 8004136:	e03e      	b.n	80041b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e039      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004144:	4b1e      	ldr	r3, [pc, #120]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f003 0203 	and.w	r2, r3, #3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	429a      	cmp	r2, r3
 8004156:	d12c      	bne.n	80041b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004162:	3b01      	subs	r3, #1
 8004164:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d123      	bne.n	80041b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004174:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004176:	429a      	cmp	r2, r3
 8004178:	d11b      	bne.n	80041b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004186:	429a      	cmp	r2, r3
 8004188:	d113      	bne.n	80041b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004194:	085b      	lsrs	r3, r3, #1
 8004196:	3b01      	subs	r3, #1
 8004198:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800419a:	429a      	cmp	r2, r3
 800419c:	d109      	bne.n	80041b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a8:	085b      	lsrs	r3, r3, #1
 80041aa:	3b01      	subs	r3, #1
 80041ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d001      	beq.n	80041b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3720      	adds	r7, #32
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000
 80041c4:	019f800c 	.word	0x019f800c
 80041c8:	feeefffc 	.word	0xfeeefffc

080041cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e11e      	b.n	8004422 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041e4:	4b91      	ldr	r3, [pc, #580]	@ (800442c <HAL_RCC_ClockConfig+0x260>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d910      	bls.n	8004214 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b8e      	ldr	r3, [pc, #568]	@ (800442c <HAL_RCC_ClockConfig+0x260>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 020f 	bic.w	r2, r3, #15
 80041fa:	498c      	ldr	r1, [pc, #560]	@ (800442c <HAL_RCC_ClockConfig+0x260>)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b8a      	ldr	r3, [pc, #552]	@ (800442c <HAL_RCC_ClockConfig+0x260>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e106      	b.n	8004422 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d073      	beq.n	8004308 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b03      	cmp	r3, #3
 8004226:	d129      	bne.n	800427c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004228:	4b81      	ldr	r3, [pc, #516]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0f4      	b.n	8004422 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004238:	f000 f99e 	bl	8004578 <RCC_GetSysClockFreqFromPLLSource>
 800423c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4a7c      	ldr	r2, [pc, #496]	@ (8004434 <HAL_RCC_ClockConfig+0x268>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d93f      	bls.n	80042c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004246:	4b7a      	ldr	r3, [pc, #488]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800425a:	2b00      	cmp	r3, #0
 800425c:	d033      	beq.n	80042c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004262:	2b00      	cmp	r3, #0
 8004264:	d12f      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004266:	4b72      	ldr	r3, [pc, #456]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800426e:	4a70      	ldr	r2, [pc, #448]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004274:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004276:	2380      	movs	r3, #128	@ 0x80
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	e024      	b.n	80042c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b02      	cmp	r3, #2
 8004282:	d107      	bne.n	8004294 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004284:	4b6a      	ldr	r3, [pc, #424]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d109      	bne.n	80042a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e0c6      	b.n	8004422 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004294:	4b66      	ldr	r3, [pc, #408]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0be      	b.n	8004422 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80042a4:	f000 f8ce 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 80042a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	4a61      	ldr	r2, [pc, #388]	@ (8004434 <HAL_RCC_ClockConfig+0x268>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d909      	bls.n	80042c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042ba:	4a5d      	ldr	r2, [pc, #372]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80042bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80042c2:	2380      	movs	r3, #128	@ 0x80
 80042c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042c6:	4b5a      	ldr	r3, [pc, #360]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f023 0203 	bic.w	r2, r3, #3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	4957      	ldr	r1, [pc, #348]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d8:	f7fe fdb2 	bl	8002e40 <HAL_GetTick>
 80042dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042de:	e00a      	b.n	80042f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e0:	f7fe fdae 	bl	8002e40 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e095      	b.n	8004422 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f6:	4b4e      	ldr	r3, [pc, #312]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 020c 	and.w	r2, r3, #12
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	429a      	cmp	r2, r3
 8004306:	d1eb      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d023      	beq.n	800435c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004320:	4b43      	ldr	r3, [pc, #268]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4a42      	ldr	r2, [pc, #264]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004326:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800432a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004338:	4b3d      	ldr	r3, [pc, #244]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004340:	4a3b      	ldr	r2, [pc, #236]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004342:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004346:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004348:	4b39      	ldr	r3, [pc, #228]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4936      	ldr	r1, [pc, #216]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004356:	4313      	orrs	r3, r2
 8004358:	608b      	str	r3, [r1, #8]
 800435a:	e008      	b.n	800436e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2b80      	cmp	r3, #128	@ 0x80
 8004360:	d105      	bne.n	800436e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004362:	4b33      	ldr	r3, [pc, #204]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	4a32      	ldr	r2, [pc, #200]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004368:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800436c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800436e:	4b2f      	ldr	r3, [pc, #188]	@ (800442c <HAL_RCC_ClockConfig+0x260>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d21d      	bcs.n	80043b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437c:	4b2b      	ldr	r3, [pc, #172]	@ (800442c <HAL_RCC_ClockConfig+0x260>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f023 020f 	bic.w	r2, r3, #15
 8004384:	4929      	ldr	r1, [pc, #164]	@ (800442c <HAL_RCC_ClockConfig+0x260>)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	4313      	orrs	r3, r2
 800438a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800438c:	f7fe fd58 	bl	8002e40 <HAL_GetTick>
 8004390:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004392:	e00a      	b.n	80043aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004394:	f7fe fd54 	bl	8002e40 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e03b      	b.n	8004422 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043aa:	4b20      	ldr	r3, [pc, #128]	@ (800442c <HAL_RCC_ClockConfig+0x260>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d1ed      	bne.n	8004394 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d008      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	4917      	ldr	r1, [pc, #92]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043e2:	4b13      	ldr	r3, [pc, #76]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	490f      	ldr	r1, [pc, #60]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043f6:	f000 f825 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 80043fa:	4602      	mov	r2, r0
 80043fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	091b      	lsrs	r3, r3, #4
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	490c      	ldr	r1, [pc, #48]	@ (8004438 <HAL_RCC_ClockConfig+0x26c>)
 8004408:	5ccb      	ldrb	r3, [r1, r3]
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	fa22 f303 	lsr.w	r3, r2, r3
 8004412:	4a0a      	ldr	r2, [pc, #40]	@ (800443c <HAL_RCC_ClockConfig+0x270>)
 8004414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004416:	4b0a      	ldr	r3, [pc, #40]	@ (8004440 <HAL_RCC_ClockConfig+0x274>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f7fe fcc4 	bl	8002da8 <HAL_InitTick>
 8004420:	4603      	mov	r3, r0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40022000 	.word	0x40022000
 8004430:	40021000 	.word	0x40021000
 8004434:	04c4b400 	.word	0x04c4b400
 8004438:	08008f90 	.word	0x08008f90
 800443c:	20000200 	.word	0x20000200
 8004440:	20000204 	.word	0x20000204

08004444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800444a:	4b2c      	ldr	r3, [pc, #176]	@ (80044fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b04      	cmp	r3, #4
 8004454:	d102      	bne.n	800445c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004456:	4b2a      	ldr	r3, [pc, #168]	@ (8004500 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	e047      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800445c:	4b27      	ldr	r3, [pc, #156]	@ (80044fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 030c 	and.w	r3, r3, #12
 8004464:	2b08      	cmp	r3, #8
 8004466:	d102      	bne.n	800446e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004468:	4b26      	ldr	r3, [pc, #152]	@ (8004504 <HAL_RCC_GetSysClockFreq+0xc0>)
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	e03e      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800446e:	4b23      	ldr	r3, [pc, #140]	@ (80044fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b0c      	cmp	r3, #12
 8004478:	d136      	bne.n	80044e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800447a:	4b20      	ldr	r3, [pc, #128]	@ (80044fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004484:	4b1d      	ldr	r3, [pc, #116]	@ (80044fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	3301      	adds	r3, #1
 8004490:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b03      	cmp	r3, #3
 8004496:	d10c      	bne.n	80044b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004498:	4a1a      	ldr	r2, [pc, #104]	@ (8004504 <HAL_RCC_GetSysClockFreq+0xc0>)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	4a16      	ldr	r2, [pc, #88]	@ (80044fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80044a2:	68d2      	ldr	r2, [r2, #12]
 80044a4:	0a12      	lsrs	r2, r2, #8
 80044a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044aa:	fb02 f303 	mul.w	r3, r2, r3
 80044ae:	617b      	str	r3, [r7, #20]
      break;
 80044b0:	e00c      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044b2:	4a13      	ldr	r2, [pc, #76]	@ (8004500 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ba:	4a10      	ldr	r2, [pc, #64]	@ (80044fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80044bc:	68d2      	ldr	r2, [r2, #12]
 80044be:	0a12      	lsrs	r2, r2, #8
 80044c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044c4:	fb02 f303 	mul.w	r3, r2, r3
 80044c8:	617b      	str	r3, [r7, #20]
      break;
 80044ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044cc:	4b0b      	ldr	r3, [pc, #44]	@ (80044fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	0e5b      	lsrs	r3, r3, #25
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	3301      	adds	r3, #1
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	e001      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80044ec:	693b      	ldr	r3, [r7, #16]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40021000 	.word	0x40021000
 8004500:	00f42400 	.word	0x00f42400
 8004504:	016e3600 	.word	0x016e3600

08004508 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800450c:	4b03      	ldr	r3, [pc, #12]	@ (800451c <HAL_RCC_GetHCLKFreq+0x14>)
 800450e:	681b      	ldr	r3, [r3, #0]
}
 8004510:	4618      	mov	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20000200 	.word	0x20000200

08004520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004524:	f7ff fff0 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 8004528:	4602      	mov	r2, r0
 800452a:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <HAL_RCC_GetPCLK1Freq+0x24>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	4904      	ldr	r1, [pc, #16]	@ (8004548 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004536:	5ccb      	ldrb	r3, [r1, r3]
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004540:	4618      	mov	r0, r3
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40021000 	.word	0x40021000
 8004548:	08008fa0 	.word	0x08008fa0

0800454c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004550:	f7ff ffda 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 8004554:	4602      	mov	r2, r0
 8004556:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	0adb      	lsrs	r3, r3, #11
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	4904      	ldr	r1, [pc, #16]	@ (8004574 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004562:	5ccb      	ldrb	r3, [r1, r3]
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800456c:	4618      	mov	r0, r3
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40021000 	.word	0x40021000
 8004574:	08008fa0 	.word	0x08008fa0

08004578 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800457e:	4b1e      	ldr	r3, [pc, #120]	@ (80045f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004588:	4b1b      	ldr	r3, [pc, #108]	@ (80045f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	3301      	adds	r3, #1
 8004594:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d10c      	bne.n	80045b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800459c:	4a17      	ldr	r2, [pc, #92]	@ (80045fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	4a14      	ldr	r2, [pc, #80]	@ (80045f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045a6:	68d2      	ldr	r2, [r2, #12]
 80045a8:	0a12      	lsrs	r2, r2, #8
 80045aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	617b      	str	r3, [r7, #20]
    break;
 80045b4:	e00c      	b.n	80045d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045b6:	4a12      	ldr	r2, [pc, #72]	@ (8004600 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80045be:	4a0e      	ldr	r2, [pc, #56]	@ (80045f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045c0:	68d2      	ldr	r2, [r2, #12]
 80045c2:	0a12      	lsrs	r2, r2, #8
 80045c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045c8:	fb02 f303 	mul.w	r3, r2, r3
 80045cc:	617b      	str	r3, [r7, #20]
    break;
 80045ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045d0:	4b09      	ldr	r3, [pc, #36]	@ (80045f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	0e5b      	lsrs	r3, r3, #25
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	3301      	adds	r3, #1
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80045ea:	687b      	ldr	r3, [r7, #4]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	371c      	adds	r7, #28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	40021000 	.word	0x40021000
 80045fc:	016e3600 	.word	0x016e3600
 8004600:	00f42400 	.word	0x00f42400

08004604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800460c:	2300      	movs	r3, #0
 800460e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004610:	2300      	movs	r3, #0
 8004612:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8098 	beq.w	8004752 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004622:	2300      	movs	r3, #0
 8004624:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004626:	4b43      	ldr	r3, [pc, #268]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10d      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004632:	4b40      	ldr	r3, [pc, #256]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004636:	4a3f      	ldr	r2, [pc, #252]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800463c:	6593      	str	r3, [r2, #88]	@ 0x58
 800463e:	4b3d      	ldr	r3, [pc, #244]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800464a:	2301      	movs	r3, #1
 800464c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800464e:	4b3a      	ldr	r3, [pc, #232]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a39      	ldr	r2, [pc, #228]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004658:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800465a:	f7fe fbf1 	bl	8002e40 <HAL_GetTick>
 800465e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004660:	e009      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004662:	f7fe fbed 	bl	8002e40 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d902      	bls.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	74fb      	strb	r3, [r7, #19]
        break;
 8004674:	e005      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004676:	4b30      	ldr	r3, [pc, #192]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0ef      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d159      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004688:	4b2a      	ldr	r3, [pc, #168]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004692:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d01e      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d019      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046a4:	4b23      	ldr	r3, [pc, #140]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046b0:	4b20      	ldr	r3, [pc, #128]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046d0:	4a18      	ldr	r2, [pc, #96]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d016      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7fe fbad 	bl	8002e40 <HAL_GetTick>
 80046e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e8:	e00b      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fe fba9 	bl	8002e40 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d902      	bls.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	74fb      	strb	r3, [r7, #19]
            break;
 8004700:	e006      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004702:	4b0c      	ldr	r3, [pc, #48]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0ec      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10b      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004716:	4b07      	ldr	r3, [pc, #28]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004724:	4903      	ldr	r1, [pc, #12]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800472c:	e008      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800472e:	7cfb      	ldrb	r3, [r7, #19]
 8004730:	74bb      	strb	r3, [r7, #18]
 8004732:	e005      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004734:	40021000 	.word	0x40021000
 8004738:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473c:	7cfb      	ldrb	r3, [r7, #19]
 800473e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004740:	7c7b      	ldrb	r3, [r7, #17]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d105      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004746:	4ba7      	ldr	r3, [pc, #668]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474a:	4aa6      	ldr	r2, [pc, #664]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800474c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004750:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800475e:	4ba1      	ldr	r3, [pc, #644]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004764:	f023 0203 	bic.w	r2, r3, #3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	499d      	ldr	r1, [pc, #628]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004780:	4b98      	ldr	r3, [pc, #608]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004786:	f023 020c 	bic.w	r2, r3, #12
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	4995      	ldr	r1, [pc, #596]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047a2:	4b90      	ldr	r3, [pc, #576]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	498c      	ldr	r1, [pc, #560]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047c4:	4b87      	ldr	r3, [pc, #540]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	4984      	ldr	r1, [pc, #528]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047e6:	4b7f      	ldr	r3, [pc, #508]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	497b      	ldr	r1, [pc, #492]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004808:	4b76      	ldr	r3, [pc, #472]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	4973      	ldr	r1, [pc, #460]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800482a:	4b6e      	ldr	r3, [pc, #440]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004830:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	496a      	ldr	r1, [pc, #424]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800484c:	4b65      	ldr	r3, [pc, #404]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004852:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	4962      	ldr	r1, [pc, #392]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800486e:	4b5d      	ldr	r3, [pc, #372]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004874:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	4959      	ldr	r1, [pc, #356]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004890:	4b54      	ldr	r3, [pc, #336]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004892:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004896:	f023 0203 	bic.w	r2, r3, #3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489e:	4951      	ldr	r1, [pc, #324]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048b2:	4b4c      	ldr	r3, [pc, #304]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c0:	4948      	ldr	r1, [pc, #288]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d015      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048d4:	4b43      	ldr	r3, [pc, #268]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e2:	4940      	ldr	r1, [pc, #256]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048f2:	d105      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048f4:	4b3b      	ldr	r3, [pc, #236]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4a3a      	ldr	r2, [pc, #232]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004908:	2b00      	cmp	r3, #0
 800490a:	d015      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800490c:	4b35      	ldr	r3, [pc, #212]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004912:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800491a:	4932      	ldr	r1, [pc, #200]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004926:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800492a:	d105      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800492c:	4b2d      	ldr	r3, [pc, #180]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	4a2c      	ldr	r2, [pc, #176]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004932:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004936:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d015      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004944:	4b27      	ldr	r3, [pc, #156]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004952:	4924      	ldr	r1, [pc, #144]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004962:	d105      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004964:	4b1f      	ldr	r3, [pc, #124]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4a1e      	ldr	r2, [pc, #120]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800496e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d015      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800497c:	4b19      	ldr	r3, [pc, #100]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004982:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498a:	4916      	ldr	r1, [pc, #88]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004996:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800499a:	d105      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800499c:	4b11      	ldr	r3, [pc, #68]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4a10      	ldr	r2, [pc, #64]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d019      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049b4:	4b0b      	ldr	r3, [pc, #44]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c2:	4908      	ldr	r1, [pc, #32]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049d2:	d109      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d4:	4b03      	ldr	r3, [pc, #12]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4a02      	ldr	r2, [pc, #8]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049de:	60d3      	str	r3, [r2, #12]
 80049e0:	e002      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80049e2:	bf00      	nop
 80049e4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d015      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049f4:	4b29      	ldr	r3, [pc, #164]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a02:	4926      	ldr	r1, [pc, #152]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a12:	d105      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a14:	4b21      	ldr	r3, [pc, #132]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	4a20      	ldr	r2, [pc, #128]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a1e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d015      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a32:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a3a:	4918      	ldr	r1, [pc, #96]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a4a:	d105      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a4c:	4b13      	ldr	r3, [pc, #76]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	4a12      	ldr	r2, [pc, #72]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a56:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d015      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a64:	4b0d      	ldr	r3, [pc, #52]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a72:	490a      	ldr	r1, [pc, #40]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a82:	d105      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a84:	4b05      	ldr	r3, [pc, #20]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4a04      	ldr	r2, [pc, #16]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a90:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000

08004aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e054      	b.n	8004b5c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d111      	bne.n	8004ae2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f001 ffe0 	bl	8006a8c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a23      	ldr	r2, [pc, #140]	@ (8004b64 <HAL_TIM_Base_Init+0xc4>)
 8004ad8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3304      	adds	r3, #4
 8004af2:	4619      	mov	r1, r3
 8004af4:	4610      	mov	r0, r2
 8004af6:	f001 fb29 	bl	800614c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	08002681 	.word	0x08002681

08004b68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d001      	beq.n	8004b80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e04c      	b.n	8004c1a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a26      	ldr	r2, [pc, #152]	@ (8004c28 <HAL_TIM_Base_Start+0xc0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d022      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x70>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b9a:	d01d      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x70>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a22      	ldr	r2, [pc, #136]	@ (8004c2c <HAL_TIM_Base_Start+0xc4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d018      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x70>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a21      	ldr	r2, [pc, #132]	@ (8004c30 <HAL_TIM_Base_Start+0xc8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d013      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x70>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8004c34 <HAL_TIM_Base_Start+0xcc>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00e      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x70>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8004c38 <HAL_TIM_Base_Start+0xd0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d009      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x70>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8004c3c <HAL_TIM_Base_Start+0xd4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x70>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004c40 <HAL_TIM_Base_Start+0xd8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d115      	bne.n	8004c04 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	4b19      	ldr	r3, [pc, #100]	@ (8004c44 <HAL_TIM_Base_Start+0xdc>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b06      	cmp	r3, #6
 8004be8:	d015      	beq.n	8004c16 <HAL_TIM_Base_Start+0xae>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf0:	d011      	beq.n	8004c16 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f042 0201 	orr.w	r2, r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c02:	e008      	b.n	8004c16 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	e000      	b.n	8004c18 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40012c00 	.word	0x40012c00
 8004c2c:	40000400 	.word	0x40000400
 8004c30:	40000800 	.word	0x40000800
 8004c34:	40000c00 	.word	0x40000c00
 8004c38:	40013400 	.word	0x40013400
 8004c3c:	40014000 	.word	0x40014000
 8004c40:	40015000 	.word	0x40015000
 8004c44:	00010007 	.word	0x00010007

08004c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d001      	beq.n	8004c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e054      	b.n	8004d0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a26      	ldr	r2, [pc, #152]	@ (8004d18 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d022      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0x80>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c8a:	d01d      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0x80>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a22      	ldr	r2, [pc, #136]	@ (8004d1c <HAL_TIM_Base_Start_IT+0xd4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d018      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0x80>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a21      	ldr	r2, [pc, #132]	@ (8004d20 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d013      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0x80>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d24 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00e      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0x80>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1e      	ldr	r2, [pc, #120]	@ (8004d28 <HAL_TIM_Base_Start_IT+0xe0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d009      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0x80>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8004d2c <HAL_TIM_Base_Start_IT+0xe4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d004      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0x80>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8004d30 <HAL_TIM_Base_Start_IT+0xe8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d115      	bne.n	8004cf4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	4b19      	ldr	r3, [pc, #100]	@ (8004d34 <HAL_TIM_Base_Start_IT+0xec>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b06      	cmp	r3, #6
 8004cd8:	d015      	beq.n	8004d06 <HAL_TIM_Base_Start_IT+0xbe>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce0:	d011      	beq.n	8004d06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0201 	orr.w	r2, r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf2:	e008      	b.n	8004d06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	e000      	b.n	8004d08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	40000800 	.word	0x40000800
 8004d24:	40000c00 	.word	0x40000c00
 8004d28:	40013400 	.word	0x40013400
 8004d2c:	40014000 	.word	0x40014000
 8004d30:	40015000 	.word	0x40015000
 8004d34:	00010007 	.word	0x00010007

08004d38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e054      	b.n	8004df4 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d111      	bne.n	8004d7a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f001 fe94 	bl	8006a8c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d102      	bne.n	8004d72 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a23      	ldr	r2, [pc, #140]	@ (8004dfc <HAL_TIM_PWM_Init+0xc4>)
 8004d70:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	f001 f9dd 	bl	800614c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	08004e01 	.word	0x08004e01

08004e00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d109      	bne.n	8004e38 <HAL_TIM_PWM_Start+0x24>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	bf14      	ite	ne
 8004e30:	2301      	movne	r3, #1
 8004e32:	2300      	moveq	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	e03c      	b.n	8004eb2 <HAL_TIM_PWM_Start+0x9e>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d109      	bne.n	8004e52 <HAL_TIM_PWM_Start+0x3e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	bf14      	ite	ne
 8004e4a:	2301      	movne	r3, #1
 8004e4c:	2300      	moveq	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	e02f      	b.n	8004eb2 <HAL_TIM_PWM_Start+0x9e>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d109      	bne.n	8004e6c <HAL_TIM_PWM_Start+0x58>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	bf14      	ite	ne
 8004e64:	2301      	movne	r3, #1
 8004e66:	2300      	moveq	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	e022      	b.n	8004eb2 <HAL_TIM_PWM_Start+0x9e>
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b0c      	cmp	r3, #12
 8004e70:	d109      	bne.n	8004e86 <HAL_TIM_PWM_Start+0x72>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	bf14      	ite	ne
 8004e7e:	2301      	movne	r3, #1
 8004e80:	2300      	moveq	r3, #0
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	e015      	b.n	8004eb2 <HAL_TIM_PWM_Start+0x9e>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b10      	cmp	r3, #16
 8004e8a:	d109      	bne.n	8004ea0 <HAL_TIM_PWM_Start+0x8c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	bf14      	ite	ne
 8004e98:	2301      	movne	r3, #1
 8004e9a:	2300      	moveq	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	e008      	b.n	8004eb2 <HAL_TIM_PWM_Start+0x9e>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	bf14      	ite	ne
 8004eac:	2301      	movne	r3, #1
 8004eae:	2300      	moveq	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e0a6      	b.n	8005008 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d104      	bne.n	8004eca <HAL_TIM_PWM_Start+0xb6>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ec8:	e023      	b.n	8004f12 <HAL_TIM_PWM_Start+0xfe>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d104      	bne.n	8004eda <HAL_TIM_PWM_Start+0xc6>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ed8:	e01b      	b.n	8004f12 <HAL_TIM_PWM_Start+0xfe>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d104      	bne.n	8004eea <HAL_TIM_PWM_Start+0xd6>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ee8:	e013      	b.n	8004f12 <HAL_TIM_PWM_Start+0xfe>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b0c      	cmp	r3, #12
 8004eee:	d104      	bne.n	8004efa <HAL_TIM_PWM_Start+0xe6>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ef8:	e00b      	b.n	8004f12 <HAL_TIM_PWM_Start+0xfe>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b10      	cmp	r3, #16
 8004efe:	d104      	bne.n	8004f0a <HAL_TIM_PWM_Start+0xf6>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f08:	e003      	b.n	8004f12 <HAL_TIM_PWM_Start+0xfe>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2201      	movs	r2, #1
 8004f18:	6839      	ldr	r1, [r7, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f001 fd90 	bl	8006a40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a3a      	ldr	r2, [pc, #232]	@ (8005010 <HAL_TIM_PWM_Start+0x1fc>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d018      	beq.n	8004f5c <HAL_TIM_PWM_Start+0x148>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a39      	ldr	r2, [pc, #228]	@ (8005014 <HAL_TIM_PWM_Start+0x200>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d013      	beq.n	8004f5c <HAL_TIM_PWM_Start+0x148>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a37      	ldr	r2, [pc, #220]	@ (8005018 <HAL_TIM_PWM_Start+0x204>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00e      	beq.n	8004f5c <HAL_TIM_PWM_Start+0x148>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a36      	ldr	r2, [pc, #216]	@ (800501c <HAL_TIM_PWM_Start+0x208>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d009      	beq.n	8004f5c <HAL_TIM_PWM_Start+0x148>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a34      	ldr	r2, [pc, #208]	@ (8005020 <HAL_TIM_PWM_Start+0x20c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d004      	beq.n	8004f5c <HAL_TIM_PWM_Start+0x148>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a33      	ldr	r2, [pc, #204]	@ (8005024 <HAL_TIM_PWM_Start+0x210>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d101      	bne.n	8004f60 <HAL_TIM_PWM_Start+0x14c>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e000      	b.n	8004f62 <HAL_TIM_PWM_Start+0x14e>
 8004f60:	2300      	movs	r3, #0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a25      	ldr	r2, [pc, #148]	@ (8005010 <HAL_TIM_PWM_Start+0x1fc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d022      	beq.n	8004fc6 <HAL_TIM_PWM_Start+0x1b2>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f88:	d01d      	beq.n	8004fc6 <HAL_TIM_PWM_Start+0x1b2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a26      	ldr	r2, [pc, #152]	@ (8005028 <HAL_TIM_PWM_Start+0x214>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d018      	beq.n	8004fc6 <HAL_TIM_PWM_Start+0x1b2>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a24      	ldr	r2, [pc, #144]	@ (800502c <HAL_TIM_PWM_Start+0x218>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d013      	beq.n	8004fc6 <HAL_TIM_PWM_Start+0x1b2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a23      	ldr	r2, [pc, #140]	@ (8005030 <HAL_TIM_PWM_Start+0x21c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d00e      	beq.n	8004fc6 <HAL_TIM_PWM_Start+0x1b2>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a19      	ldr	r2, [pc, #100]	@ (8005014 <HAL_TIM_PWM_Start+0x200>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d009      	beq.n	8004fc6 <HAL_TIM_PWM_Start+0x1b2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a18      	ldr	r2, [pc, #96]	@ (8005018 <HAL_TIM_PWM_Start+0x204>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d004      	beq.n	8004fc6 <HAL_TIM_PWM_Start+0x1b2>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a18      	ldr	r2, [pc, #96]	@ (8005024 <HAL_TIM_PWM_Start+0x210>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d115      	bne.n	8004ff2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	4b19      	ldr	r3, [pc, #100]	@ (8005034 <HAL_TIM_PWM_Start+0x220>)
 8004fce:	4013      	ands	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b06      	cmp	r3, #6
 8004fd6:	d015      	beq.n	8005004 <HAL_TIM_PWM_Start+0x1f0>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fde:	d011      	beq.n	8005004 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff0:	e008      	b.n	8005004 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0201 	orr.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	e000      	b.n	8005006 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005004:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40012c00 	.word	0x40012c00
 8005014:	40013400 	.word	0x40013400
 8005018:	40014000 	.word	0x40014000
 800501c:	40014400 	.word	0x40014400
 8005020:	40014800 	.word	0x40014800
 8005024:	40015000 	.word	0x40015000
 8005028:	40000400 	.word	0x40000400
 800502c:	40000800 	.word	0x40000800
 8005030:	40000c00 	.word	0x40000c00
 8005034:	00010007 	.word	0x00010007

08005038 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b0c      	cmp	r3, #12
 800504a:	d855      	bhi.n	80050f8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800504c:	a201      	add	r2, pc, #4	@ (adr r2, 8005054 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005052:	bf00      	nop
 8005054:	08005089 	.word	0x08005089
 8005058:	080050f9 	.word	0x080050f9
 800505c:	080050f9 	.word	0x080050f9
 8005060:	080050f9 	.word	0x080050f9
 8005064:	080050a5 	.word	0x080050a5
 8005068:	080050f9 	.word	0x080050f9
 800506c:	080050f9 	.word	0x080050f9
 8005070:	080050f9 	.word	0x080050f9
 8005074:	080050c1 	.word	0x080050c1
 8005078:	080050f9 	.word	0x080050f9
 800507c:	080050f9 	.word	0x080050f9
 8005080:	080050f9 	.word	0x080050f9
 8005084:	080050dd 	.word	0x080050dd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005096:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509c:	4618      	mov	r0, r3
 800509e:	f7fe f967 	bl	8003370 <HAL_DMA_Abort_IT>
      break;
 80050a2:	e02c      	b.n	80050fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fe f959 	bl	8003370 <HAL_DMA_Abort_IT>
      break;
 80050be:	e01e      	b.n	80050fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fe f94b 	bl	8003370 <HAL_DMA_Abort_IT>
      break;
 80050da:	e010      	b.n	80050fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fe f93d 	bl	8003370 <HAL_DMA_Abort_IT>
      break;
 80050f6:	e002      	b.n	80050fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	73fb      	strb	r3, [r7, #15]
      break;
 80050fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	2b00      	cmp	r3, #0
 8005102:	f040 8086 	bne.w	8005212 <HAL_TIM_PWM_Stop_DMA+0x1da>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2200      	movs	r2, #0
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f001 fc96 	bl	8006a40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a40      	ldr	r2, [pc, #256]	@ (800521c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d018      	beq.n	8005150 <HAL_TIM_PWM_Stop_DMA+0x118>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a3f      	ldr	r2, [pc, #252]	@ (8005220 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d013      	beq.n	8005150 <HAL_TIM_PWM_Stop_DMA+0x118>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a3d      	ldr	r2, [pc, #244]	@ (8005224 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00e      	beq.n	8005150 <HAL_TIM_PWM_Stop_DMA+0x118>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a3c      	ldr	r2, [pc, #240]	@ (8005228 <HAL_TIM_PWM_Stop_DMA+0x1f0>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d009      	beq.n	8005150 <HAL_TIM_PWM_Stop_DMA+0x118>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a3a      	ldr	r2, [pc, #232]	@ (800522c <HAL_TIM_PWM_Stop_DMA+0x1f4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d004      	beq.n	8005150 <HAL_TIM_PWM_Stop_DMA+0x118>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a39      	ldr	r2, [pc, #228]	@ (8005230 <HAL_TIM_PWM_Stop_DMA+0x1f8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d101      	bne.n	8005154 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <HAL_TIM_PWM_Stop_DMA+0x11e>
 8005154:	2300      	movs	r3, #0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d017      	beq.n	800518a <HAL_TIM_PWM_Stop_DMA+0x152>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6a1a      	ldr	r2, [r3, #32]
 8005160:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005164:	4013      	ands	r3, r2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10f      	bne.n	800518a <HAL_TIM_PWM_Stop_DMA+0x152>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6a1a      	ldr	r2, [r3, #32]
 8005170:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005174:	4013      	ands	r3, r2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d107      	bne.n	800518a <HAL_TIM_PWM_Stop_DMA+0x152>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005188:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6a1a      	ldr	r2, [r3, #32]
 8005190:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005194:	4013      	ands	r3, r2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10f      	bne.n	80051ba <HAL_TIM_PWM_Stop_DMA+0x182>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6a1a      	ldr	r2, [r3, #32]
 80051a0:	f244 4344 	movw	r3, #17476	@ 0x4444
 80051a4:	4013      	ands	r3, r2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d107      	bne.n	80051ba <HAL_TIM_PWM_Stop_DMA+0x182>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0201 	bic.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d104      	bne.n	80051ca <HAL_TIM_PWM_Stop_DMA+0x192>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051c8:	e023      	b.n	8005212 <HAL_TIM_PWM_Stop_DMA+0x1da>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d104      	bne.n	80051da <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051d8:	e01b      	b.n	8005212 <HAL_TIM_PWM_Stop_DMA+0x1da>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d104      	bne.n	80051ea <HAL_TIM_PWM_Stop_DMA+0x1b2>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051e8:	e013      	b.n	8005212 <HAL_TIM_PWM_Stop_DMA+0x1da>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b0c      	cmp	r3, #12
 80051ee:	d104      	bne.n	80051fa <HAL_TIM_PWM_Stop_DMA+0x1c2>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051f8:	e00b      	b.n	8005212 <HAL_TIM_PWM_Stop_DMA+0x1da>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b10      	cmp	r3, #16
 80051fe:	d104      	bne.n	800520a <HAL_TIM_PWM_Stop_DMA+0x1d2>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005208:	e003      	b.n	8005212 <HAL_TIM_PWM_Stop_DMA+0x1da>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8005212:	7bfb      	ldrb	r3, [r7, #15]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40012c00 	.word	0x40012c00
 8005220:	40013400 	.word	0x40013400
 8005224:	40014000 	.word	0x40014000
 8005228:	40014400 	.word	0x40014400
 800522c:	40014800 	.word	0x40014800
 8005230:	40015000 	.word	0x40015000

08005234 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e04c      	b.n	80052e2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d111      	bne.n	8005278 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f001 fc15 	bl	8006a8c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d102      	bne.n	8005270 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a1f      	ldr	r2, [pc, #124]	@ (80052ec <HAL_TIM_OnePulse_Init+0xb8>)
 800526e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3304      	adds	r3, #4
 8005288:	4619      	mov	r1, r3
 800528a:	4610      	mov	r0, r2
 800528c:	f000 ff5e 	bl	800614c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0208 	bic.w	r2, r2, #8
 800529e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6819      	ldr	r1, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	080052f1 	.word	0x080052f1

080052f0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005314:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800531c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005324:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800532c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800532e:	7bfb      	ldrb	r3, [r7, #15]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d108      	bne.n	8005346 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005334:	7bbb      	ldrb	r3, [r7, #14]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d105      	bne.n	8005346 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800533a:	7b7b      	ldrb	r3, [r7, #13]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d102      	bne.n	8005346 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005340:	7b3b      	ldrb	r3, [r7, #12]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d001      	beq.n	800534a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e059      	b.n	80053fe <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2202      	movs	r2, #2
 800534e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2202      	movs	r2, #2
 800535e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2202      	movs	r2, #2
 8005366:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0202 	orr.w	r2, r2, #2
 8005378:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f042 0204 	orr.w	r2, r2, #4
 8005388:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2201      	movs	r2, #1
 8005390:	2100      	movs	r1, #0
 8005392:	4618      	mov	r0, r3
 8005394:	f001 fb54 	bl	8006a40 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2201      	movs	r2, #1
 800539e:	2104      	movs	r1, #4
 80053a0:	4618      	mov	r0, r3
 80053a2:	f001 fb4d 	bl	8006a40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a17      	ldr	r2, [pc, #92]	@ (8005408 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d018      	beq.n	80053e2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a15      	ldr	r2, [pc, #84]	@ (800540c <HAL_TIM_OnePulse_Start_IT+0x108>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d013      	beq.n	80053e2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a14      	ldr	r2, [pc, #80]	@ (8005410 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00e      	beq.n	80053e2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a12      	ldr	r2, [pc, #72]	@ (8005414 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d009      	beq.n	80053e2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a11      	ldr	r2, [pc, #68]	@ (8005418 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d004      	beq.n	80053e2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a0f      	ldr	r2, [pc, #60]	@ (800541c <HAL_TIM_OnePulse_Start_IT+0x118>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d101      	bne.n	80053e6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80053e6:	2300      	movs	r3, #0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d007      	beq.n	80053fc <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40012c00 	.word	0x40012c00
 800540c:	40013400 	.word	0x40013400
 8005410:	40014000 	.word	0x40014000
 8005414:	40014400 	.word	0x40014400
 8005418:	40014800 	.word	0x40014800
 800541c:	40015000 	.word	0x40015000

08005420 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e0a2      	b.n	800557a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d111      	bne.n	8005464 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f001 fb1f 	bl	8006a8c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005452:	2b00      	cmp	r3, #0
 8005454:	d102      	bne.n	800545c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a4a      	ldr	r2, [pc, #296]	@ (8005584 <HAL_TIM_Encoder_Init+0x164>)
 800545a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800547a:	f023 0307 	bic.w	r3, r3, #7
 800547e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3304      	adds	r3, #4
 8005488:	4619      	mov	r1, r3
 800548a:	4610      	mov	r0, r2
 800548c:	f000 fe5e 	bl	800614c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054b8:	f023 0303 	bic.w	r3, r3, #3
 80054bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	4313      	orrs	r3, r2
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80054d6:	f023 030c 	bic.w	r3, r3, #12
 80054da:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	4313      	orrs	r3, r2
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	011a      	lsls	r2, r3, #4
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	031b      	lsls	r3, r3, #12
 8005506:	4313      	orrs	r3, r2
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005514:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800551c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	4313      	orrs	r3, r2
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	08002845 	.word	0x08002845

08005588 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005598:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d110      	bne.n	80055da <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d102      	bne.n	80055c4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80055be:	7b7b      	ldrb	r3, [r7, #13]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d001      	beq.n	80055c8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e069      	b.n	800569c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055d8:	e031      	b.n	800563e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d110      	bne.n	8005602 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055e0:	7bbb      	ldrb	r3, [r7, #14]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d102      	bne.n	80055ec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055e6:	7b3b      	ldrb	r3, [r7, #12]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d001      	beq.n	80055f0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e055      	b.n	800569c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005600:	e01d      	b.n	800563e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d108      	bne.n	800561a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005608:	7bbb      	ldrb	r3, [r7, #14]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d105      	bne.n	800561a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800560e:	7b7b      	ldrb	r3, [r7, #13]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d102      	bne.n	800561a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005614:	7b3b      	ldrb	r3, [r7, #12]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d001      	beq.n	800561e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e03e      	b.n	800569c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2202      	movs	r2, #2
 8005622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2202      	movs	r2, #2
 800562a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2202      	movs	r2, #2
 800563a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <HAL_TIM_Encoder_Start+0xc4>
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2b04      	cmp	r3, #4
 8005648:	d008      	beq.n	800565c <HAL_TIM_Encoder_Start+0xd4>
 800564a:	e00f      	b.n	800566c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2201      	movs	r2, #1
 8005652:	2100      	movs	r1, #0
 8005654:	4618      	mov	r0, r3
 8005656:	f001 f9f3 	bl	8006a40 <TIM_CCxChannelCmd>
      break;
 800565a:	e016      	b.n	800568a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2201      	movs	r2, #1
 8005662:	2104      	movs	r1, #4
 8005664:	4618      	mov	r0, r3
 8005666:	f001 f9eb 	bl	8006a40 <TIM_CCxChannelCmd>
      break;
 800566a:	e00e      	b.n	800568a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2201      	movs	r2, #1
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f001 f9e3 	bl	8006a40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2201      	movs	r2, #1
 8005680:	2104      	movs	r1, #4
 8005682:	4618      	mov	r0, r3
 8005684:	f001 f9dc 	bl	8006a40 <TIM_CCxChannelCmd>
      break;
 8005688:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0201 	orr.w	r2, r2, #1
 8005698:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d026      	beq.n	8005714 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d021      	beq.n	8005714 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f06f 0202 	mvn.w	r2, #2
 80056d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	4798      	blx	r3
 80056f8:	e009      	b.n	800570e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b00      	cmp	r3, #0
 800571c:	d026      	beq.n	800576c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	d021      	beq.n	800576c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0204 	mvn.w	r2, #4
 8005730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2202      	movs	r2, #2
 8005736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005742:	2b00      	cmp	r3, #0
 8005744:	d005      	beq.n	8005752 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	4798      	blx	r3
 8005750:	e009      	b.n	8005766 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d026      	beq.n	80057c4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b00      	cmp	r3, #0
 800577e:	d021      	beq.n	80057c4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0208 	mvn.w	r2, #8
 8005788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2204      	movs	r2, #4
 800578e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	4798      	blx	r3
 80057a8:	e009      	b.n	80057be <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f003 0310 	and.w	r3, r3, #16
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d026      	beq.n	800581c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d021      	beq.n	800581c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0210 	mvn.w	r2, #16
 80057e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2208      	movs	r2, #8
 80057e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	4798      	blx	r3
 8005800:	e009      	b.n	8005816 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00e      	beq.n	8005844 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d009      	beq.n	8005844 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0201 	mvn.w	r2, #1
 8005838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800584a:	2b00      	cmp	r3, #0
 800584c:	d104      	bne.n	8005858 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00e      	beq.n	8005876 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800585e:	2b00      	cmp	r3, #0
 8005860:	d009      	beq.n	8005876 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800586a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00e      	beq.n	800589e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005886:	2b00      	cmp	r3, #0
 8005888:	d009      	beq.n	800589e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00e      	beq.n	80058c6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d009      	beq.n	80058c6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00e      	beq.n	80058ee <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f06f 0220 	mvn.w	r2, #32
 80058e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00e      	beq.n	8005916 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800590a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00e      	beq.n	800593e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d009      	beq.n	800593e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00e      	beq.n	8005966 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d009      	beq.n	8005966 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800595a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00e      	beq.n	800598e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d009      	beq.n	800598e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800598e:	bf00      	nop
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d101      	bne.n	80059b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059b2:	2302      	movs	r3, #2
 80059b4:	e0ff      	b.n	8005bb6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b14      	cmp	r3, #20
 80059c2:	f200 80f0 	bhi.w	8005ba6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80059c6:	a201      	add	r2, pc, #4	@ (adr r2, 80059cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059cc:	08005a21 	.word	0x08005a21
 80059d0:	08005ba7 	.word	0x08005ba7
 80059d4:	08005ba7 	.word	0x08005ba7
 80059d8:	08005ba7 	.word	0x08005ba7
 80059dc:	08005a61 	.word	0x08005a61
 80059e0:	08005ba7 	.word	0x08005ba7
 80059e4:	08005ba7 	.word	0x08005ba7
 80059e8:	08005ba7 	.word	0x08005ba7
 80059ec:	08005aa3 	.word	0x08005aa3
 80059f0:	08005ba7 	.word	0x08005ba7
 80059f4:	08005ba7 	.word	0x08005ba7
 80059f8:	08005ba7 	.word	0x08005ba7
 80059fc:	08005ae3 	.word	0x08005ae3
 8005a00:	08005ba7 	.word	0x08005ba7
 8005a04:	08005ba7 	.word	0x08005ba7
 8005a08:	08005ba7 	.word	0x08005ba7
 8005a0c:	08005b25 	.word	0x08005b25
 8005a10:	08005ba7 	.word	0x08005ba7
 8005a14:	08005ba7 	.word	0x08005ba7
 8005a18:	08005ba7 	.word	0x08005ba7
 8005a1c:	08005b65 	.word	0x08005b65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fc44 	bl	80062b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699a      	ldr	r2, [r3, #24]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0208 	orr.w	r2, r2, #8
 8005a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0204 	bic.w	r2, r2, #4
 8005a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6999      	ldr	r1, [r3, #24]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	691a      	ldr	r2, [r3, #16]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	619a      	str	r2, [r3, #24]
      break;
 8005a5e:	e0a5      	b.n	8005bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68b9      	ldr	r1, [r7, #8]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fcbe 	bl	80063e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6999      	ldr	r1, [r3, #24]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	021a      	lsls	r2, r3, #8
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	619a      	str	r2, [r3, #24]
      break;
 8005aa0:	e084      	b.n	8005bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fd31 	bl	8006510 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69da      	ldr	r2, [r3, #28]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f042 0208 	orr.w	r2, r2, #8
 8005abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69da      	ldr	r2, [r3, #28]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0204 	bic.w	r2, r2, #4
 8005acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69d9      	ldr	r1, [r3, #28]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	691a      	ldr	r2, [r3, #16]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	61da      	str	r2, [r3, #28]
      break;
 8005ae0:	e064      	b.n	8005bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 fda3 	bl	8006634 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69d9      	ldr	r1, [r3, #28]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	021a      	lsls	r2, r3, #8
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	61da      	str	r2, [r3, #28]
      break;
 8005b22:	e043      	b.n	8005bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68b9      	ldr	r1, [r7, #8]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 fe16 	bl	800675c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0208 	orr.w	r2, r2, #8
 8005b3e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0204 	bic.w	r2, r2, #4
 8005b4e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005b62:	e023      	b.n	8005bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 fe60 	bl	8006830 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b8e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	021a      	lsls	r2, r3, #8
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005ba4:	e002      	b.n	8005bac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8005baa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop

08005bc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d101      	bne.n	8005bdc <HAL_TIM_ConfigClockSource+0x1c>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e0f6      	b.n	8005dca <HAL_TIM_ConfigClockSource+0x20a>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005bfa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a6f      	ldr	r2, [pc, #444]	@ (8005dd4 <HAL_TIM_ConfigClockSource+0x214>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	f000 80c1 	beq.w	8005d9e <HAL_TIM_ConfigClockSource+0x1de>
 8005c1c:	4a6d      	ldr	r2, [pc, #436]	@ (8005dd4 <HAL_TIM_ConfigClockSource+0x214>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	f200 80c6 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c24:	4a6c      	ldr	r2, [pc, #432]	@ (8005dd8 <HAL_TIM_ConfigClockSource+0x218>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	f000 80b9 	beq.w	8005d9e <HAL_TIM_ConfigClockSource+0x1de>
 8005c2c:	4a6a      	ldr	r2, [pc, #424]	@ (8005dd8 <HAL_TIM_ConfigClockSource+0x218>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	f200 80be 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c34:	4a69      	ldr	r2, [pc, #420]	@ (8005ddc <HAL_TIM_ConfigClockSource+0x21c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	f000 80b1 	beq.w	8005d9e <HAL_TIM_ConfigClockSource+0x1de>
 8005c3c:	4a67      	ldr	r2, [pc, #412]	@ (8005ddc <HAL_TIM_ConfigClockSource+0x21c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	f200 80b6 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c44:	4a66      	ldr	r2, [pc, #408]	@ (8005de0 <HAL_TIM_ConfigClockSource+0x220>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	f000 80a9 	beq.w	8005d9e <HAL_TIM_ConfigClockSource+0x1de>
 8005c4c:	4a64      	ldr	r2, [pc, #400]	@ (8005de0 <HAL_TIM_ConfigClockSource+0x220>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	f200 80ae 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c54:	4a63      	ldr	r2, [pc, #396]	@ (8005de4 <HAL_TIM_ConfigClockSource+0x224>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	f000 80a1 	beq.w	8005d9e <HAL_TIM_ConfigClockSource+0x1de>
 8005c5c:	4a61      	ldr	r2, [pc, #388]	@ (8005de4 <HAL_TIM_ConfigClockSource+0x224>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	f200 80a6 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c64:	4a60      	ldr	r2, [pc, #384]	@ (8005de8 <HAL_TIM_ConfigClockSource+0x228>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	f000 8099 	beq.w	8005d9e <HAL_TIM_ConfigClockSource+0x1de>
 8005c6c:	4a5e      	ldr	r2, [pc, #376]	@ (8005de8 <HAL_TIM_ConfigClockSource+0x228>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	f200 809e 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c74:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c78:	f000 8091 	beq.w	8005d9e <HAL_TIM_ConfigClockSource+0x1de>
 8005c7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c80:	f200 8096 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c88:	f000 8089 	beq.w	8005d9e <HAL_TIM_ConfigClockSource+0x1de>
 8005c8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c90:	f200 808e 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c98:	d03e      	beq.n	8005d18 <HAL_TIM_ConfigClockSource+0x158>
 8005c9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c9e:	f200 8087 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ca6:	f000 8086 	beq.w	8005db6 <HAL_TIM_ConfigClockSource+0x1f6>
 8005caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cae:	d87f      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cb0:	2b70      	cmp	r3, #112	@ 0x70
 8005cb2:	d01a      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0x12a>
 8005cb4:	2b70      	cmp	r3, #112	@ 0x70
 8005cb6:	d87b      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cb8:	2b60      	cmp	r3, #96	@ 0x60
 8005cba:	d050      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x19e>
 8005cbc:	2b60      	cmp	r3, #96	@ 0x60
 8005cbe:	d877      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cc0:	2b50      	cmp	r3, #80	@ 0x50
 8005cc2:	d03c      	beq.n	8005d3e <HAL_TIM_ConfigClockSource+0x17e>
 8005cc4:	2b50      	cmp	r3, #80	@ 0x50
 8005cc6:	d873      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cc8:	2b40      	cmp	r3, #64	@ 0x40
 8005cca:	d058      	beq.n	8005d7e <HAL_TIM_ConfigClockSource+0x1be>
 8005ccc:	2b40      	cmp	r3, #64	@ 0x40
 8005cce:	d86f      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cd0:	2b30      	cmp	r3, #48	@ 0x30
 8005cd2:	d064      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x1de>
 8005cd4:	2b30      	cmp	r3, #48	@ 0x30
 8005cd6:	d86b      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d060      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x1de>
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d867      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d05c      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x1de>
 8005ce4:	2b10      	cmp	r3, #16
 8005ce6:	d05a      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x1de>
 8005ce8:	e062      	b.n	8005db0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cfa:	f000 fe81 	bl	8006a00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	609a      	str	r2, [r3, #8]
      break;
 8005d16:	e04f      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d28:	f000 fe6a 	bl	8006a00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d3a:	609a      	str	r2, [r3, #8]
      break;
 8005d3c:	e03c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f000 fddc 	bl	8006908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2150      	movs	r1, #80	@ 0x50
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fe35 	bl	80069c6 <TIM_ITRx_SetConfig>
      break;
 8005d5c:	e02c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f000 fdfb 	bl	8006966 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2160      	movs	r1, #96	@ 0x60
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fe25 	bl	80069c6 <TIM_ITRx_SetConfig>
      break;
 8005d7c:	e01c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f000 fdbc 	bl	8006908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2140      	movs	r1, #64	@ 0x40
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fe15 	bl	80069c6 <TIM_ITRx_SetConfig>
      break;
 8005d9c:	e00c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4619      	mov	r1, r3
 8005da8:	4610      	mov	r0, r2
 8005daa:	f000 fe0c 	bl	80069c6 <TIM_ITRx_SetConfig>
      break;
 8005dae:	e003      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
      break;
 8005db4:	e000      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	00100070 	.word	0x00100070
 8005dd8:	00100060 	.word	0x00100060
 8005ddc:	00100050 	.word	0x00100050
 8005de0:	00100040 	.word	0x00100040
 8005de4:	00100030 	.word	0x00100030
 8005de8:	00100020 	.word	0x00100020

08005dec <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	460b      	mov	r3, r1
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e14a      	b.n	800613e <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	f040 80dd 	bne.w	8006070 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8005eb6:	7afb      	ldrb	r3, [r7, #11]
 8005eb8:	2b1f      	cmp	r3, #31
 8005eba:	f200 80d6 	bhi.w	800606a <HAL_TIM_RegisterCallback+0x1de>
 8005ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec4 <HAL_TIM_RegisterCallback+0x38>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005f45 	.word	0x08005f45
 8005ec8:	08005f4d 	.word	0x08005f4d
 8005ecc:	08005f55 	.word	0x08005f55
 8005ed0:	08005f5d 	.word	0x08005f5d
 8005ed4:	08005f65 	.word	0x08005f65
 8005ed8:	08005f6d 	.word	0x08005f6d
 8005edc:	08005f75 	.word	0x08005f75
 8005ee0:	08005f7d 	.word	0x08005f7d
 8005ee4:	08005f85 	.word	0x08005f85
 8005ee8:	08005f8d 	.word	0x08005f8d
 8005eec:	08005f95 	.word	0x08005f95
 8005ef0:	08005f9d 	.word	0x08005f9d
 8005ef4:	08005fa5 	.word	0x08005fa5
 8005ef8:	08005fad 	.word	0x08005fad
 8005efc:	08005fb7 	.word	0x08005fb7
 8005f00:	08005fc1 	.word	0x08005fc1
 8005f04:	08005fcb 	.word	0x08005fcb
 8005f08:	08005fd5 	.word	0x08005fd5
 8005f0c:	08005fdf 	.word	0x08005fdf
 8005f10:	08005fe9 	.word	0x08005fe9
 8005f14:	08005ff3 	.word	0x08005ff3
 8005f18:	08005ffd 	.word	0x08005ffd
 8005f1c:	08006007 	.word	0x08006007
 8005f20:	08006011 	.word	0x08006011
 8005f24:	0800601b 	.word	0x0800601b
 8005f28:	08006025 	.word	0x08006025
 8005f2c:	0800602f 	.word	0x0800602f
 8005f30:	08006039 	.word	0x08006039
 8005f34:	08006043 	.word	0x08006043
 8005f38:	0800604d 	.word	0x0800604d
 8005f3c:	08006057 	.word	0x08006057
 8005f40:	08006061 	.word	0x08006061
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8005f4a:	e0f7      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8005f52:	e0f3      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8005f5a:	e0ef      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8005f62:	e0eb      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8005f6a:	e0e7      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8005f72:	e0e3      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8005f7a:	e0df      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8005f82:	e0db      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8005f8a:	e0d7      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8005f92:	e0d3      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8005f9a:	e0cf      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8005fa2:	e0cb      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8005faa:	e0c7      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8005fb4:	e0c2      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8005fbe:	e0bd      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8005fc8:	e0b8      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8005fd2:	e0b3      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8005fdc:	e0ae      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8005fe6:	e0a9      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8005ff0:	e0a4      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8005ffa:	e09f      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8006004:	e09a      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800600e:	e095      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8006018:	e090      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8006022:	e08b      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800602c:	e086      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8006036:	e081      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8006040:	e07c      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800604a:	e077      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8006054:	e072      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800605e:	e06d      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8006068:	e068      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	75fb      	strb	r3, [r7, #23]
        break;
 800606e:	e065      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d15d      	bne.n	8006138 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800607c:	7afb      	ldrb	r3, [r7, #11]
 800607e:	2b0d      	cmp	r3, #13
 8006080:	d857      	bhi.n	8006132 <HAL_TIM_RegisterCallback+0x2a6>
 8006082:	a201      	add	r2, pc, #4	@ (adr r2, 8006088 <HAL_TIM_RegisterCallback+0x1fc>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	080060c1 	.word	0x080060c1
 800608c:	080060c9 	.word	0x080060c9
 8006090:	080060d1 	.word	0x080060d1
 8006094:	080060d9 	.word	0x080060d9
 8006098:	080060e1 	.word	0x080060e1
 800609c:	080060e9 	.word	0x080060e9
 80060a0:	080060f1 	.word	0x080060f1
 80060a4:	080060f9 	.word	0x080060f9
 80060a8:	08006101 	.word	0x08006101
 80060ac:	08006109 	.word	0x08006109
 80060b0:	08006111 	.word	0x08006111
 80060b4:	08006119 	.word	0x08006119
 80060b8:	08006121 	.word	0x08006121
 80060bc:	08006129 	.word	0x08006129
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80060c6:	e039      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80060ce:	e035      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80060d6:	e031      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80060de:	e02d      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80060e6:	e029      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80060ee:	e025      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80060f6:	e021      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80060fe:	e01d      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006106:	e019      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800610e:	e015      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006116:	e011      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800611e:	e00d      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006126:	e009      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8006130:	e004      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	75fb      	strb	r3, [r7, #23]
        break;
 8006136:	e001      	b.n	800613c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800613c:	7dfb      	ldrb	r3, [r7, #23]
}
 800613e:	4618      	mov	r0, r3
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop

0800614c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a4c      	ldr	r2, [pc, #304]	@ (8006290 <TIM_Base_SetConfig+0x144>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d017      	beq.n	8006194 <TIM_Base_SetConfig+0x48>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800616a:	d013      	beq.n	8006194 <TIM_Base_SetConfig+0x48>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a49      	ldr	r2, [pc, #292]	@ (8006294 <TIM_Base_SetConfig+0x148>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00f      	beq.n	8006194 <TIM_Base_SetConfig+0x48>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a48      	ldr	r2, [pc, #288]	@ (8006298 <TIM_Base_SetConfig+0x14c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d00b      	beq.n	8006194 <TIM_Base_SetConfig+0x48>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a47      	ldr	r2, [pc, #284]	@ (800629c <TIM_Base_SetConfig+0x150>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d007      	beq.n	8006194 <TIM_Base_SetConfig+0x48>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a46      	ldr	r2, [pc, #280]	@ (80062a0 <TIM_Base_SetConfig+0x154>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d003      	beq.n	8006194 <TIM_Base_SetConfig+0x48>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a45      	ldr	r2, [pc, #276]	@ (80062a4 <TIM_Base_SetConfig+0x158>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d108      	bne.n	80061a6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a39      	ldr	r2, [pc, #228]	@ (8006290 <TIM_Base_SetConfig+0x144>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d023      	beq.n	80061f6 <TIM_Base_SetConfig+0xaa>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b4:	d01f      	beq.n	80061f6 <TIM_Base_SetConfig+0xaa>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a36      	ldr	r2, [pc, #216]	@ (8006294 <TIM_Base_SetConfig+0x148>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d01b      	beq.n	80061f6 <TIM_Base_SetConfig+0xaa>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a35      	ldr	r2, [pc, #212]	@ (8006298 <TIM_Base_SetConfig+0x14c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d017      	beq.n	80061f6 <TIM_Base_SetConfig+0xaa>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a34      	ldr	r2, [pc, #208]	@ (800629c <TIM_Base_SetConfig+0x150>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d013      	beq.n	80061f6 <TIM_Base_SetConfig+0xaa>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a33      	ldr	r2, [pc, #204]	@ (80062a0 <TIM_Base_SetConfig+0x154>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d00f      	beq.n	80061f6 <TIM_Base_SetConfig+0xaa>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a33      	ldr	r2, [pc, #204]	@ (80062a8 <TIM_Base_SetConfig+0x15c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00b      	beq.n	80061f6 <TIM_Base_SetConfig+0xaa>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a32      	ldr	r2, [pc, #200]	@ (80062ac <TIM_Base_SetConfig+0x160>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d007      	beq.n	80061f6 <TIM_Base_SetConfig+0xaa>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a31      	ldr	r2, [pc, #196]	@ (80062b0 <TIM_Base_SetConfig+0x164>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d003      	beq.n	80061f6 <TIM_Base_SetConfig+0xaa>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a2c      	ldr	r2, [pc, #176]	@ (80062a4 <TIM_Base_SetConfig+0x158>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d108      	bne.n	8006208 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4313      	orrs	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a18      	ldr	r2, [pc, #96]	@ (8006290 <TIM_Base_SetConfig+0x144>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d013      	beq.n	800625c <TIM_Base_SetConfig+0x110>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a1a      	ldr	r2, [pc, #104]	@ (80062a0 <TIM_Base_SetConfig+0x154>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00f      	beq.n	800625c <TIM_Base_SetConfig+0x110>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a1a      	ldr	r2, [pc, #104]	@ (80062a8 <TIM_Base_SetConfig+0x15c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00b      	beq.n	800625c <TIM_Base_SetConfig+0x110>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a19      	ldr	r2, [pc, #100]	@ (80062ac <TIM_Base_SetConfig+0x160>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d007      	beq.n	800625c <TIM_Base_SetConfig+0x110>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a18      	ldr	r2, [pc, #96]	@ (80062b0 <TIM_Base_SetConfig+0x164>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_Base_SetConfig+0x110>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a13      	ldr	r2, [pc, #76]	@ (80062a4 <TIM_Base_SetConfig+0x158>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d103      	bne.n	8006264 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	691a      	ldr	r2, [r3, #16]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b01      	cmp	r3, #1
 8006274:	d105      	bne.n	8006282 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f023 0201 	bic.w	r2, r3, #1
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	611a      	str	r2, [r3, #16]
  }
}
 8006282:	bf00      	nop
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40012c00 	.word	0x40012c00
 8006294:	40000400 	.word	0x40000400
 8006298:	40000800 	.word	0x40000800
 800629c:	40000c00 	.word	0x40000c00
 80062a0:	40013400 	.word	0x40013400
 80062a4:	40015000 	.word	0x40015000
 80062a8:	40014000 	.word	0x40014000
 80062ac:	40014400 	.word	0x40014400
 80062b0:	40014800 	.word	0x40014800

080062b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	f023 0201 	bic.w	r2, r3, #1
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f023 0303 	bic.w	r3, r3, #3
 80062ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f023 0302 	bic.w	r3, r3, #2
 8006300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a30      	ldr	r2, [pc, #192]	@ (80063d0 <TIM_OC1_SetConfig+0x11c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d013      	beq.n	800633c <TIM_OC1_SetConfig+0x88>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a2f      	ldr	r2, [pc, #188]	@ (80063d4 <TIM_OC1_SetConfig+0x120>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d00f      	beq.n	800633c <TIM_OC1_SetConfig+0x88>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a2e      	ldr	r2, [pc, #184]	@ (80063d8 <TIM_OC1_SetConfig+0x124>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00b      	beq.n	800633c <TIM_OC1_SetConfig+0x88>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a2d      	ldr	r2, [pc, #180]	@ (80063dc <TIM_OC1_SetConfig+0x128>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d007      	beq.n	800633c <TIM_OC1_SetConfig+0x88>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a2c      	ldr	r2, [pc, #176]	@ (80063e0 <TIM_OC1_SetConfig+0x12c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d003      	beq.n	800633c <TIM_OC1_SetConfig+0x88>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a2b      	ldr	r2, [pc, #172]	@ (80063e4 <TIM_OC1_SetConfig+0x130>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d10c      	bne.n	8006356 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f023 0308 	bic.w	r3, r3, #8
 8006342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f023 0304 	bic.w	r3, r3, #4
 8006354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a1d      	ldr	r2, [pc, #116]	@ (80063d0 <TIM_OC1_SetConfig+0x11c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d013      	beq.n	8006386 <TIM_OC1_SetConfig+0xd2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a1c      	ldr	r2, [pc, #112]	@ (80063d4 <TIM_OC1_SetConfig+0x120>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00f      	beq.n	8006386 <TIM_OC1_SetConfig+0xd2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a1b      	ldr	r2, [pc, #108]	@ (80063d8 <TIM_OC1_SetConfig+0x124>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00b      	beq.n	8006386 <TIM_OC1_SetConfig+0xd2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a1a      	ldr	r2, [pc, #104]	@ (80063dc <TIM_OC1_SetConfig+0x128>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d007      	beq.n	8006386 <TIM_OC1_SetConfig+0xd2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a19      	ldr	r2, [pc, #100]	@ (80063e0 <TIM_OC1_SetConfig+0x12c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d003      	beq.n	8006386 <TIM_OC1_SetConfig+0xd2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a18      	ldr	r2, [pc, #96]	@ (80063e4 <TIM_OC1_SetConfig+0x130>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d111      	bne.n	80063aa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800638c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	4313      	orrs	r3, r2
 800639e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	621a      	str	r2, [r3, #32]
}
 80063c4:	bf00      	nop
 80063c6:	371c      	adds	r7, #28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	40012c00 	.word	0x40012c00
 80063d4:	40013400 	.word	0x40013400
 80063d8:	40014000 	.word	0x40014000
 80063dc:	40014400 	.word	0x40014400
 80063e0:	40014800 	.word	0x40014800
 80063e4:	40015000 	.word	0x40015000

080063e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	f023 0210 	bic.w	r2, r3, #16
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006416:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800641a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f023 0320 	bic.w	r3, r3, #32
 8006436:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a2c      	ldr	r2, [pc, #176]	@ (80064f8 <TIM_OC2_SetConfig+0x110>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d007      	beq.n	800645c <TIM_OC2_SetConfig+0x74>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a2b      	ldr	r2, [pc, #172]	@ (80064fc <TIM_OC2_SetConfig+0x114>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d003      	beq.n	800645c <TIM_OC2_SetConfig+0x74>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a2a      	ldr	r2, [pc, #168]	@ (8006500 <TIM_OC2_SetConfig+0x118>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d10d      	bne.n	8006478 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	011b      	lsls	r3, r3, #4
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4313      	orrs	r3, r2
 800646e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006476:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a1f      	ldr	r2, [pc, #124]	@ (80064f8 <TIM_OC2_SetConfig+0x110>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d013      	beq.n	80064a8 <TIM_OC2_SetConfig+0xc0>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a1e      	ldr	r2, [pc, #120]	@ (80064fc <TIM_OC2_SetConfig+0x114>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d00f      	beq.n	80064a8 <TIM_OC2_SetConfig+0xc0>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a1e      	ldr	r2, [pc, #120]	@ (8006504 <TIM_OC2_SetConfig+0x11c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00b      	beq.n	80064a8 <TIM_OC2_SetConfig+0xc0>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a1d      	ldr	r2, [pc, #116]	@ (8006508 <TIM_OC2_SetConfig+0x120>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d007      	beq.n	80064a8 <TIM_OC2_SetConfig+0xc0>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a1c      	ldr	r2, [pc, #112]	@ (800650c <TIM_OC2_SetConfig+0x124>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d003      	beq.n	80064a8 <TIM_OC2_SetConfig+0xc0>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a17      	ldr	r2, [pc, #92]	@ (8006500 <TIM_OC2_SetConfig+0x118>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d113      	bne.n	80064d0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	621a      	str	r2, [r3, #32]
}
 80064ea:	bf00      	nop
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	40012c00 	.word	0x40012c00
 80064fc:	40013400 	.word	0x40013400
 8006500:	40015000 	.word	0x40015000
 8006504:	40014000 	.word	0x40014000
 8006508:	40014400 	.word	0x40014400
 800650c:	40014800 	.word	0x40014800

08006510 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800653e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0303 	bic.w	r3, r3, #3
 800654a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800655c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	021b      	lsls	r3, r3, #8
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	4313      	orrs	r3, r2
 8006568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a2b      	ldr	r2, [pc, #172]	@ (800661c <TIM_OC3_SetConfig+0x10c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d007      	beq.n	8006582 <TIM_OC3_SetConfig+0x72>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a2a      	ldr	r2, [pc, #168]	@ (8006620 <TIM_OC3_SetConfig+0x110>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d003      	beq.n	8006582 <TIM_OC3_SetConfig+0x72>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a29      	ldr	r2, [pc, #164]	@ (8006624 <TIM_OC3_SetConfig+0x114>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d10d      	bne.n	800659e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006588:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	021b      	lsls	r3, r3, #8
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	4313      	orrs	r3, r2
 8006594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800659c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a1e      	ldr	r2, [pc, #120]	@ (800661c <TIM_OC3_SetConfig+0x10c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <TIM_OC3_SetConfig+0xbe>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006620 <TIM_OC3_SetConfig+0x110>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00f      	beq.n	80065ce <TIM_OC3_SetConfig+0xbe>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006628 <TIM_OC3_SetConfig+0x118>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00b      	beq.n	80065ce <TIM_OC3_SetConfig+0xbe>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a1c      	ldr	r2, [pc, #112]	@ (800662c <TIM_OC3_SetConfig+0x11c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d007      	beq.n	80065ce <TIM_OC3_SetConfig+0xbe>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006630 <TIM_OC3_SetConfig+0x120>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_OC3_SetConfig+0xbe>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a16      	ldr	r2, [pc, #88]	@ (8006624 <TIM_OC3_SetConfig+0x114>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d113      	bne.n	80065f6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	011b      	lsls	r3, r3, #4
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	621a      	str	r2, [r3, #32]
}
 8006610:	bf00      	nop
 8006612:	371c      	adds	r7, #28
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	40012c00 	.word	0x40012c00
 8006620:	40013400 	.word	0x40013400
 8006624:	40015000 	.word	0x40015000
 8006628:	40014000 	.word	0x40014000
 800662c:	40014400 	.word	0x40014400
 8006630:	40014800 	.word	0x40014800

08006634 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800666e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	021b      	lsls	r3, r3, #8
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	4313      	orrs	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	031b      	lsls	r3, r3, #12
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	4313      	orrs	r3, r2
 800668e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a2c      	ldr	r2, [pc, #176]	@ (8006744 <TIM_OC4_SetConfig+0x110>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d007      	beq.n	80066a8 <TIM_OC4_SetConfig+0x74>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a2b      	ldr	r2, [pc, #172]	@ (8006748 <TIM_OC4_SetConfig+0x114>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d003      	beq.n	80066a8 <TIM_OC4_SetConfig+0x74>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a2a      	ldr	r2, [pc, #168]	@ (800674c <TIM_OC4_SetConfig+0x118>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d10d      	bne.n	80066c4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	031b      	lsls	r3, r3, #12
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006744 <TIM_OC4_SetConfig+0x110>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d013      	beq.n	80066f4 <TIM_OC4_SetConfig+0xc0>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006748 <TIM_OC4_SetConfig+0x114>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00f      	beq.n	80066f4 <TIM_OC4_SetConfig+0xc0>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006750 <TIM_OC4_SetConfig+0x11c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00b      	beq.n	80066f4 <TIM_OC4_SetConfig+0xc0>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a1d      	ldr	r2, [pc, #116]	@ (8006754 <TIM_OC4_SetConfig+0x120>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d007      	beq.n	80066f4 <TIM_OC4_SetConfig+0xc0>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006758 <TIM_OC4_SetConfig+0x124>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d003      	beq.n	80066f4 <TIM_OC4_SetConfig+0xc0>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a17      	ldr	r2, [pc, #92]	@ (800674c <TIM_OC4_SetConfig+0x118>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d113      	bne.n	800671c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006702:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	019b      	lsls	r3, r3, #6
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	019b      	lsls	r3, r3, #6
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	4313      	orrs	r3, r2
 800671a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	621a      	str	r2, [r3, #32]
}
 8006736:	bf00      	nop
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	40012c00 	.word	0x40012c00
 8006748:	40013400 	.word	0x40013400
 800674c:	40015000 	.word	0x40015000
 8006750:	40014000 	.word	0x40014000
 8006754:	40014400 	.word	0x40014400
 8006758:	40014800 	.word	0x40014800

0800675c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800675c:	b480      	push	{r7}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800678a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800678e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80067a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	041b      	lsls	r3, r3, #16
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a19      	ldr	r2, [pc, #100]	@ (8006818 <TIM_OC5_SetConfig+0xbc>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d013      	beq.n	80067de <TIM_OC5_SetConfig+0x82>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a18      	ldr	r2, [pc, #96]	@ (800681c <TIM_OC5_SetConfig+0xc0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d00f      	beq.n	80067de <TIM_OC5_SetConfig+0x82>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a17      	ldr	r2, [pc, #92]	@ (8006820 <TIM_OC5_SetConfig+0xc4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00b      	beq.n	80067de <TIM_OC5_SetConfig+0x82>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a16      	ldr	r2, [pc, #88]	@ (8006824 <TIM_OC5_SetConfig+0xc8>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d007      	beq.n	80067de <TIM_OC5_SetConfig+0x82>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a15      	ldr	r2, [pc, #84]	@ (8006828 <TIM_OC5_SetConfig+0xcc>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d003      	beq.n	80067de <TIM_OC5_SetConfig+0x82>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a14      	ldr	r2, [pc, #80]	@ (800682c <TIM_OC5_SetConfig+0xd0>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d109      	bne.n	80067f2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	021b      	lsls	r3, r3, #8
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	621a      	str	r2, [r3, #32]
}
 800680c:	bf00      	nop
 800680e:	371c      	adds	r7, #28
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	40012c00 	.word	0x40012c00
 800681c:	40013400 	.word	0x40013400
 8006820:	40014000 	.word	0x40014000
 8006824:	40014400 	.word	0x40014400
 8006828:	40014800 	.word	0x40014800
 800682c:	40015000 	.word	0x40015000

08006830 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800685e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	021b      	lsls	r3, r3, #8
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	4313      	orrs	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006876:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	051b      	lsls	r3, r3, #20
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	4313      	orrs	r3, r2
 8006882:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a1a      	ldr	r2, [pc, #104]	@ (80068f0 <TIM_OC6_SetConfig+0xc0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d013      	beq.n	80068b4 <TIM_OC6_SetConfig+0x84>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a19      	ldr	r2, [pc, #100]	@ (80068f4 <TIM_OC6_SetConfig+0xc4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00f      	beq.n	80068b4 <TIM_OC6_SetConfig+0x84>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a18      	ldr	r2, [pc, #96]	@ (80068f8 <TIM_OC6_SetConfig+0xc8>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00b      	beq.n	80068b4 <TIM_OC6_SetConfig+0x84>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a17      	ldr	r2, [pc, #92]	@ (80068fc <TIM_OC6_SetConfig+0xcc>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d007      	beq.n	80068b4 <TIM_OC6_SetConfig+0x84>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a16      	ldr	r2, [pc, #88]	@ (8006900 <TIM_OC6_SetConfig+0xd0>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d003      	beq.n	80068b4 <TIM_OC6_SetConfig+0x84>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a15      	ldr	r2, [pc, #84]	@ (8006904 <TIM_OC6_SetConfig+0xd4>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d109      	bne.n	80068c8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	029b      	lsls	r3, r3, #10
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	621a      	str	r2, [r3, #32]
}
 80068e2:	bf00      	nop
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40012c00 	.word	0x40012c00
 80068f4:	40013400 	.word	0x40013400
 80068f8:	40014000 	.word	0x40014000
 80068fc:	40014400 	.word	0x40014400
 8006900:	40014800 	.word	0x40014800
 8006904:	40015000 	.word	0x40015000

08006908 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	f023 0201 	bic.w	r2, r3, #1
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f023 030a 	bic.w	r3, r3, #10
 8006944:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4313      	orrs	r3, r2
 800694c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	621a      	str	r2, [r3, #32]
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006966:	b480      	push	{r7}
 8006968:	b087      	sub	sp, #28
 800696a:	af00      	add	r7, sp, #0
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	f023 0210 	bic.w	r2, r3, #16
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006990:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	031b      	lsls	r3, r3, #12
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	4313      	orrs	r3, r2
 800699a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	621a      	str	r2, [r3, #32]
}
 80069ba:	bf00      	nop
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b085      	sub	sp, #20
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80069dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	f043 0307 	orr.w	r3, r3, #7
 80069ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	609a      	str	r2, [r3, #8]
}
 80069f4:	bf00      	nop
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	021a      	lsls	r2, r3, #8
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	431a      	orrs	r2, r3
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	609a      	str	r2, [r3, #8]
}
 8006a34:	bf00      	nop
 8006a36:	371c      	adds	r7, #28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f003 031f 	and.w	r3, r3, #31
 8006a52:	2201      	movs	r2, #1
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6a1a      	ldr	r2, [r3, #32]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	43db      	mvns	r3, r3
 8006a62:	401a      	ands	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a1a      	ldr	r2, [r3, #32]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f003 031f 	and.w	r3, r3, #31
 8006a72:	6879      	ldr	r1, [r7, #4]
 8006a74:	fa01 f303 	lsl.w	r3, r1, r3
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
	...

08006a8c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a26      	ldr	r2, [pc, #152]	@ (8006b30 <TIM_ResetCallback+0xa4>)
 8006a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a25      	ldr	r2, [pc, #148]	@ (8006b34 <TIM_ResetCallback+0xa8>)
 8006aa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a24      	ldr	r2, [pc, #144]	@ (8006b38 <TIM_ResetCallback+0xac>)
 8006aa8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a23      	ldr	r2, [pc, #140]	@ (8006b3c <TIM_ResetCallback+0xb0>)
 8006ab0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a22      	ldr	r2, [pc, #136]	@ (8006b40 <TIM_ResetCallback+0xb4>)
 8006ab8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a21      	ldr	r2, [pc, #132]	@ (8006b44 <TIM_ResetCallback+0xb8>)
 8006ac0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a20      	ldr	r2, [pc, #128]	@ (8006b48 <TIM_ResetCallback+0xbc>)
 8006ac8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a1f      	ldr	r2, [pc, #124]	@ (8006b4c <TIM_ResetCallback+0xc0>)
 8006ad0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8006b50 <TIM_ResetCallback+0xc4>)
 8006ad8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a1d      	ldr	r2, [pc, #116]	@ (8006b54 <TIM_ResetCallback+0xc8>)
 8006ae0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8006b58 <TIM_ResetCallback+0xcc>)
 8006ae8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a1b      	ldr	r2, [pc, #108]	@ (8006b5c <TIM_ResetCallback+0xd0>)
 8006af0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a1a      	ldr	r2, [pc, #104]	@ (8006b60 <TIM_ResetCallback+0xd4>)
 8006af8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a19      	ldr	r2, [pc, #100]	@ (8006b64 <TIM_ResetCallback+0xd8>)
 8006b00:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a18      	ldr	r2, [pc, #96]	@ (8006b68 <TIM_ResetCallback+0xdc>)
 8006b08:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a17      	ldr	r2, [pc, #92]	@ (8006b6c <TIM_ResetCallback+0xe0>)
 8006b10:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a16      	ldr	r2, [pc, #88]	@ (8006b70 <TIM_ResetCallback+0xe4>)
 8006b18:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a15      	ldr	r2, [pc, #84]	@ (8006b74 <TIM_ResetCallback+0xe8>)
 8006b20:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	08002591 	.word	0x08002591
 8006b34:	08005ded 	.word	0x08005ded
 8006b38:	08005e51 	.word	0x08005e51
 8006b3c:	08005e65 	.word	0x08005e65
 8006b40:	08005e15 	.word	0x08005e15
 8006b44:	08005e29 	.word	0x08005e29
 8006b48:	08005e01 	.word	0x08005e01
 8006b4c:	08002561 	.word	0x08002561
 8006b50:	08005e3d 	.word	0x08005e3d
 8006b54:	08005e79 	.word	0x08005e79
 8006b58:	08007011 	.word	0x08007011
 8006b5c:	08007025 	.word	0x08007025
 8006b60:	08007039 	.word	0x08007039
 8006b64:	0800704d 	.word	0x0800704d
 8006b68:	08007061 	.word	0x08007061
 8006b6c:	08007075 	.word	0x08007075
 8006b70:	08007089 	.word	0x08007089
 8006b74:	0800709d 	.word	0x0800709d

08006b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e074      	b.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a34      	ldr	r2, [pc, #208]	@ (8006c88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d009      	beq.n	8006bce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a33      	ldr	r2, [pc, #204]	@ (8006c8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d004      	beq.n	8006bce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a31      	ldr	r2, [pc, #196]	@ (8006c90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d108      	bne.n	8006be0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006bd4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a21      	ldr	r2, [pc, #132]	@ (8006c88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d022      	beq.n	8006c4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c10:	d01d      	beq.n	8006c4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a1f      	ldr	r2, [pc, #124]	@ (8006c94 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d018      	beq.n	8006c4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a1d      	ldr	r2, [pc, #116]	@ (8006c98 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d013      	beq.n	8006c4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8006c9c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d00e      	beq.n	8006c4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a15      	ldr	r2, [pc, #84]	@ (8006c8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d009      	beq.n	8006c4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a18      	ldr	r2, [pc, #96]	@ (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d004      	beq.n	8006c4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a11      	ldr	r2, [pc, #68]	@ (8006c90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d10c      	bne.n	8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	40012c00 	.word	0x40012c00
 8006c8c:	40013400 	.word	0x40013400
 8006c90:	40015000 	.word	0x40015000
 8006c94:	40000400 	.word	0x40000400
 8006c98:	40000800 	.word	0x40000800
 8006c9c:	40000c00 	.word	0x40000c00
 8006ca0:	40014000 	.word	0x40014000

08006ca4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d101      	bne.n	8006cc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	e078      	b.n	8006db2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	041b      	lsls	r3, r3, #16
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8006dc0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d009      	beq.n	8006d66 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a1b      	ldr	r2, [pc, #108]	@ (8006dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d004      	beq.n	8006d66 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a19      	ldr	r2, [pc, #100]	@ (8006dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d11c      	bne.n	8006da0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d70:	051b      	lsls	r3, r3, #20
 8006d72:	4313      	orrs	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40012c00 	.word	0x40012c00
 8006dc4:	40013400 	.word	0x40013400
 8006dc8:	40015000 	.word	0x40015000

08006dcc <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b08b      	sub	sp, #44	@ 0x2c
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <HAL_TIMEx_ConfigBreakInput+0x20>
 8006de8:	2302      	movs	r3, #2
 8006dea:	e10b      	b.n	8007004 <HAL_TIMEx_ConfigBreakInput+0x238>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b80      	cmp	r3, #128	@ 0x80
 8006dfa:	f000 8096 	beq.w	8006f2a <HAL_TIMEx_ConfigBreakInput+0x15e>
 8006dfe:	2b80      	cmp	r3, #128	@ 0x80
 8006e00:	f200 809c 	bhi.w	8006f3c <HAL_TIMEx_ConfigBreakInput+0x170>
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d849      	bhi.n	8006e9c <HAL_TIMEx_ConfigBreakInput+0xd0>
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 8097 	beq.w	8006f3c <HAL_TIMEx_ConfigBreakInput+0x170>
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	2b1f      	cmp	r3, #31
 8006e12:	f200 8093 	bhi.w	8006f3c <HAL_TIMEx_ConfigBreakInput+0x170>
 8006e16:	a201      	add	r2, pc, #4	@ (adr r2, 8006e1c <HAL_TIMEx_ConfigBreakInput+0x50>)
 8006e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1c:	08006ea3 	.word	0x08006ea3
 8006e20:	08006eb7 	.word	0x08006eb7
 8006e24:	08006f3d 	.word	0x08006f3d
 8006e28:	08006ecb 	.word	0x08006ecb
 8006e2c:	08006f3d 	.word	0x08006f3d
 8006e30:	08006f3d 	.word	0x08006f3d
 8006e34:	08006f3d 	.word	0x08006f3d
 8006e38:	08006edf 	.word	0x08006edf
 8006e3c:	08006f3d 	.word	0x08006f3d
 8006e40:	08006f3d 	.word	0x08006f3d
 8006e44:	08006f3d 	.word	0x08006f3d
 8006e48:	08006f3d 	.word	0x08006f3d
 8006e4c:	08006f3d 	.word	0x08006f3d
 8006e50:	08006f3d 	.word	0x08006f3d
 8006e54:	08006f3d 	.word	0x08006f3d
 8006e58:	08006ef3 	.word	0x08006ef3
 8006e5c:	08006f3d 	.word	0x08006f3d
 8006e60:	08006f3d 	.word	0x08006f3d
 8006e64:	08006f3d 	.word	0x08006f3d
 8006e68:	08006f3d 	.word	0x08006f3d
 8006e6c:	08006f3d 	.word	0x08006f3d
 8006e70:	08006f3d 	.word	0x08006f3d
 8006e74:	08006f3d 	.word	0x08006f3d
 8006e78:	08006f3d 	.word	0x08006f3d
 8006e7c:	08006f3d 	.word	0x08006f3d
 8006e80:	08006f3d 	.word	0x08006f3d
 8006e84:	08006f3d 	.word	0x08006f3d
 8006e88:	08006f3d 	.word	0x08006f3d
 8006e8c:	08006f3d 	.word	0x08006f3d
 8006e90:	08006f3d 	.word	0x08006f3d
 8006e94:	08006f3d 	.word	0x08006f3d
 8006e98:	08006f07 	.word	0x08006f07
 8006e9c:	2b40      	cmp	r3, #64	@ 0x40
 8006e9e:	d03b      	beq.n	8006f18 <HAL_TIMEx_ConfigBreakInput+0x14c>
 8006ea0:	e04c      	b.n	8006f3c <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8006eaa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006eae:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8006eb0:	2309      	movs	r3, #9
 8006eb2:	617b      	str	r3, [r7, #20]
      break;
 8006eb4:	e04b      	b.n	8006f4e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8006ebe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ec2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8006ec4:	230a      	movs	r3, #10
 8006ec6:	617b      	str	r3, [r7, #20]
      break;
 8006ec8:	e041      	b.n	8006f4e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8006eca:	2304      	movs	r3, #4
 8006ecc:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8006ece:	2302      	movs	r3, #2
 8006ed0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8006ed2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006ed6:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8006ed8:	230b      	movs	r3, #11
 8006eda:	617b      	str	r3, [r7, #20]
      break;
 8006edc:	e037      	b.n	8006f4e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 8006ede:	2308      	movs	r3, #8
 8006ee0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8006ee6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006eea:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8006eec:	230c      	movs	r3, #12
 8006eee:	617b      	str	r3, [r7, #20]
      break;
 8006ef0:	e02d      	b.n	8006f4e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 8006ef2:	2310      	movs	r3, #16
 8006ef4:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8006ef6:	2304      	movs	r3, #4
 8006ef8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8006efa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006efe:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8006f00:	230d      	movs	r3, #13
 8006f02:	617b      	str	r3, [r7, #20]
      break;
 8006f04:	e023      	b.n	8006f4e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 8006f06:	2320      	movs	r3, #32
 8006f08:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 8006f0a:	2305      	movs	r3, #5
 8006f0c:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	617b      	str	r3, [r7, #20]
      break;
 8006f16:	e01a      	b.n	8006f4e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 8006f18:	2340      	movs	r3, #64	@ 0x40
 8006f1a:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 8006f1c:	2306      	movs	r3, #6
 8006f1e:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	617b      	str	r3, [r7, #20]
      break;
 8006f28:	e011      	b.n	8006f4e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 8006f2a:	2380      	movs	r3, #128	@ 0x80
 8006f2c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 8006f2e:	2307      	movs	r3, #7
 8006f30:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	617b      	str	r3, [r7, #20]
      break;
 8006f3a:	e008      	b.n	8006f4e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	617b      	str	r3, [r7, #20]
      break;
 8006f4c:	bf00      	nop
    }
  }

  switch (BreakInput)
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d003      	beq.n	8006f5c <HAL_TIMEx_ConfigBreakInput+0x190>
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d025      	beq.n	8006fa6 <HAL_TIMEx_ConfigBreakInput+0x1da>
 8006f5a:	e049      	b.n	8006ff0 <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f62:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	43db      	mvns	r3, r3
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	409a      	lsls	r2, r3
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	4013      	ands	r3, r2
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	43db      	mvns	r3, r3
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	4013      	ands	r3, r2
 8006f88:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	409a      	lsls	r2, r3
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	4013      	ands	r3, r2
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8006fa4:	e028      	b.n	8006ff8 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fac:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	43db      	mvns	r3, r3
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	409a      	lsls	r2, r3
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	43db      	mvns	r3, r3
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	409a      	lsls	r2, r3
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	4013      	ands	r3, r2
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8006fee:	e003      	b.n	8006ff8 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8006ff6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007004:	4618      	mov	r0, r3
 8007006:	372c      	adds	r7, #44	@ 0x2c
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e050      	b.n	8007164 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d114      	bne.n	80070f6 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fdc5 	bl	8007c64 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d103      	bne.n	80070ec <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a21      	ldr	r2, [pc, #132]	@ (800716c <HAL_UART_Init+0xbc>)
 80070e8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2224      	movs	r2, #36	@ 0x24
 80070fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0201 	bic.w	r2, r2, #1
 800710c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 f8f2 	bl	8008300 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fdf3 	bl	8007d08 <UART_SetConfig>
 8007122:	4603      	mov	r3, r0
 8007124:	2b01      	cmp	r3, #1
 8007126:	d101      	bne.n	800712c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e01b      	b.n	8007164 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800713a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689a      	ldr	r2, [r3, #8]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800714a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0201 	orr.w	r2, r2, #1
 800715a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f001 f971 	bl	8008444 <UART_CheckIdleState>
 8007162:	4603      	mov	r3, r0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	0800297d 	.word	0x0800297d

08007170 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	460b      	mov	r3, r1
 800717a:	607a      	str	r2, [r7, #4]
 800717c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d109      	bne.n	800719c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800718e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e09c      	b.n	80072d6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	d16c      	bne.n	8007280 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80071a6:	7afb      	ldrb	r3, [r7, #11]
 80071a8:	2b0c      	cmp	r3, #12
 80071aa:	d85e      	bhi.n	800726a <HAL_UART_RegisterCallback+0xfa>
 80071ac:	a201      	add	r2, pc, #4	@ (adr r2, 80071b4 <HAL_UART_RegisterCallback+0x44>)
 80071ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b2:	bf00      	nop
 80071b4:	080071e9 	.word	0x080071e9
 80071b8:	080071f3 	.word	0x080071f3
 80071bc:	080071fd 	.word	0x080071fd
 80071c0:	08007207 	.word	0x08007207
 80071c4:	08007211 	.word	0x08007211
 80071c8:	0800721b 	.word	0x0800721b
 80071cc:	08007225 	.word	0x08007225
 80071d0:	0800722f 	.word	0x0800722f
 80071d4:	08007239 	.word	0x08007239
 80071d8:	08007243 	.word	0x08007243
 80071dc:	0800724d 	.word	0x0800724d
 80071e0:	08007257 	.word	0x08007257
 80071e4:	08007261 	.word	0x08007261
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80071f0:	e070      	b.n	80072d4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80071fa:	e06b      	b.n	80072d4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007204:	e066      	b.n	80072d4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800720e:	e061      	b.n	80072d4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007218:	e05c      	b.n	80072d4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007222:	e057      	b.n	80072d4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800722c:	e052      	b.n	80072d4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007236:	e04d      	b.n	80072d4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007240:	e048      	b.n	80072d4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800724a:	e043      	b.n	80072d4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007254:	e03e      	b.n	80072d4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800725e:	e039      	b.n	80072d4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007268:	e034      	b.n	80072d4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007270:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	75fb      	strb	r3, [r7, #23]
        break;
 800727e:	e029      	b.n	80072d4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007286:	2b00      	cmp	r3, #0
 8007288:	d11a      	bne.n	80072c0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800728a:	7afb      	ldrb	r3, [r7, #11]
 800728c:	2b0b      	cmp	r3, #11
 800728e:	d002      	beq.n	8007296 <HAL_UART_RegisterCallback+0x126>
 8007290:	2b0c      	cmp	r3, #12
 8007292:	d005      	beq.n	80072a0 <HAL_UART_RegisterCallback+0x130>
 8007294:	e009      	b.n	80072aa <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800729e:	e019      	b.n	80072d4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80072a8:	e014      	b.n	80072d4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	75fb      	strb	r3, [r7, #23]
        break;
 80072be:	e009      	b.n	80072d4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80072d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop

080072e4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08a      	sub	sp, #40	@ 0x28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072f8:	2b20      	cmp	r3, #32
 80072fa:	d167      	bne.n	80073cc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d002      	beq.n	8007308 <HAL_UART_Transmit_DMA+0x24>
 8007302:	88fb      	ldrh	r3, [r7, #6]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e060      	b.n	80073ce <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	88fa      	ldrh	r2, [r7, #6]
 8007316:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	88fa      	ldrh	r2, [r7, #6]
 800731e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2221      	movs	r2, #33	@ 0x21
 800732e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007336:	2b00      	cmp	r3, #0
 8007338:	d028      	beq.n	800738c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800733e:	4a26      	ldr	r2, [pc, #152]	@ (80073d8 <HAL_UART_Transmit_DMA+0xf4>)
 8007340:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007346:	4a25      	ldr	r2, [pc, #148]	@ (80073dc <HAL_UART_Transmit_DMA+0xf8>)
 8007348:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800734e:	4a24      	ldr	r2, [pc, #144]	@ (80073e0 <HAL_UART_Transmit_DMA+0xfc>)
 8007350:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007356:	2200      	movs	r2, #0
 8007358:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007362:	4619      	mov	r1, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3328      	adds	r3, #40	@ 0x28
 800736a:	461a      	mov	r2, r3
 800736c:	88fb      	ldrh	r3, [r7, #6]
 800736e:	f7fb ff2b 	bl	80031c8 <HAL_DMA_Start_IT>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d009      	beq.n	800738c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2210      	movs	r2, #16
 800737c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e020      	b.n	80073ce <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2240      	movs	r2, #64	@ 0x40
 8007392:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3308      	adds	r3, #8
 800739a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	e853 3f00 	ldrex	r3, [r3]
 80073a2:	613b      	str	r3, [r7, #16]
   return(result);
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3308      	adds	r3, #8
 80073b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073b4:	623a      	str	r2, [r7, #32]
 80073b6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b8:	69f9      	ldr	r1, [r7, #28]
 80073ba:	6a3a      	ldr	r2, [r7, #32]
 80073bc:	e841 2300 	strex	r3, r2, [r1]
 80073c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1e5      	bne.n	8007394 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	e000      	b.n	80073ce <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80073cc:	2302      	movs	r3, #2
  }
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3728      	adds	r7, #40	@ 0x28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	0800890f 	.word	0x0800890f
 80073dc:	080089ad 	.word	0x080089ad
 80073e0:	08008b47 	.word	0x08008b47

080073e4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b08a      	sub	sp, #40	@ 0x28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	4613      	mov	r3, r2
 80073f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073f8:	2b20      	cmp	r3, #32
 80073fa:	d137      	bne.n	800746c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <HAL_UART_Receive_DMA+0x24>
 8007402:	88fb      	ldrh	r3, [r7, #6]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e030      	b.n	800746e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a18      	ldr	r2, [pc, #96]	@ (8007478 <HAL_UART_Receive_DMA+0x94>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d01f      	beq.n	800745c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d018      	beq.n	800745c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	e853 3f00 	ldrex	r3, [r3]
 8007436:	613b      	str	r3, [r7, #16]
   return(result);
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800743e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	461a      	mov	r2, r3
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	623b      	str	r3, [r7, #32]
 800744a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744c:	69f9      	ldr	r1, [r7, #28]
 800744e:	6a3a      	ldr	r2, [r7, #32]
 8007450:	e841 2300 	strex	r3, r2, [r1]
 8007454:	61bb      	str	r3, [r7, #24]
   return(result);
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e6      	bne.n	800742a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800745c:	88fb      	ldrh	r3, [r7, #6]
 800745e:	461a      	mov	r2, r3
 8007460:	68b9      	ldr	r1, [r7, #8]
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f001 f906 	bl	8008674 <UART_Start_Receive_DMA>
 8007468:	4603      	mov	r3, r0
 800746a:	e000      	b.n	800746e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800746c:	2302      	movs	r3, #2
  }
}
 800746e:	4618      	mov	r0, r3
 8007470:	3728      	adds	r7, #40	@ 0x28
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	40008000 	.word	0x40008000

0800747c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b0ba      	sub	sp, #232	@ 0xe8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80074a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80074aa:	4013      	ands	r3, r2
 80074ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80074b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d11b      	bne.n	80074f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074bc:	f003 0320 	and.w	r3, r3, #32
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d015      	beq.n	80074f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074c8:	f003 0320 	and.w	r3, r3, #32
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d105      	bne.n	80074dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d009      	beq.n	80074f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 82f3 	beq.w	8007acc <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	4798      	blx	r3
      }
      return;
 80074ee:	e2ed      	b.n	8007acc <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80074f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 8129 	beq.w	800774c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80074fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80074fe:	4b90      	ldr	r3, [pc, #576]	@ (8007740 <HAL_UART_IRQHandler+0x2c4>)
 8007500:	4013      	ands	r3, r2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d106      	bne.n	8007514 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007506:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800750a:	4b8e      	ldr	r3, [pc, #568]	@ (8007744 <HAL_UART_IRQHandler+0x2c8>)
 800750c:	4013      	ands	r3, r2
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 811c 	beq.w	800774c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b00      	cmp	r3, #0
 800751e:	d011      	beq.n	8007544 <HAL_UART_IRQHandler+0xc8>
 8007520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00b      	beq.n	8007544 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2201      	movs	r2, #1
 8007532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800753a:	f043 0201 	orr.w	r2, r3, #1
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b00      	cmp	r3, #0
 800754e:	d011      	beq.n	8007574 <HAL_UART_IRQHandler+0xf8>
 8007550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00b      	beq.n	8007574 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2202      	movs	r2, #2
 8007562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800756a:	f043 0204 	orr.w	r2, r3, #4
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b00      	cmp	r3, #0
 800757e:	d011      	beq.n	80075a4 <HAL_UART_IRQHandler+0x128>
 8007580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00b      	beq.n	80075a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2204      	movs	r2, #4
 8007592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800759a:	f043 0202 	orr.w	r2, r3, #2
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075a8:	f003 0308 	and.w	r3, r3, #8
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d017      	beq.n	80075e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075b4:	f003 0320 	and.w	r3, r3, #32
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d105      	bne.n	80075c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80075bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80075c0:	4b5f      	ldr	r3, [pc, #380]	@ (8007740 <HAL_UART_IRQHandler+0x2c4>)
 80075c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00b      	beq.n	80075e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2208      	movs	r2, #8
 80075ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075d6:	f043 0208 	orr.w	r2, r3, #8
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d012      	beq.n	8007612 <HAL_UART_IRQHandler+0x196>
 80075ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00c      	beq.n	8007612 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007600:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007608:	f043 0220 	orr.w	r2, r3, #32
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 8259 	beq.w	8007ad0 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800761e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007622:	f003 0320 	and.w	r3, r3, #32
 8007626:	2b00      	cmp	r3, #0
 8007628:	d013      	beq.n	8007652 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800762a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d105      	bne.n	8007642 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800763a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d007      	beq.n	8007652 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007658:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007666:	2b40      	cmp	r3, #64	@ 0x40
 8007668:	d005      	beq.n	8007676 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800766a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800766e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007672:	2b00      	cmp	r3, #0
 8007674:	d058      	beq.n	8007728 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f001 f8e3 	bl	8008842 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007686:	2b40      	cmp	r3, #64	@ 0x40
 8007688:	d148      	bne.n	800771c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3308      	adds	r3, #8
 8007690:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007694:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80076a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80076a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3308      	adds	r3, #8
 80076b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80076b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80076ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80076c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80076ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1d9      	bne.n	800768a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d017      	beq.n	8007710 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076e6:	4a18      	ldr	r2, [pc, #96]	@ (8007748 <HAL_UART_IRQHandler+0x2cc>)
 80076e8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fb fe3d 	bl	8003370 <HAL_DMA_Abort_IT>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d01f      	beq.n	800773c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800770a:	4610      	mov	r0, r2
 800770c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800770e:	e015      	b.n	800773c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800771a:	e00f      	b.n	800773c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007726:	e009      	b.n	800773c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800773a:	e1c9      	b.n	8007ad0 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800773c:	bf00      	nop
    return;
 800773e:	e1c7      	b.n	8007ad0 <HAL_UART_IRQHandler+0x654>
 8007740:	10000001 	.word	0x10000001
 8007744:	04000120 	.word	0x04000120
 8007748:	08008bcb 	.word	0x08008bcb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007750:	2b01      	cmp	r3, #1
 8007752:	f040 8157 	bne.w	8007a04 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800775a:	f003 0310 	and.w	r3, r3, #16
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 8150 	beq.w	8007a04 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007768:	f003 0310 	and.w	r3, r3, #16
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 8149 	beq.w	8007a04 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2210      	movs	r2, #16
 8007778:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007784:	2b40      	cmp	r3, #64	@ 0x40
 8007786:	f040 80bd 	bne.w	8007904 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007798:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 8199 	beq.w	8007ad4 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077ac:	429a      	cmp	r2, r3
 80077ae:	f080 8191 	bcs.w	8007ad4 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0320 	and.w	r3, r3, #32
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f040 8087 	bne.w	80078de <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80077e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007802:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007806:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800780a:	e841 2300 	strex	r3, r2, [r1]
 800780e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007812:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1da      	bne.n	80077d0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3308      	adds	r3, #8
 8007820:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800782a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800782c:	f023 0301 	bic.w	r3, r3, #1
 8007830:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3308      	adds	r3, #8
 800783a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800783e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007842:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007844:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007846:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800784a:	e841 2300 	strex	r3, r2, [r1]
 800784e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007850:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e1      	bne.n	800781a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3308      	adds	r3, #8
 800785c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007866:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800786c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3308      	adds	r3, #8
 8007876:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800787a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800787c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007880:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007882:	e841 2300 	strex	r3, r2, [r1]
 8007886:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007888:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1e3      	bne.n	8007856 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2220      	movs	r2, #32
 8007892:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80078aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078ac:	f023 0310 	bic.w	r3, r3, #16
 80078b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80078c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80078cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e4      	bne.n	800789c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fb fcf0 	bl	80032be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2202      	movs	r2, #2
 80078e2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80078f6:	b292      	uxth	r2, r2
 80078f8:	1a8a      	subs	r2, r1, r2
 80078fa:	b292      	uxth	r2, r2
 80078fc:	4611      	mov	r1, r2
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007902:	e0e7      	b.n	8007ad4 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007910:	b29b      	uxth	r3, r3
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800791e:	b29b      	uxth	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 80d9 	beq.w	8007ad8 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8007926:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 80d4 	beq.w	8007ad8 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007938:	e853 3f00 	ldrex	r3, [r3]
 800793c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800793e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007940:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007944:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007952:	647b      	str	r3, [r7, #68]	@ 0x44
 8007954:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007958:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e4      	bne.n	8007930 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3308      	adds	r3, #8
 800796c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	623b      	str	r3, [r7, #32]
   return(result);
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800797c:	f023 0301 	bic.w	r3, r3, #1
 8007980:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3308      	adds	r3, #8
 800798a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800798e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007990:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007996:	e841 2300 	strex	r3, r2, [r1]
 800799a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800799c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1e1      	bne.n	8007966 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	e853 3f00 	ldrex	r3, [r3]
 80079c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0310 	bic.w	r3, r3, #16
 80079ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80079d8:	61fb      	str	r3, [r7, #28]
 80079da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079dc:	69b9      	ldr	r1, [r7, #24]
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	e841 2300 	strex	r3, r2, [r1]
 80079e4:	617b      	str	r3, [r7, #20]
   return(result);
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1e4      	bne.n	80079b6 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2202      	movs	r2, #2
 80079f0:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80079f8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80079fc:	4611      	mov	r1, r2
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a02:	e069      	b.n	8007ad8 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d010      	beq.n	8007a32 <HAL_UART_IRQHandler+0x5b6>
 8007a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00a      	beq.n	8007a32 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007a24:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a30:	e055      	b.n	8007ade <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d014      	beq.n	8007a68 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d105      	bne.n	8007a56 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d008      	beq.n	8007a68 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d03e      	beq.n	8007adc <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	4798      	blx	r3
    }
    return;
 8007a66:	e039      	b.n	8007adc <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d009      	beq.n	8007a88 <HAL_UART_IRQHandler+0x60c>
 8007a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d003      	beq.n	8007a88 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 f8ba 	bl	8008bfa <UART_EndTransmit_IT>
    return;
 8007a86:	e02a      	b.n	8007ade <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00b      	beq.n	8007aac <HAL_UART_IRQHandler+0x630>
 8007a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a98:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d005      	beq.n	8007aac <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007aaa:	e018      	b.n	8007ade <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d012      	beq.n	8007ade <HAL_UART_IRQHandler+0x662>
 8007ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	da0e      	bge.n	8007ade <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007aca:	e008      	b.n	8007ade <HAL_UART_IRQHandler+0x662>
      return;
 8007acc:	bf00      	nop
 8007ace:	e006      	b.n	8007ade <HAL_UART_IRQHandler+0x662>
    return;
 8007ad0:	bf00      	nop
 8007ad2:	e004      	b.n	8007ade <HAL_UART_IRQHandler+0x662>
      return;
 8007ad4:	bf00      	nop
 8007ad6:	e002      	b.n	8007ade <HAL_UART_IRQHandler+0x662>
      return;
 8007ad8:	bf00      	nop
 8007ada:	e000      	b.n	8007ade <HAL_UART_IRQHandler+0x662>
    return;
 8007adc:	bf00      	nop
  }
}
 8007ade:	37e8      	adds	r7, #232	@ 0xe8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a09      	ldr	r2, [pc, #36]	@ (8007bd0 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d009      	beq.n	8007bc4 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	615a      	str	r2, [r3, #20]
  }
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	40008000 	.word	0x40008000

08007bd4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a18      	ldr	r2, [pc, #96]	@ (8007c44 <HAL_UART_EnableReceiverTimeout+0x70>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d027      	beq.n	8007c36 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bec:	2b20      	cmp	r3, #32
 8007bee:	d120      	bne.n	8007c32 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d101      	bne.n	8007bfe <HAL_UART_EnableReceiverTimeout+0x2a>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e01c      	b.n	8007c38 <HAL_UART_EnableReceiverTimeout+0x64>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2224      	movs	r2, #36	@ 0x24
 8007c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8007c1c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2220      	movs	r2, #32
 8007c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	e002      	b.n	8007c38 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8007c32:	2302      	movs	r3, #2
 8007c34:	e000      	b.n	8007c38 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
  }
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	40008000 	.word	0x40008000

08007c48 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
	...

08007c64 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8007cd8 <UART_InitCallbacksToDefault+0x74>)
 8007c70:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a19      	ldr	r2, [pc, #100]	@ (8007cdc <UART_InitCallbacksToDefault+0x78>)
 8007c78:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a18      	ldr	r2, [pc, #96]	@ (8007ce0 <UART_InitCallbacksToDefault+0x7c>)
 8007c80:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a17      	ldr	r2, [pc, #92]	@ (8007ce4 <UART_InitCallbacksToDefault+0x80>)
 8007c88:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a16      	ldr	r2, [pc, #88]	@ (8007ce8 <UART_InitCallbacksToDefault+0x84>)
 8007c90:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a15      	ldr	r2, [pc, #84]	@ (8007cec <UART_InitCallbacksToDefault+0x88>)
 8007c98:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a14      	ldr	r2, [pc, #80]	@ (8007cf0 <UART_InitCallbacksToDefault+0x8c>)
 8007ca0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a13      	ldr	r2, [pc, #76]	@ (8007cf4 <UART_InitCallbacksToDefault+0x90>)
 8007ca8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a12      	ldr	r2, [pc, #72]	@ (8007cf8 <UART_InitCallbacksToDefault+0x94>)
 8007cb0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a11      	ldr	r2, [pc, #68]	@ (8007cfc <UART_InitCallbacksToDefault+0x98>)
 8007cb8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a10      	ldr	r2, [pc, #64]	@ (8007d00 <UART_InitCallbacksToDefault+0x9c>)
 8007cc0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8007d04 <UART_InitCallbacksToDefault+0xa0>)
 8007cc8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	08007af9 	.word	0x08007af9
 8007cdc:	08007ae5 	.word	0x08007ae5
 8007ce0:	08007b21 	.word	0x08007b21
 8007ce4:	08007b0d 	.word	0x08007b0d
 8007ce8:	08007b35 	.word	0x08007b35
 8007cec:	08007b49 	.word	0x08007b49
 8007cf0:	08007b5d 	.word	0x08007b5d
 8007cf4:	08007b71 	.word	0x08007b71
 8007cf8:	08008c55 	.word	0x08008c55
 8007cfc:	08008c69 	.word	0x08008c69
 8007d00:	08008c7d 	.word	0x08008c7d
 8007d04:	08007b85 	.word	0x08007b85

08007d08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d0c:	b08c      	sub	sp, #48	@ 0x30
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	431a      	orrs	r2, r3
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	431a      	orrs	r2, r3
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	4baa      	ldr	r3, [pc, #680]	@ (8007fe0 <UART_SetConfig+0x2d8>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	6812      	ldr	r2, [r2, #0]
 8007d3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d40:	430b      	orrs	r3, r1
 8007d42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	68da      	ldr	r2, [r3, #12]
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a9f      	ldr	r2, [pc, #636]	@ (8007fe4 <UART_SetConfig+0x2dc>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d004      	beq.n	8007d74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d70:	4313      	orrs	r3, r2
 8007d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007d7e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	6812      	ldr	r2, [r2, #0]
 8007d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d88:	430b      	orrs	r3, r1
 8007d8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d92:	f023 010f 	bic.w	r1, r3, #15
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a90      	ldr	r2, [pc, #576]	@ (8007fe8 <UART_SetConfig+0x2e0>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d125      	bne.n	8007df8 <UART_SetConfig+0xf0>
 8007dac:	4b8f      	ldr	r3, [pc, #572]	@ (8007fec <UART_SetConfig+0x2e4>)
 8007dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007db2:	f003 0303 	and.w	r3, r3, #3
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	d81a      	bhi.n	8007df0 <UART_SetConfig+0xe8>
 8007dba:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc0 <UART_SetConfig+0xb8>)
 8007dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc0:	08007dd1 	.word	0x08007dd1
 8007dc4:	08007de1 	.word	0x08007de1
 8007dc8:	08007dd9 	.word	0x08007dd9
 8007dcc:	08007de9 	.word	0x08007de9
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dd6:	e116      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dde:	e112      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007de0:	2304      	movs	r3, #4
 8007de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007de6:	e10e      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007de8:	2308      	movs	r3, #8
 8007dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dee:	e10a      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007df0:	2310      	movs	r3, #16
 8007df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007df6:	e106      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a7c      	ldr	r2, [pc, #496]	@ (8007ff0 <UART_SetConfig+0x2e8>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d138      	bne.n	8007e74 <UART_SetConfig+0x16c>
 8007e02:	4b7a      	ldr	r3, [pc, #488]	@ (8007fec <UART_SetConfig+0x2e4>)
 8007e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e08:	f003 030c 	and.w	r3, r3, #12
 8007e0c:	2b0c      	cmp	r3, #12
 8007e0e:	d82d      	bhi.n	8007e6c <UART_SetConfig+0x164>
 8007e10:	a201      	add	r2, pc, #4	@ (adr r2, 8007e18 <UART_SetConfig+0x110>)
 8007e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e16:	bf00      	nop
 8007e18:	08007e4d 	.word	0x08007e4d
 8007e1c:	08007e6d 	.word	0x08007e6d
 8007e20:	08007e6d 	.word	0x08007e6d
 8007e24:	08007e6d 	.word	0x08007e6d
 8007e28:	08007e5d 	.word	0x08007e5d
 8007e2c:	08007e6d 	.word	0x08007e6d
 8007e30:	08007e6d 	.word	0x08007e6d
 8007e34:	08007e6d 	.word	0x08007e6d
 8007e38:	08007e55 	.word	0x08007e55
 8007e3c:	08007e6d 	.word	0x08007e6d
 8007e40:	08007e6d 	.word	0x08007e6d
 8007e44:	08007e6d 	.word	0x08007e6d
 8007e48:	08007e65 	.word	0x08007e65
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e52:	e0d8      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007e54:	2302      	movs	r3, #2
 8007e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e5a:	e0d4      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007e5c:	2304      	movs	r3, #4
 8007e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e62:	e0d0      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007e64:	2308      	movs	r3, #8
 8007e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e6a:	e0cc      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007e6c:	2310      	movs	r3, #16
 8007e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e72:	e0c8      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a5e      	ldr	r2, [pc, #376]	@ (8007ff4 <UART_SetConfig+0x2ec>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d125      	bne.n	8007eca <UART_SetConfig+0x1c2>
 8007e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8007fec <UART_SetConfig+0x2e4>)
 8007e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007e88:	2b30      	cmp	r3, #48	@ 0x30
 8007e8a:	d016      	beq.n	8007eba <UART_SetConfig+0x1b2>
 8007e8c:	2b30      	cmp	r3, #48	@ 0x30
 8007e8e:	d818      	bhi.n	8007ec2 <UART_SetConfig+0x1ba>
 8007e90:	2b20      	cmp	r3, #32
 8007e92:	d00a      	beq.n	8007eaa <UART_SetConfig+0x1a2>
 8007e94:	2b20      	cmp	r3, #32
 8007e96:	d814      	bhi.n	8007ec2 <UART_SetConfig+0x1ba>
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <UART_SetConfig+0x19a>
 8007e9c:	2b10      	cmp	r3, #16
 8007e9e:	d008      	beq.n	8007eb2 <UART_SetConfig+0x1aa>
 8007ea0:	e00f      	b.n	8007ec2 <UART_SetConfig+0x1ba>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ea8:	e0ad      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007eaa:	2302      	movs	r3, #2
 8007eac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eb0:	e0a9      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007eb2:	2304      	movs	r3, #4
 8007eb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eb8:	e0a5      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007eba:	2308      	movs	r3, #8
 8007ebc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ec0:	e0a1      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007ec2:	2310      	movs	r3, #16
 8007ec4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ec8:	e09d      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a4a      	ldr	r2, [pc, #296]	@ (8007ff8 <UART_SetConfig+0x2f0>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d125      	bne.n	8007f20 <UART_SetConfig+0x218>
 8007ed4:	4b45      	ldr	r3, [pc, #276]	@ (8007fec <UART_SetConfig+0x2e4>)
 8007ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eda:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ede:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ee0:	d016      	beq.n	8007f10 <UART_SetConfig+0x208>
 8007ee2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ee4:	d818      	bhi.n	8007f18 <UART_SetConfig+0x210>
 8007ee6:	2b80      	cmp	r3, #128	@ 0x80
 8007ee8:	d00a      	beq.n	8007f00 <UART_SetConfig+0x1f8>
 8007eea:	2b80      	cmp	r3, #128	@ 0x80
 8007eec:	d814      	bhi.n	8007f18 <UART_SetConfig+0x210>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d002      	beq.n	8007ef8 <UART_SetConfig+0x1f0>
 8007ef2:	2b40      	cmp	r3, #64	@ 0x40
 8007ef4:	d008      	beq.n	8007f08 <UART_SetConfig+0x200>
 8007ef6:	e00f      	b.n	8007f18 <UART_SetConfig+0x210>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007efe:	e082      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007f00:	2302      	movs	r3, #2
 8007f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f06:	e07e      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007f08:	2304      	movs	r3, #4
 8007f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f0e:	e07a      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007f10:	2308      	movs	r3, #8
 8007f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f16:	e076      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007f18:	2310      	movs	r3, #16
 8007f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f1e:	e072      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a35      	ldr	r2, [pc, #212]	@ (8007ffc <UART_SetConfig+0x2f4>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d12a      	bne.n	8007f80 <UART_SetConfig+0x278>
 8007f2a:	4b30      	ldr	r3, [pc, #192]	@ (8007fec <UART_SetConfig+0x2e4>)
 8007f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f38:	d01a      	beq.n	8007f70 <UART_SetConfig+0x268>
 8007f3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f3e:	d81b      	bhi.n	8007f78 <UART_SetConfig+0x270>
 8007f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f44:	d00c      	beq.n	8007f60 <UART_SetConfig+0x258>
 8007f46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f4a:	d815      	bhi.n	8007f78 <UART_SetConfig+0x270>
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d003      	beq.n	8007f58 <UART_SetConfig+0x250>
 8007f50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f54:	d008      	beq.n	8007f68 <UART_SetConfig+0x260>
 8007f56:	e00f      	b.n	8007f78 <UART_SetConfig+0x270>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f5e:	e052      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007f60:	2302      	movs	r3, #2
 8007f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f66:	e04e      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007f68:	2304      	movs	r3, #4
 8007f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f6e:	e04a      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007f70:	2308      	movs	r3, #8
 8007f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f76:	e046      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007f78:	2310      	movs	r3, #16
 8007f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f7e:	e042      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a17      	ldr	r2, [pc, #92]	@ (8007fe4 <UART_SetConfig+0x2dc>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d13a      	bne.n	8008000 <UART_SetConfig+0x2f8>
 8007f8a:	4b18      	ldr	r3, [pc, #96]	@ (8007fec <UART_SetConfig+0x2e4>)
 8007f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007f94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f98:	d01a      	beq.n	8007fd0 <UART_SetConfig+0x2c8>
 8007f9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f9e:	d81b      	bhi.n	8007fd8 <UART_SetConfig+0x2d0>
 8007fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fa4:	d00c      	beq.n	8007fc0 <UART_SetConfig+0x2b8>
 8007fa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007faa:	d815      	bhi.n	8007fd8 <UART_SetConfig+0x2d0>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <UART_SetConfig+0x2b0>
 8007fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fb4:	d008      	beq.n	8007fc8 <UART_SetConfig+0x2c0>
 8007fb6:	e00f      	b.n	8007fd8 <UART_SetConfig+0x2d0>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fbe:	e022      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fc6:	e01e      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007fc8:	2304      	movs	r3, #4
 8007fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fce:	e01a      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007fd0:	2308      	movs	r3, #8
 8007fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fd6:	e016      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007fd8:	2310      	movs	r3, #16
 8007fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fde:	e012      	b.n	8008006 <UART_SetConfig+0x2fe>
 8007fe0:	cfff69f3 	.word	0xcfff69f3
 8007fe4:	40008000 	.word	0x40008000
 8007fe8:	40013800 	.word	0x40013800
 8007fec:	40021000 	.word	0x40021000
 8007ff0:	40004400 	.word	0x40004400
 8007ff4:	40004800 	.word	0x40004800
 8007ff8:	40004c00 	.word	0x40004c00
 8007ffc:	40005000 	.word	0x40005000
 8008000:	2310      	movs	r3, #16
 8008002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4aae      	ldr	r2, [pc, #696]	@ (80082c4 <UART_SetConfig+0x5bc>)
 800800c:	4293      	cmp	r3, r2
 800800e:	f040 8097 	bne.w	8008140 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008012:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008016:	2b08      	cmp	r3, #8
 8008018:	d823      	bhi.n	8008062 <UART_SetConfig+0x35a>
 800801a:	a201      	add	r2, pc, #4	@ (adr r2, 8008020 <UART_SetConfig+0x318>)
 800801c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008020:	08008045 	.word	0x08008045
 8008024:	08008063 	.word	0x08008063
 8008028:	0800804d 	.word	0x0800804d
 800802c:	08008063 	.word	0x08008063
 8008030:	08008053 	.word	0x08008053
 8008034:	08008063 	.word	0x08008063
 8008038:	08008063 	.word	0x08008063
 800803c:	08008063 	.word	0x08008063
 8008040:	0800805b 	.word	0x0800805b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008044:	f7fc fa6c 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8008048:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800804a:	e010      	b.n	800806e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800804c:	4b9e      	ldr	r3, [pc, #632]	@ (80082c8 <UART_SetConfig+0x5c0>)
 800804e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008050:	e00d      	b.n	800806e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008052:	f7fc f9f7 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 8008056:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008058:	e009      	b.n	800806e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800805a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800805e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008060:	e005      	b.n	800806e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800806c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 8130 	beq.w	80082d6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800807a:	4a94      	ldr	r2, [pc, #592]	@ (80082cc <UART_SetConfig+0x5c4>)
 800807c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008080:	461a      	mov	r2, r3
 8008082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008084:	fbb3 f3f2 	udiv	r3, r3, r2
 8008088:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	4613      	mov	r3, r2
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	4413      	add	r3, r2
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	429a      	cmp	r2, r3
 8008098:	d305      	bcc.n	80080a6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d903      	bls.n	80080ae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80080ac:	e113      	b.n	80082d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b0:	2200      	movs	r2, #0
 80080b2:	60bb      	str	r3, [r7, #8]
 80080b4:	60fa      	str	r2, [r7, #12]
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ba:	4a84      	ldr	r2, [pc, #528]	@ (80082cc <UART_SetConfig+0x5c4>)
 80080bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	2200      	movs	r2, #0
 80080c4:	603b      	str	r3, [r7, #0]
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080d0:	f7f8 fce0 	bl	8000a94 <__aeabi_uldivmod>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4610      	mov	r0, r2
 80080da:	4619      	mov	r1, r3
 80080dc:	f04f 0200 	mov.w	r2, #0
 80080e0:	f04f 0300 	mov.w	r3, #0
 80080e4:	020b      	lsls	r3, r1, #8
 80080e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080ea:	0202      	lsls	r2, r0, #8
 80080ec:	6979      	ldr	r1, [r7, #20]
 80080ee:	6849      	ldr	r1, [r1, #4]
 80080f0:	0849      	lsrs	r1, r1, #1
 80080f2:	2000      	movs	r0, #0
 80080f4:	460c      	mov	r4, r1
 80080f6:	4605      	mov	r5, r0
 80080f8:	eb12 0804 	adds.w	r8, r2, r4
 80080fc:	eb43 0905 	adc.w	r9, r3, r5
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	469a      	mov	sl, r3
 8008108:	4693      	mov	fp, r2
 800810a:	4652      	mov	r2, sl
 800810c:	465b      	mov	r3, fp
 800810e:	4640      	mov	r0, r8
 8008110:	4649      	mov	r1, r9
 8008112:	f7f8 fcbf 	bl	8000a94 <__aeabi_uldivmod>
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	4613      	mov	r3, r2
 800811c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008124:	d308      	bcc.n	8008138 <UART_SetConfig+0x430>
 8008126:	6a3b      	ldr	r3, [r7, #32]
 8008128:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800812c:	d204      	bcs.n	8008138 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	6a3a      	ldr	r2, [r7, #32]
 8008134:	60da      	str	r2, [r3, #12]
 8008136:	e0ce      	b.n	80082d6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800813e:	e0ca      	b.n	80082d6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008148:	d166      	bne.n	8008218 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800814a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800814e:	2b08      	cmp	r3, #8
 8008150:	d827      	bhi.n	80081a2 <UART_SetConfig+0x49a>
 8008152:	a201      	add	r2, pc, #4	@ (adr r2, 8008158 <UART_SetConfig+0x450>)
 8008154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008158:	0800817d 	.word	0x0800817d
 800815c:	08008185 	.word	0x08008185
 8008160:	0800818d 	.word	0x0800818d
 8008164:	080081a3 	.word	0x080081a3
 8008168:	08008193 	.word	0x08008193
 800816c:	080081a3 	.word	0x080081a3
 8008170:	080081a3 	.word	0x080081a3
 8008174:	080081a3 	.word	0x080081a3
 8008178:	0800819b 	.word	0x0800819b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800817c:	f7fc f9d0 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8008180:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008182:	e014      	b.n	80081ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008184:	f7fc f9e2 	bl	800454c <HAL_RCC_GetPCLK2Freq>
 8008188:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800818a:	e010      	b.n	80081ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800818c:	4b4e      	ldr	r3, [pc, #312]	@ (80082c8 <UART_SetConfig+0x5c0>)
 800818e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008190:	e00d      	b.n	80081ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008192:	f7fc f957 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 8008196:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008198:	e009      	b.n	80081ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800819a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800819e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081a0:	e005      	b.n	80081ae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80081a2:	2300      	movs	r3, #0
 80081a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80081ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 8090 	beq.w	80082d6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ba:	4a44      	ldr	r2, [pc, #272]	@ (80082cc <UART_SetConfig+0x5c4>)
 80081bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081c0:	461a      	mov	r2, r3
 80081c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80081c8:	005a      	lsls	r2, r3, #1
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	085b      	lsrs	r3, r3, #1
 80081d0:	441a      	add	r2, r3
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081dc:	6a3b      	ldr	r3, [r7, #32]
 80081de:	2b0f      	cmp	r3, #15
 80081e0:	d916      	bls.n	8008210 <UART_SetConfig+0x508>
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081e8:	d212      	bcs.n	8008210 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	f023 030f 	bic.w	r3, r3, #15
 80081f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	085b      	lsrs	r3, r3, #1
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	f003 0307 	and.w	r3, r3, #7
 80081fe:	b29a      	uxth	r2, r3
 8008200:	8bfb      	ldrh	r3, [r7, #30]
 8008202:	4313      	orrs	r3, r2
 8008204:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	8bfa      	ldrh	r2, [r7, #30]
 800820c:	60da      	str	r2, [r3, #12]
 800820e:	e062      	b.n	80082d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008216:	e05e      	b.n	80082d6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008218:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800821c:	2b08      	cmp	r3, #8
 800821e:	d828      	bhi.n	8008272 <UART_SetConfig+0x56a>
 8008220:	a201      	add	r2, pc, #4	@ (adr r2, 8008228 <UART_SetConfig+0x520>)
 8008222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008226:	bf00      	nop
 8008228:	0800824d 	.word	0x0800824d
 800822c:	08008255 	.word	0x08008255
 8008230:	0800825d 	.word	0x0800825d
 8008234:	08008273 	.word	0x08008273
 8008238:	08008263 	.word	0x08008263
 800823c:	08008273 	.word	0x08008273
 8008240:	08008273 	.word	0x08008273
 8008244:	08008273 	.word	0x08008273
 8008248:	0800826b 	.word	0x0800826b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800824c:	f7fc f968 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8008250:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008252:	e014      	b.n	800827e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008254:	f7fc f97a 	bl	800454c <HAL_RCC_GetPCLK2Freq>
 8008258:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800825a:	e010      	b.n	800827e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800825c:	4b1a      	ldr	r3, [pc, #104]	@ (80082c8 <UART_SetConfig+0x5c0>)
 800825e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008260:	e00d      	b.n	800827e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008262:	f7fc f8ef 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 8008266:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008268:	e009      	b.n	800827e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800826a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800826e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008270:	e005      	b.n	800827e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800827c:	bf00      	nop
    }

    if (pclk != 0U)
 800827e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008280:	2b00      	cmp	r3, #0
 8008282:	d028      	beq.n	80082d6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008288:	4a10      	ldr	r2, [pc, #64]	@ (80082cc <UART_SetConfig+0x5c4>)
 800828a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800828e:	461a      	mov	r2, r3
 8008290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008292:	fbb3 f2f2 	udiv	r2, r3, r2
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	085b      	lsrs	r3, r3, #1
 800829c:	441a      	add	r2, r3
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082a8:	6a3b      	ldr	r3, [r7, #32]
 80082aa:	2b0f      	cmp	r3, #15
 80082ac:	d910      	bls.n	80082d0 <UART_SetConfig+0x5c8>
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082b4:	d20c      	bcs.n	80082d0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	60da      	str	r2, [r3, #12]
 80082c0:	e009      	b.n	80082d6 <UART_SetConfig+0x5ce>
 80082c2:	bf00      	nop
 80082c4:	40008000 	.word	0x40008000
 80082c8:	00f42400 	.word	0x00f42400
 80082cc:	08008fa8 	.word	0x08008fa8
      }
      else
      {
        ret = HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2201      	movs	r2, #1
 80082da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	2200      	movs	r2, #0
 80082ea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	2200      	movs	r2, #0
 80082f0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80082f2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3730      	adds	r7, #48	@ 0x30
 80082fa:	46bd      	mov	sp, r7
 80082fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800830c:	f003 0308 	and.w	r3, r3, #8
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00a      	beq.n	800832a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	430a      	orrs	r2, r1
 8008328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00a      	beq.n	800834c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	430a      	orrs	r2, r1
 800834a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008350:	f003 0302 	and.w	r3, r3, #2
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00a      	beq.n	800836e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008372:	f003 0304 	and.w	r3, r3, #4
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	430a      	orrs	r2, r1
 800838e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008394:	f003 0310 	and.w	r3, r3, #16
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00a      	beq.n	80083b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b6:	f003 0320 	and.w	r3, r3, #32
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00a      	beq.n	80083d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d01a      	beq.n	8008416 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	430a      	orrs	r2, r1
 80083f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083fe:	d10a      	bne.n	8008416 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800841a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	430a      	orrs	r2, r1
 8008436:	605a      	str	r2, [r3, #4]
  }
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b098      	sub	sp, #96	@ 0x60
 8008448:	af02      	add	r7, sp, #8
 800844a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008454:	f7fa fcf4 	bl	8002e40 <HAL_GetTick>
 8008458:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0308 	and.w	r3, r3, #8
 8008464:	2b08      	cmp	r3, #8
 8008466:	d12f      	bne.n	80084c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008468:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008470:	2200      	movs	r2, #0
 8008472:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f88e 	bl	8008598 <UART_WaitOnFlagUntilTimeout>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d022      	beq.n	80084c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848a:	e853 3f00 	ldrex	r3, [r3]
 800848e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008492:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008496:	653b      	str	r3, [r7, #80]	@ 0x50
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	461a      	mov	r2, r3
 800849e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80084a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084a8:	e841 2300 	strex	r3, r2, [r1]
 80084ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e6      	bne.n	8008482 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2220      	movs	r2, #32
 80084b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e063      	b.n	8008590 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0304 	and.w	r3, r3, #4
 80084d2:	2b04      	cmp	r3, #4
 80084d4:	d149      	bne.n	800856a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084de:	2200      	movs	r2, #0
 80084e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f857 	bl	8008598 <UART_WaitOnFlagUntilTimeout>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d03c      	beq.n	800856a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f8:	e853 3f00 	ldrex	r3, [r3]
 80084fc:	623b      	str	r3, [r7, #32]
   return(result);
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008504:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800850e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008510:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008512:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008516:	e841 2300 	strex	r3, r2, [r1]
 800851a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800851c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1e6      	bne.n	80084f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3308      	adds	r3, #8
 8008528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	e853 3f00 	ldrex	r3, [r3]
 8008530:	60fb      	str	r3, [r7, #12]
   return(result);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f023 0301 	bic.w	r3, r3, #1
 8008538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	3308      	adds	r3, #8
 8008540:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008542:	61fa      	str	r2, [r7, #28]
 8008544:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008546:	69b9      	ldr	r1, [r7, #24]
 8008548:	69fa      	ldr	r2, [r7, #28]
 800854a:	e841 2300 	strex	r3, r2, [r1]
 800854e:	617b      	str	r3, [r7, #20]
   return(result);
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1e5      	bne.n	8008522 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2220      	movs	r2, #32
 800855a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e012      	b.n	8008590 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2220      	movs	r2, #32
 800856e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2220      	movs	r2, #32
 8008576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3758      	adds	r7, #88	@ 0x58
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	603b      	str	r3, [r7, #0]
 80085a4:	4613      	mov	r3, r2
 80085a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085a8:	e04f      	b.n	800864a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b0:	d04b      	beq.n	800864a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085b2:	f7fa fc45 	bl	8002e40 <HAL_GetTick>
 80085b6:	4602      	mov	r2, r0
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	69ba      	ldr	r2, [r7, #24]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d302      	bcc.n	80085c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d101      	bne.n	80085cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e04e      	b.n	800866a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0304 	and.w	r3, r3, #4
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d037      	beq.n	800864a <UART_WaitOnFlagUntilTimeout+0xb2>
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2b80      	cmp	r3, #128	@ 0x80
 80085de:	d034      	beq.n	800864a <UART_WaitOnFlagUntilTimeout+0xb2>
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b40      	cmp	r3, #64	@ 0x40
 80085e4:	d031      	beq.n	800864a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	69db      	ldr	r3, [r3, #28]
 80085ec:	f003 0308 	and.w	r3, r3, #8
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	d110      	bne.n	8008616 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2208      	movs	r2, #8
 80085fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f000 f920 	bl	8008842 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2208      	movs	r2, #8
 8008606:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e029      	b.n	800866a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	69db      	ldr	r3, [r3, #28]
 800861c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008624:	d111      	bne.n	800864a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800862e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 f906 	bl	8008842 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2220      	movs	r2, #32
 800863a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e00f      	b.n	800866a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	69da      	ldr	r2, [r3, #28]
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	4013      	ands	r3, r2
 8008654:	68ba      	ldr	r2, [r7, #8]
 8008656:	429a      	cmp	r2, r3
 8008658:	bf0c      	ite	eq
 800865a:	2301      	moveq	r3, #1
 800865c:	2300      	movne	r3, #0
 800865e:	b2db      	uxtb	r3, r3
 8008660:	461a      	mov	r2, r3
 8008662:	79fb      	ldrb	r3, [r7, #7]
 8008664:	429a      	cmp	r2, r3
 8008666:	d0a0      	beq.n	80085aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b096      	sub	sp, #88	@ 0x58
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	4613      	mov	r3, r2
 8008680:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	88fa      	ldrh	r2, [r7, #6]
 800868c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2222      	movs	r2, #34	@ 0x22
 800869c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d02d      	beq.n	8008706 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086b0:	4a40      	ldr	r2, [pc, #256]	@ (80087b4 <UART_Start_Receive_DMA+0x140>)
 80086b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ba:	4a3f      	ldr	r2, [pc, #252]	@ (80087b8 <UART_Start_Receive_DMA+0x144>)
 80086bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086c4:	4a3d      	ldr	r2, [pc, #244]	@ (80087bc <UART_Start_Receive_DMA+0x148>)
 80086c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ce:	2200      	movs	r2, #0
 80086d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	3324      	adds	r3, #36	@ 0x24
 80086de:	4619      	mov	r1, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086e4:	461a      	mov	r2, r3
 80086e6:	88fb      	ldrh	r3, [r7, #6]
 80086e8:	f7fa fd6e 	bl	80031c8 <HAL_DMA_Start_IT>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d009      	beq.n	8008706 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2210      	movs	r2, #16
 80086f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e051      	b.n	80087aa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d018      	beq.n	8008740 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800871c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800871e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008722:	657b      	str	r3, [r7, #84]	@ 0x54
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	461a      	mov	r2, r3
 800872a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800872c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800872e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008732:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800873a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e6      	bne.n	800870e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3308      	adds	r3, #8
 8008746:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874a:	e853 3f00 	ldrex	r3, [r3]
 800874e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008752:	f043 0301 	orr.w	r3, r3, #1
 8008756:	653b      	str	r3, [r7, #80]	@ 0x50
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3308      	adds	r3, #8
 800875e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008760:	637a      	str	r2, [r7, #52]	@ 0x34
 8008762:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008764:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008766:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008768:	e841 2300 	strex	r3, r2, [r1]
 800876c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800876e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1e5      	bne.n	8008740 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3308      	adds	r3, #8
 800877a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	613b      	str	r3, [r7, #16]
   return(result);
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800878a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3308      	adds	r3, #8
 8008792:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008794:	623a      	str	r2, [r7, #32]
 8008796:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	69f9      	ldr	r1, [r7, #28]
 800879a:	6a3a      	ldr	r2, [r7, #32]
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e5      	bne.n	8008774 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3758      	adds	r7, #88	@ 0x58
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	080089cd 	.word	0x080089cd
 80087b8:	08008b01 	.word	0x08008b01
 80087bc:	08008b47 	.word	0x08008b47

080087c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b08f      	sub	sp, #60	@ 0x3c
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ce:	6a3b      	ldr	r3, [r7, #32]
 80087d0:	e853 3f00 	ldrex	r3, [r3]
 80087d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80087dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087e8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087ee:	e841 2300 	strex	r3, r2, [r1]
 80087f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1e6      	bne.n	80087c8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3308      	adds	r3, #8
 8008800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	e853 3f00 	ldrex	r3, [r3]
 8008808:	60bb      	str	r3, [r7, #8]
   return(result);
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008810:	633b      	str	r3, [r7, #48]	@ 0x30
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3308      	adds	r3, #8
 8008818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800881a:	61ba      	str	r2, [r7, #24]
 800881c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881e:	6979      	ldr	r1, [r7, #20]
 8008820:	69ba      	ldr	r2, [r7, #24]
 8008822:	e841 2300 	strex	r3, r2, [r1]
 8008826:	613b      	str	r3, [r7, #16]
   return(result);
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1e5      	bne.n	80087fa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2220      	movs	r2, #32
 8008832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008836:	bf00      	nop
 8008838:	373c      	adds	r7, #60	@ 0x3c
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008842:	b480      	push	{r7}
 8008844:	b095      	sub	sp, #84	@ 0x54
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008852:	e853 3f00 	ldrex	r3, [r3]
 8008856:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800885e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	461a      	mov	r2, r3
 8008866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008868:	643b      	str	r3, [r7, #64]	@ 0x40
 800886a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800886e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008870:	e841 2300 	strex	r3, r2, [r1]
 8008874:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1e6      	bne.n	800884a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3308      	adds	r3, #8
 8008882:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	e853 3f00 	ldrex	r3, [r3]
 800888a:	61fb      	str	r3, [r7, #28]
   return(result);
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008892:	f023 0301 	bic.w	r3, r3, #1
 8008896:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3308      	adds	r3, #8
 800889e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088a8:	e841 2300 	strex	r3, r2, [r1]
 80088ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e3      	bne.n	800887c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d118      	bne.n	80088ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	e853 3f00 	ldrex	r3, [r3]
 80088c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f023 0310 	bic.w	r3, r3, #16
 80088d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	461a      	mov	r2, r3
 80088d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088da:	61bb      	str	r3, [r7, #24]
 80088dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088de:	6979      	ldr	r1, [r7, #20]
 80088e0:	69ba      	ldr	r2, [r7, #24]
 80088e2:	e841 2300 	strex	r3, r2, [r1]
 80088e6:	613b      	str	r3, [r7, #16]
   return(result);
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1e6      	bne.n	80088bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2220      	movs	r2, #32
 80088f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008902:	bf00      	nop
 8008904:	3754      	adds	r7, #84	@ 0x54
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b090      	sub	sp, #64	@ 0x40
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 0320 	and.w	r3, r3, #32
 8008926:	2b00      	cmp	r3, #0
 8008928:	d137      	bne.n	800899a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800892a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800892c:	2200      	movs	r2, #0
 800892e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	3308      	adds	r3, #8
 8008938:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893c:	e853 3f00 	ldrex	r3, [r3]
 8008940:	623b      	str	r3, [r7, #32]
   return(result);
 8008942:	6a3b      	ldr	r3, [r7, #32]
 8008944:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008948:	63bb      	str	r3, [r7, #56]	@ 0x38
 800894a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3308      	adds	r3, #8
 8008950:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008952:	633a      	str	r2, [r7, #48]	@ 0x30
 8008954:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008956:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800895a:	e841 2300 	strex	r3, r2, [r1]
 800895e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1e5      	bne.n	8008932 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	e853 3f00 	ldrex	r3, [r3]
 8008972:	60fb      	str	r3, [r7, #12]
   return(result);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800897a:	637b      	str	r3, [r7, #52]	@ 0x34
 800897c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	461a      	mov	r2, r3
 8008982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008984:	61fb      	str	r3, [r7, #28]
 8008986:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008988:	69b9      	ldr	r1, [r7, #24]
 800898a:	69fa      	ldr	r2, [r7, #28]
 800898c:	e841 2300 	strex	r3, r2, [r1]
 8008990:	617b      	str	r3, [r7, #20]
   return(result);
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1e6      	bne.n	8008966 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008998:	e004      	b.n	80089a4 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800899a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800899c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089a0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80089a2:	4798      	blx	r3
}
 80089a4:	bf00      	nop
 80089a6:	3740      	adds	r7, #64	@ 0x40
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089c4:	bf00      	nop
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b09c      	sub	sp, #112	@ 0x70
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0320 	and.w	r3, r3, #32
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d171      	bne.n	8008acc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80089e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089ea:	2200      	movs	r2, #0
 80089ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089f8:	e853 3f00 	ldrex	r3, [r3]
 80089fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80089fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e6      	bne.n	80089f0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3308      	adds	r3, #8
 8008a28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a34:	f023 0301 	bic.w	r3, r3, #1
 8008a38:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3308      	adds	r3, #8
 8008a40:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008a42:	647a      	str	r2, [r7, #68]	@ 0x44
 8008a44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e5      	bne.n	8008a22 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3308      	adds	r3, #8
 8008a5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a60:	e853 3f00 	ldrex	r3, [r3]
 8008a64:	623b      	str	r3, [r7, #32]
   return(result);
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3308      	adds	r3, #8
 8008a74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008a76:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a7e:	e841 2300 	strex	r3, r2, [r1]
 8008a82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1e5      	bne.n	8008a56 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008a8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a8c:	2220      	movs	r2, #32
 8008a8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d118      	bne.n	8008acc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	e853 3f00 	ldrex	r3, [r3]
 8008aa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f023 0310 	bic.w	r3, r3, #16
 8008aae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ab8:	61fb      	str	r3, [r7, #28]
 8008aba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abc:	69b9      	ldr	r1, [r7, #24]
 8008abe:	69fa      	ldr	r2, [r7, #28]
 8008ac0:	e841 2300 	strex	r3, r2, [r1]
 8008ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1e6      	bne.n	8008a9a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008acc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ace:	2200      	movs	r2, #0
 8008ad0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d109      	bne.n	8008aee <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8008ada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008adc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008ae0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ae2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008ae6:	4611      	mov	r1, r2
 8008ae8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008aea:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008aec:	e004      	b.n	8008af8 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8008aee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008af0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008af4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008af6:	4798      	blx	r3
}
 8008af8:	bf00      	nop
 8008afa:	3770      	adds	r7, #112	@ 0x70
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b0c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2201      	movs	r2, #1
 8008b12:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d10b      	bne.n	8008b34 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008b28:	0852      	lsrs	r2, r2, #1
 8008b2a:	b292      	uxth	r2, r2
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b32:	e004      	b.n	8008b3e <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	4798      	blx	r3
}
 8008b3e:	bf00      	nop
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b086      	sub	sp, #24
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b52:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b5a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b6e:	2b80      	cmp	r3, #128	@ 0x80
 8008b70:	d109      	bne.n	8008b86 <UART_DMAError+0x40>
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	2b21      	cmp	r3, #33	@ 0x21
 8008b76:	d106      	bne.n	8008b86 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008b80:	6978      	ldr	r0, [r7, #20]
 8008b82:	f7ff fe1d 	bl	80087c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b90:	2b40      	cmp	r3, #64	@ 0x40
 8008b92:	d109      	bne.n	8008ba8 <UART_DMAError+0x62>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2b22      	cmp	r3, #34	@ 0x22
 8008b98:	d106      	bne.n	8008ba8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008ba2:	6978      	ldr	r0, [r7, #20]
 8008ba4:	f7ff fe4d 	bl	8008842 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bae:	f043 0210 	orr.w	r2, r3, #16
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008bbe:	6978      	ldr	r0, [r7, #20]
 8008bc0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bc2:	bf00      	nop
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bf2:	bf00      	nop
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b088      	sub	sp, #32
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c16:	61fb      	str	r3, [r7, #28]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	61bb      	str	r3, [r7, #24]
 8008c22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c24:	6979      	ldr	r1, [r7, #20]
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	e841 2300 	strex	r3, r2, [r1]
 8008c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e6      	bne.n	8008c02 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2220      	movs	r2, #32
 8008c38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c4c:	bf00      	nop
 8008c4e:	3720      	adds	r7, #32
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d101      	bne.n	8008ca6 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	e027      	b.n	8008cf6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2224      	movs	r2, #36	@ 0x24
 8008cb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f022 0201 	bic.w	r2, r2, #1
 8008ccc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008cd4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2220      	movs	r2, #32
 8008ce8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d101      	bne.n	8008d1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d16:	2302      	movs	r3, #2
 8008d18:	e02d      	b.n	8008d76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2224      	movs	r2, #36	@ 0x24
 8008d26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f022 0201 	bic.w	r2, r2, #1
 8008d40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	683a      	ldr	r2, [r7, #0]
 8008d52:	430a      	orrs	r2, r1
 8008d54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f850 	bl	8008dfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2220      	movs	r2, #32
 8008d68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d101      	bne.n	8008d96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d92:	2302      	movs	r3, #2
 8008d94:	e02d      	b.n	8008df2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2224      	movs	r2, #36	@ 0x24
 8008da2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f022 0201 	bic.w	r2, r2, #1
 8008dbc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	683a      	ldr	r2, [r7, #0]
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f812 	bl	8008dfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2220      	movs	r2, #32
 8008de4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
	...

08008dfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d108      	bne.n	8008e1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e1c:	e031      	b.n	8008e82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e1e:	2308      	movs	r3, #8
 8008e20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e22:	2308      	movs	r3, #8
 8008e24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	0e5b      	lsrs	r3, r3, #25
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	f003 0307 	and.w	r3, r3, #7
 8008e34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	0f5b      	lsrs	r3, r3, #29
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	f003 0307 	and.w	r3, r3, #7
 8008e44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e46:	7bbb      	ldrb	r3, [r7, #14]
 8008e48:	7b3a      	ldrb	r2, [r7, #12]
 8008e4a:	4911      	ldr	r1, [pc, #68]	@ (8008e90 <UARTEx_SetNbDataToProcess+0x94>)
 8008e4c:	5c8a      	ldrb	r2, [r1, r2]
 8008e4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e52:	7b3a      	ldrb	r2, [r7, #12]
 8008e54:	490f      	ldr	r1, [pc, #60]	@ (8008e94 <UARTEx_SetNbDataToProcess+0x98>)
 8008e56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e58:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
 8008e66:	7b7a      	ldrb	r2, [r7, #13]
 8008e68:	4909      	ldr	r1, [pc, #36]	@ (8008e90 <UARTEx_SetNbDataToProcess+0x94>)
 8008e6a:	5c8a      	ldrb	r2, [r1, r2]
 8008e6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e70:	7b7a      	ldrb	r2, [r7, #13]
 8008e72:	4908      	ldr	r1, [pc, #32]	@ (8008e94 <UARTEx_SetNbDataToProcess+0x98>)
 8008e74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e76:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008e82:	bf00      	nop
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	08008fc0 	.word	0x08008fc0
 8008e94:	08008fc8 	.word	0x08008fc8

08008e98 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	ed93 7a06 	vldr	s14, [r3, #24]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	edd3 7a07 	vldr	s15, [r3, #28]
 8008eae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	edd3 7a08 	vldr	s15, [r3, #32]
 8008eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	edd3 7a06 	vldr	s15, [r3, #24]
 8008ec8:	eeb1 7a67 	vneg.f32	s14, s15
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	edd3 7a08 	vldr	s15, [r3, #32]
 8008ed2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a1a      	ldr	r2, [r3, #32]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d006      	beq.n	8008efc <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	330c      	adds	r3, #12
 8008ef2:	220c      	movs	r2, #12
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 f804 	bl	8008f04 <memset>
  }

}
 8008efc:	bf00      	nop
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <memset>:
 8008f04:	4402      	add	r2, r0
 8008f06:	4603      	mov	r3, r0
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d100      	bne.n	8008f0e <memset+0xa>
 8008f0c:	4770      	bx	lr
 8008f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f12:	e7f9      	b.n	8008f08 <memset+0x4>

08008f14 <__libc_init_array>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	4d0d      	ldr	r5, [pc, #52]	@ (8008f4c <__libc_init_array+0x38>)
 8008f18:	4c0d      	ldr	r4, [pc, #52]	@ (8008f50 <__libc_init_array+0x3c>)
 8008f1a:	1b64      	subs	r4, r4, r5
 8008f1c:	10a4      	asrs	r4, r4, #2
 8008f1e:	2600      	movs	r6, #0
 8008f20:	42a6      	cmp	r6, r4
 8008f22:	d109      	bne.n	8008f38 <__libc_init_array+0x24>
 8008f24:	4d0b      	ldr	r5, [pc, #44]	@ (8008f54 <__libc_init_array+0x40>)
 8008f26:	4c0c      	ldr	r4, [pc, #48]	@ (8008f58 <__libc_init_array+0x44>)
 8008f28:	f000 f826 	bl	8008f78 <_init>
 8008f2c:	1b64      	subs	r4, r4, r5
 8008f2e:	10a4      	asrs	r4, r4, #2
 8008f30:	2600      	movs	r6, #0
 8008f32:	42a6      	cmp	r6, r4
 8008f34:	d105      	bne.n	8008f42 <__libc_init_array+0x2e>
 8008f36:	bd70      	pop	{r4, r5, r6, pc}
 8008f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f3c:	4798      	blx	r3
 8008f3e:	3601      	adds	r6, #1
 8008f40:	e7ee      	b.n	8008f20 <__libc_init_array+0xc>
 8008f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f46:	4798      	blx	r3
 8008f48:	3601      	adds	r6, #1
 8008f4a:	e7f2      	b.n	8008f32 <__libc_init_array+0x1e>
 8008f4c:	08008fd8 	.word	0x08008fd8
 8008f50:	08008fd8 	.word	0x08008fd8
 8008f54:	08008fd8 	.word	0x08008fd8
 8008f58:	08008fdc 	.word	0x08008fdc

08008f5c <memcpy>:
 8008f5c:	440a      	add	r2, r1
 8008f5e:	4291      	cmp	r1, r2
 8008f60:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f64:	d100      	bne.n	8008f68 <memcpy+0xc>
 8008f66:	4770      	bx	lr
 8008f68:	b510      	push	{r4, lr}
 8008f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f72:	4291      	cmp	r1, r2
 8008f74:	d1f9      	bne.n	8008f6a <memcpy+0xe>
 8008f76:	bd10      	pop	{r4, pc}

08008f78 <_init>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	bf00      	nop
 8008f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7e:	bc08      	pop	{r3}
 8008f80:	469e      	mov	lr, r3
 8008f82:	4770      	bx	lr

08008f84 <_fini>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	bf00      	nop
 8008f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8a:	bc08      	pop	{r3}
 8008f8c:	469e      	mov	lr, r3
 8008f8e:	4770      	bx	lr
