
MainController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f58  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009130  08009130  0000a130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009170  08009170  0000b220  2**0
                  CONTENTS
  4 .ARM          00000008  08009170  08009170  0000a170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009178  08009178  0000b220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009178  08009178  0000a178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800917c  0800917c  0000a17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08009180  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f2c  20000220  080093a0  0000b220  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000114c  080093a0  0000c14c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016950  00000000  00000000  0000b250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba7  00000000  00000000  00021ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00024748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2e  00000000  00000000  00025958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e96  00000000  00000000  00026786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f59  00000000  00000000  0004d61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe82f  00000000  00000000  00063575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161da4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ebc  00000000  00000000  00161de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00166ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000220 	.word	0x20000220
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009118 	.word	0x08009118

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000224 	.word	0x20000224
 8000214:	08009118 	.word	0x08009118

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b96a 	b.w	8000e50 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14e      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	458c      	cmp	ip, r1
 8000ba4:	4686      	mov	lr, r0
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	d962      	bls.n	8000c72 <__udivmoddi4+0xde>
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f f68c 	uxth.w	r6, ip
 8000bca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bda:	fb04 f106 	mul.w	r1, r4, r6
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bea:	f080 8112 	bcs.w	8000e12 <__udivmoddi4+0x27e>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 810f 	bls.w	8000e12 <__udivmoddi4+0x27e>
 8000bf4:	3c02      	subs	r4, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a59      	subs	r1, r3, r1
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c02:	fb07 1110 	mls	r1, r7, r0, r1
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb00 f606 	mul.w	r6, r0, r6
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x94>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1a:	f080 80fc 	bcs.w	8000e16 <__udivmoddi4+0x282>
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	f240 80f9 	bls.w	8000e16 <__udivmoddi4+0x282>
 8000c24:	4463      	add	r3, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	1b9b      	subs	r3, r3, r6
 8000c2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c2e:	2100      	movs	r1, #0
 8000c30:	b11d      	cbz	r5, 8000c3a <__udivmoddi4+0xa6>
 8000c32:	40d3      	lsrs	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d905      	bls.n	8000c4e <__udivmoddi4+0xba>
 8000c42:	b10d      	cbz	r5, 8000c48 <__udivmoddi4+0xb4>
 8000c44:	e9c5 0100 	strd	r0, r1, [r5]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e7f5      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c4e:	fab3 f183 	clz	r1, r3
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d146      	bne.n	8000ce4 <__udivmoddi4+0x150>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xcc>
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	f0c0 80f0 	bcc.w	8000e40 <__udivmoddi4+0x2ac>
 8000c60:	1a86      	subs	r6, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d0e6      	beq.n	8000c3a <__udivmoddi4+0xa6>
 8000c6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c70:	e7e3      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	f040 8090 	bne.w	8000d98 <__udivmoddi4+0x204>
 8000c78:	eba1 040c 	sub.w	r4, r1, ip
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	fa1f f78c 	uxth.w	r7, ip
 8000c84:	2101      	movs	r1, #1
 8000c86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c96:	fb07 f006 	mul.w	r0, r7, r6
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x11c>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x11a>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f200 80cd 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000cae:	4626      	mov	r6, r4
 8000cb0:	1a1c      	subs	r4, r3, r0
 8000cb2:	fa1f f38e 	uxth.w	r3, lr
 8000cb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cba:	fb08 4410 	mls	r4, r8, r0, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb00 f707 	mul.w	r7, r0, r7
 8000cc6:	429f      	cmp	r7, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x148>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x146>
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	f200 80b0 	bhi.w	8000e3a <__udivmoddi4+0x2a6>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	1bdb      	subs	r3, r3, r7
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	e7a5      	b.n	8000c30 <__udivmoddi4+0x9c>
 8000ce4:	f1c1 0620 	rsb	r6, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 f706 	lsr.w	r7, r2, r6
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf8:	ea43 030c 	orr.w	r3, r3, ip
 8000cfc:	40f4      	lsrs	r4, r6
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	0c38      	lsrs	r0, r7, #16
 8000d04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d08:	fbb4 fef0 	udiv	lr, r4, r0
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fb00 441e 	mls	r4, r0, lr, r4
 8000d14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d18:	fb0e f90c 	mul.w	r9, lr, ip
 8000d1c:	45a1      	cmp	r9, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x1a6>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d2a:	f080 8084 	bcs.w	8000e36 <__udivmoddi4+0x2a2>
 8000d2e:	45a1      	cmp	r9, r4
 8000d30:	f240 8081 	bls.w	8000e36 <__udivmoddi4+0x2a2>
 8000d34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	eba4 0409 	sub.w	r4, r4, r9
 8000d3e:	fa1f f983 	uxth.w	r9, r3
 8000d42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d46:	fb00 4413 	mls	r4, r0, r3, r4
 8000d4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x1d2>
 8000d56:	193c      	adds	r4, r7, r4
 8000d58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d5c:	d267      	bcs.n	8000e2e <__udivmoddi4+0x29a>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	d965      	bls.n	8000e2e <__udivmoddi4+0x29a>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	429c      	cmp	r4, r3
 8000d74:	46ce      	mov	lr, r9
 8000d76:	469c      	mov	ip, r3
 8000d78:	d351      	bcc.n	8000e1e <__udivmoddi4+0x28a>
 8000d7a:	d04e      	beq.n	8000e1a <__udivmoddi4+0x286>
 8000d7c:	b155      	cbz	r5, 8000d94 <__udivmoddi4+0x200>
 8000d7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d82:	eb64 040c 	sbc.w	r4, r4, ip
 8000d86:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8a:	40cb      	lsrs	r3, r1
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	40cc      	lsrs	r4, r1
 8000d90:	e9c5 6400 	strd	r6, r4, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	e750      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa24 f303 	lsr.w	r3, r4, r3
 8000da8:	4094      	lsls	r4, r2
 8000daa:	430c      	orrs	r4, r1
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc6:	fb00 f107 	mul.w	r1, r0, r7
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x24c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dd6:	d22c      	bcs.n	8000e32 <__udivmoddi4+0x29e>
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d92a      	bls.n	8000e32 <__udivmoddi4+0x29e>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df0:	fb01 f307 	mul.w	r3, r1, r7
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x276>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e00:	d213      	bcs.n	8000e2a <__udivmoddi4+0x296>
 8000e02:	42a3      	cmp	r3, r4
 8000e04:	d911      	bls.n	8000e2a <__udivmoddi4+0x296>
 8000e06:	3902      	subs	r1, #2
 8000e08:	4464      	add	r4, ip
 8000e0a:	1ae4      	subs	r4, r4, r3
 8000e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e10:	e739      	b.n	8000c86 <__udivmoddi4+0xf2>
 8000e12:	4604      	mov	r4, r0
 8000e14:	e6f0      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e16:	4608      	mov	r0, r1
 8000e18:	e706      	b.n	8000c28 <__udivmoddi4+0x94>
 8000e1a:	45c8      	cmp	r8, r9
 8000e1c:	d2ae      	bcs.n	8000d7c <__udivmoddi4+0x1e8>
 8000e1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7a8      	b.n	8000d7c <__udivmoddi4+0x1e8>
 8000e2a:	4631      	mov	r1, r6
 8000e2c:	e7ed      	b.n	8000e0a <__udivmoddi4+0x276>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	e799      	b.n	8000d66 <__udivmoddi4+0x1d2>
 8000e32:	4630      	mov	r0, r6
 8000e34:	e7d4      	b.n	8000de0 <__udivmoddi4+0x24c>
 8000e36:	46d6      	mov	lr, sl
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1a6>
 8000e3a:	4463      	add	r3, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e74d      	b.n	8000cdc <__udivmoddi4+0x148>
 8000e40:	4606      	mov	r6, r0
 8000e42:	4623      	mov	r3, r4
 8000e44:	4608      	mov	r0, r1
 8000e46:	e70f      	b.n	8000c68 <__udivmoddi4+0xd4>
 8000e48:	3e02      	subs	r6, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	e730      	b.n	8000cb0 <__udivmoddi4+0x11c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000e58:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <modbus_1t5_Timeout+0x3c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000e60:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <modbus_1t5_Timeout+0x3c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <modbus_1t5_Timeout+0x3c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <modbus_1t5_Timeout+0x3c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f042 0201 	orr.w	r2, r2, #1
 8000e82:	601a      	str	r2, [r3, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	2000023c 	.word	0x2000023c

08000e94 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000e9c:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <modbus_3t5_Timeout+0x1c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	755a      	strb	r2, [r3, #21]

}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	2000023c 	.word	0x2000023c

08000eb4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f006 ff93 	bl	8007de8 <HAL_UART_GetError>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b20      	cmp	r3, #32
 8000ec6:	d101      	bne.n	8000ecc <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000ec8:	f7ff ffc4 	bl	8000e54 <modbus_1t5_Timeout>

	}
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000ede:	4a25      	ldr	r2, [pc, #148]	@ (8000f74 <Modbus_init+0xa0>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000ee4:	4b23      	ldr	r3, [pc, #140]	@ (8000f74 <Modbus_init+0xa0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	4a21      	ldr	r2, [pc, #132]	@ (8000f78 <Modbus_init+0xa4>)
 8000ef2:	210e      	movs	r1, #14
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f005 f899 	bl	800602c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	2110      	movs	r1, #16
 8000f00:	4618      	mov	r0, r3
 8000f02:	f006 ff1b 	bl	8007d3c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f006 ff32 	bl	8007d74 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	4a19      	ldr	r2, [pc, #100]	@ (8000f7c <Modbus_init+0xa8>)
 8000f16:	2104      	movs	r1, #4
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f006 f9f9 	bl	8007310 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <Modbus_init+0xa0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000f24:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <Modbus_init+0xa0>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <Modbus_init+0xa0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000f30:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000f34:	4413      	add	r3, r2
 8000f36:	3302      	adds	r3, #2
 8000f38:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f006 fb21 	bl	8007584 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000f42:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <Modbus_init+0xa0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d10c      	bne.n	8000f6c <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <Modbus_init+0xa0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f003 ff15 	bl	8004d88 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <Modbus_init+0xa0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f004 fa9c 	bl	80054a4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2000023c 	.word	0x2000023c
 8000f78:	08000e95 	.word	0x08000e95
 8000f7c:	08000eb5 	.word	0x08000eb5

08000f80 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000f8c:	23ff      	movs	r3, #255	@ 0xff
 8000f8e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000f90:	23ff      	movs	r3, #255	@ 0xff
 8000f92:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000f94:	e013      	b.n	8000fbe <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	1c5a      	adds	r2, r3, #1
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	781a      	ldrb	r2, [r3, #0]
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	4053      	eors	r3, r2
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe4 <CRC16+0x64>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4413      	add	r3, r2
 8000fac:	781a      	ldrb	r2, [r3, #0]
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	4053      	eors	r3, r2
 8000fb2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe8 <CRC16+0x68>)
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	4413      	add	r3, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000fbe:	883b      	ldrh	r3, [r7, #0]
 8000fc0:	1e5a      	subs	r2, r3, #1
 8000fc2:	803a      	strh	r2, [r7, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1e6      	bne.n	8000f96 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	7bbb      	ldrb	r3, [r7, #14]
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	b29b      	uxth	r3, r3
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	20000100 	.word	0x20000100
 8000fe8:	20000000 	.word	0x20000000

08000fec <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000ff2:	4b7e      	ldr	r3, [pc, #504]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	7ddb      	ldrb	r3, [r3, #23]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d80a      	bhi.n	8001014 <Modbus_Protocal_Worker+0x28>
 8000ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8001004 <Modbus_Protocal_Worker+0x18>)
 8001000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001004:	0800101f 	.word	0x0800101f
 8001008:	080011b3 	.word	0x080011b3
 800100c:	080010ab 	.word	0x080010ab
 8001010:	080010ef 	.word	0x080010ef
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001014:	4b75      	ldr	r3, [pc, #468]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2201      	movs	r2, #1
 800101a:	75da      	strb	r2, [r3, #23]
		break;
 800101c:	e0e1      	b.n	80011e2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800101e:	4b73      	ldr	r3, [pc, #460]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001026:	2b00      	cmp	r3, #0
 8001028:	d006      	beq.n	8001038 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 800102a:	4b70      	ldr	r3, [pc, #448]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2202      	movs	r2, #2
 8001030:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001032:	f000 f9cd 	bl	80013d0 <Modbus_Emission>
 8001036:	e018      	b.n	800106a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001038:	4b6c      	ldr	r3, [pc, #432]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001042:	4b6a      	ldr	r3, [pc, #424]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800104c:	b29b      	uxth	r3, r3
 800104e:	429a      	cmp	r2, r3
 8001050:	d00b      	beq.n	800106a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001052:	4b66      	ldr	r3, [pc, #408]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2200      	movs	r2, #0
 8001058:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800105a:	4b64      	ldr	r3, [pc, #400]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2200      	movs	r2, #0
 8001060:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001062:	4b62      	ldr	r3, [pc, #392]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2203      	movs	r2, #3
 8001068:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800106a:	4b60      	ldr	r3, [pc, #384]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001074:	2b20      	cmp	r3, #32
 8001076:	f040 80ad 	bne.w	80011d4 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800107a:	4b5c      	ldr	r3, [pc, #368]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2200      	movs	r2, #0
 8001080:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001084:	4b59      	ldr	r3, [pc, #356]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800108a:	4b58      	ldr	r3, [pc, #352]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4b57      	ldr	r3, [pc, #348]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001096:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800109a:	4413      	add	r3, r2
 800109c:	3302      	adds	r3, #2
 800109e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010a2:	4619      	mov	r1, r3
 80010a4:	f006 fa6e 	bl	8007584 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80010a8:	e094      	b.n	80011d4 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80010aa:	4b50      	ldr	r3, [pc, #320]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	7d1b      	ldrb	r3, [r3, #20]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 8091 	beq.w	80011d8 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80010b6:	4b4d      	ldr	r3, [pc, #308]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	22fe      	movs	r2, #254	@ 0xfe
 80010bc:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80010be:	4b4b      	ldr	r3, [pc, #300]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 80010c8:	4b48      	ldr	r3, [pc, #288]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 80010d8:	4b44      	ldr	r3, [pc, #272]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 80010da:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80010dc:	1a8a      	subs	r2, r1, r2
 80010de:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80010e0:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80010e4:	4b41      	ldr	r3, [pc, #260]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2204      	movs	r2, #4
 80010ea:	75da      	strb	r2, [r3, #23]
		}
		break;
 80010ec:	e074      	b.n	80011d8 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80010ee:	4b3f      	ldr	r3, [pc, #252]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80010f6:	f113 0f02 	cmn.w	r3, #2
 80010fa:	d150      	bne.n	800119e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80010fc:	4b3b      	ldr	r3, [pc, #236]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001104:	4b39      	ldr	r3, [pc, #228]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f203 2272 	addw	r2, r3, #626	@ 0x272
 800110c:	4b37      	ldr	r3, [pc, #220]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001114:	3b02      	subs	r3, #2
 8001116:	4619      	mov	r1, r3
 8001118:	4610      	mov	r0, r2
 800111a:	f7ff ff31 	bl	8000f80 <CRC16>
 800111e:	4603      	mov	r3, r0
 8001120:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001122:	793a      	ldrb	r2, [r7, #4]
 8001124:	4b31      	ldr	r3, [pc, #196]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 8001126:	6819      	ldr	r1, [r3, #0]
 8001128:	4b30      	ldr	r3, [pc, #192]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001130:	3b02      	subs	r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001138:	429a      	cmp	r2, r3
 800113a:	d10c      	bne.n	8001156 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800113c:	797a      	ldrb	r2, [r7, #5]
 800113e:	4b2b      	ldr	r3, [pc, #172]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 8001140:	6819      	ldr	r1, [r3, #0]
 8001142:	4b2a      	ldr	r3, [pc, #168]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800114a:	3b01      	subs	r3, #1
 800114c:	440b      	add	r3, r1
 800114e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001152:	429a      	cmp	r2, r3
 8001154:	d004      	beq.n	8001160 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001156:	4b25      	ldr	r3, [pc, #148]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	22ff      	movs	r2, #255	@ 0xff
 800115c:	759a      	strb	r2, [r3, #22]
				break;
 800115e:	e040      	b.n	80011e2 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001168:	4b20      	ldr	r3, [pc, #128]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d113      	bne.n	800119a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001172:	4b1e      	ldr	r3, [pc, #120]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800117a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001182:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001184:	4b19      	ldr	r3, [pc, #100]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800118c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800118e:	461a      	mov	r2, r3
 8001190:	f007 ffb4 	bl	80090fc <memcpy>

			//execute command
			Modbus_frame_response();
 8001194:	f000 f904 	bl	80013a0 <Modbus_frame_response>
 8001198:	e001      	b.n	800119e <Modbus_Protocal_Worker+0x1b2>
				break;
 800119a:	bf00      	nop
					}
		break;


	}
}
 800119c:	e021      	b.n	80011e2 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800119e:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	7d5b      	ldrb	r3, [r3, #21]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d019      	beq.n	80011dc <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80011a8:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2201      	movs	r2, #1
 80011ae:	75da      	strb	r2, [r3, #23]
		break;
 80011b0:	e014      	b.n	80011dc <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011bc:	2b20      	cmp	r3, #32
 80011be:	d10f      	bne.n	80011e0 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 80011c0:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 80011ca:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <Modbus_Protocal_Worker+0x200>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2201      	movs	r2, #1
 80011d0:	75da      	strb	r2, [r3, #23]
		break;
 80011d2:	e005      	b.n	80011e0 <Modbus_Protocal_Worker+0x1f4>
		break;
 80011d4:	bf00      	nop
 80011d6:	e004      	b.n	80011e2 <Modbus_Protocal_Worker+0x1f6>
		break;
 80011d8:	bf00      	nop
 80011da:	e002      	b.n	80011e2 <Modbus_Protocal_Worker+0x1f6>
		break;
 80011dc:	bf00      	nop
 80011de:	e000      	b.n	80011e2 <Modbus_Protocal_Worker+0x1f6>
		break;
 80011e0:	bf00      	nop
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000023c 	.word	0x2000023c

080011f0 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80011f6:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <modbusWrite1Register+0x7c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	7e5b      	ldrb	r3, [r3, #25]
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	b29b      	uxth	r3, r3
 8001200:	4a1a      	ldr	r2, [pc, #104]	@ (800126c <modbusWrite1Register+0x7c>)
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	7e92      	ldrb	r2, [r2, #26]
 8001206:	4413      	add	r3, r2
 8001208:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800120a:	88fa      	ldrh	r2, [r7, #6]
 800120c:	4b17      	ldr	r3, [pc, #92]	@ (800126c <modbusWrite1Register+0x7c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	429a      	cmp	r2, r3
 8001214:	d903      	bls.n	800121e <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001216:	2002      	movs	r0, #2
 8001218:	f000 f8a0 	bl	800135c <ModbusErrorReply>
			 return;
 800121c:	e023      	b.n	8001266 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800121e:	4b13      	ldr	r3, [pc, #76]	@ (800126c <modbusWrite1Register+0x7c>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b12      	ldr	r3, [pc, #72]	@ (800126c <modbusWrite1Register+0x7c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6859      	ldr	r1, [r3, #4]
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	440b      	add	r3, r1
 800122e:	7ed2      	ldrb	r2, [r2, #27]
 8001230:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001232:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <modbusWrite1Register+0x7c>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <modbusWrite1Register+0x7c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6859      	ldr	r1, [r3, #4]
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	440b      	add	r3, r1
 8001242:	7f12      	ldrb	r2, [r2, #28]
 8001244:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001246:	4b09      	ldr	r3, [pc, #36]	@ (800126c <modbusWrite1Register+0x7c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800124e:	4b07      	ldr	r3, [pc, #28]	@ (800126c <modbusWrite1Register+0x7c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001254:	2208      	movs	r2, #8
 8001256:	4619      	mov	r1, r3
 8001258:	f007 ff50 	bl	80090fc <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800125c:	4b03      	ldr	r3, [pc, #12]	@ (800126c <modbusWrite1Register+0x7c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2205      	movs	r2, #5
 8001262:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000023c 	.word	0x2000023c

08001270 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001276:	4b38      	ldr	r3, [pc, #224]	@ (8001358 <modbusRead1Register+0xe8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	7edb      	ldrb	r3, [r3, #27]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b29b      	uxth	r3, r3
 8001280:	4a35      	ldr	r2, [pc, #212]	@ (8001358 <modbusRead1Register+0xe8>)
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	7f12      	ldrb	r2, [r2, #28]
 8001286:	4413      	add	r3, r2
 8001288:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800128a:	4b33      	ldr	r3, [pc, #204]	@ (8001358 <modbusRead1Register+0xe8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	7e5b      	ldrb	r3, [r3, #25]
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	b29b      	uxth	r3, r3
 8001294:	4a30      	ldr	r2, [pc, #192]	@ (8001358 <modbusRead1Register+0xe8>)
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	7e92      	ldrb	r2, [r2, #26]
 800129a:	4413      	add	r3, r2
 800129c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <modbusRead1Register+0x3a>
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	2b7d      	cmp	r3, #125	@ 0x7d
 80012a8:	d903      	bls.n	80012b2 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80012aa:	2003      	movs	r0, #3
 80012ac:	f000 f856 	bl	800135c <ModbusErrorReply>
		 return;
 80012b0:	e04e      	b.n	8001350 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80012b2:	88ba      	ldrh	r2, [r7, #4]
 80012b4:	4b28      	ldr	r3, [pc, #160]	@ (8001358 <modbusRead1Register+0xe8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d808      	bhi.n	80012d0 <modbusRead1Register+0x60>
 80012be:	88ba      	ldrh	r2, [r7, #4]
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	4413      	add	r3, r2
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b24      	ldr	r3, [pc, #144]	@ (8001358 <modbusRead1Register+0xe8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d903      	bls.n	80012d8 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80012d0:	2002      	movs	r0, #2
 80012d2:	f000 f843 	bl	800135c <ModbusErrorReply>
		 return;
 80012d6:	e03b      	b.n	8001350 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80012d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001358 <modbusRead1Register+0xe8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2203      	movs	r2, #3
 80012de:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001358 <modbusRead1Register+0xe8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	0052      	lsls	r2, r2, #1
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80012f2:	2400      	movs	r4, #0
 80012f4:	e020      	b.n	8001338 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80012f6:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <modbusRead1Register+0xe8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	88bb      	ldrh	r3, [r7, #4]
 80012fe:	4423      	add	r3, r4
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	18d1      	adds	r1, r2, r3
 8001304:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <modbusRead1Register+0xe8>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	1c63      	adds	r3, r4, #1
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	7849      	ldrb	r1, [r1, #1]
 800130e:	4413      	add	r3, r2
 8001310:	460a      	mov	r2, r1
 8001312:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <modbusRead1Register+0xe8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	88bb      	ldrh	r3, [r7, #4]
 800131e:	4423      	add	r3, r4
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	18d1      	adds	r1, r2, r3
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <modbusRead1Register+0xe8>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	0063      	lsls	r3, r4, #1
 800132a:	3303      	adds	r3, #3
 800132c:	7809      	ldrb	r1, [r1, #0]
 800132e:	4413      	add	r3, r2
 8001330:	460a      	mov	r2, r1
 8001332:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001336:	3401      	adds	r4, #1
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	429c      	cmp	r4, r3
 800133c:	dbdb      	blt.n	80012f6 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	3301      	adds	r3, #1
 8001342:	b2da      	uxtb	r2, r3
 8001344:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <modbusRead1Register+0xe8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	0052      	lsls	r2, r2, #1
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}
 8001356:	bf00      	nop
 8001358:	2000023c 	.word	0x2000023c

0800135c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001366:	4b0d      	ldr	r3, [pc, #52]	@ (800139c <ModbusErrorReply+0x40>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	7e1a      	ldrb	r2, [r3, #24]
 800136c:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <ModbusErrorReply+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 800137a:	4b08      	ldr	r3, [pc, #32]	@ (800139c <ModbusErrorReply+0x40>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	79fa      	ldrb	r2, [r7, #7]
 8001380:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <ModbusErrorReply+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2202      	movs	r2, #2
 800138a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	2000023c 	.word	0x2000023c

080013a0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80013a4:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <Modbus_frame_response+0x2c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	7e1b      	ldrb	r3, [r3, #24]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d004      	beq.n	80013b8 <Modbus_frame_response+0x18>
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d105      	bne.n	80013be <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80013b2:	f7ff ff1d 	bl	80011f0 <modbusWrite1Register>
		break;
 80013b6:	e006      	b.n	80013c6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80013b8:	f7ff ff5a 	bl	8001270 <modbusRead1Register>
		break;
 80013bc:	e003      	b.n	80013c6 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80013be:	2001      	movs	r0, #1
 80013c0:	f7ff ffcc 	bl	800135c <ModbusErrorReply>
		break;
 80013c4:	bf00      	nop

	}
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000023c 	.word	0x2000023c

080013d0 <Modbus_Emission>:

void Modbus_Emission()
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80013d6:	4b38      	ldr	r3, [pc, #224]	@ (80014b8 <Modbus_Emission+0xe8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013e0:	2b20      	cmp	r3, #32
 80013e2:	d15d      	bne.n	80014a0 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80013e4:	4b34      	ldr	r3, [pc, #208]	@ (80014b8 <Modbus_Emission+0xe8>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b33      	ldr	r3, [pc, #204]	@ (80014b8 <Modbus_Emission+0xe8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	7812      	ldrb	r2, [r2, #0]
 80013ee:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80013f2:	4b31      	ldr	r3, [pc, #196]	@ (80014b8 <Modbus_Emission+0xe8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80013fa:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80013fc:	4b2e      	ldr	r3, [pc, #184]	@ (80014b8 <Modbus_Emission+0xe8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001404:	4b2c      	ldr	r3, [pc, #176]	@ (80014b8 <Modbus_Emission+0xe8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 800140c:	461a      	mov	r2, r3
 800140e:	f007 fe75 	bl	80090fc <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001412:	4b29      	ldr	r3, [pc, #164]	@ (80014b8 <Modbus_Emission+0xe8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800141a:	461a      	mov	r2, r3
 800141c:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <Modbus_Emission+0xe8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3203      	adds	r2, #3
 8001422:	b292      	uxth	r2, r2
 8001424:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001428:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <Modbus_Emission+0xe8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001430:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <Modbus_Emission+0xe8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001438:	3b02      	subs	r3, #2
 800143a:	4619      	mov	r1, r3
 800143c:	4610      	mov	r0, r2
 800143e:	f7ff fd9f 	bl	8000f80 <CRC16>
 8001442:	4603      	mov	r3, r0
 8001444:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001446:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <Modbus_Emission+0xe8>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <Modbus_Emission+0xe8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001452:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001454:	7939      	ldrb	r1, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	460a      	mov	r2, r1
 800145a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <Modbus_Emission+0xe8>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <Modbus_Emission+0xe8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800146a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800146c:	7979      	ldrb	r1, [r7, #5]
 800146e:	4413      	add	r3, r2
 8001470:	460a      	mov	r2, r1
 8001472:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001476:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <Modbus_Emission+0xe8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001480:	2b20      	cmp	r3, #32
 8001482:	d10d      	bne.n	80014a0 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <Modbus_Emission+0xe8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <Modbus_Emission+0xe8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <Modbus_Emission+0xe8>)
 8001494:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001496:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800149a:	461a      	mov	r2, r3
 800149c:	f005 fff2 	bl	8007484 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <Modbus_Emission+0xe8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2200      	movs	r2, #0
 80014a6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80014a8:	4b03      	ldr	r3, [pc, #12]	@ (80014b8 <Modbus_Emission+0xe8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2200      	movs	r2, #0
 80014ae:	755a      	strb	r2, [r3, #21]

}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000023c 	.word	0x2000023c
 80014bc:	00000000 	.word	0x00000000

080014c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c6:	f001 fcf6 	bl	8002eb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ca:	f000 fa91 	bl	80019f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ce:	f000 fe2f 	bl	8002130 <MX_GPIO_Init>
  MX_DMA_Init();
 80014d2:	f000 fddf 	bl	8002094 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80014d6:	f000 fd43 	bl	8001f60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80014da:	f000 fd8d 	bl	8001ff8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80014de:	f000 fad3 	bl	8001a88 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014e2:	f000 fba5 	bl	8001c30 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014e6:	f000 fbf7 	bl	8001cd8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80014ea:	f000 fcb9 	bl	8001e60 <MX_TIM5_Init>
  MX_TIM16_Init();
 80014ee:	f000 fd07 	bl	8001f00 <MX_TIM16_Init>
  MX_TIM4_Init();
 80014f2:	f000 fc67 	bl	8001dc4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  ///TRAJECTORY
  PID.Kp =0.1;
 80014f6:	4b9a      	ldr	r3, [pc, #616]	@ (8001760 <main+0x2a0>)
 80014f8:	4a9a      	ldr	r2, [pc, #616]	@ (8001764 <main+0x2a4>)
 80014fa:	619a      	str	r2, [r3, #24]
  PID.Ki =0.00001;
 80014fc:	4b98      	ldr	r3, [pc, #608]	@ (8001760 <main+0x2a0>)
 80014fe:	4a9a      	ldr	r2, [pc, #616]	@ (8001768 <main+0x2a8>)
 8001500:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.1;
 8001502:	4b97      	ldr	r3, [pc, #604]	@ (8001760 <main+0x2a0>)
 8001504:	4a97      	ldr	r2, [pc, #604]	@ (8001764 <main+0x2a4>)
 8001506:	621a      	str	r2, [r3, #32]

  arm_pid_init_f32(&PID, 0);
 8001508:	2100      	movs	r1, #0
 800150a:	4895      	ldr	r0, [pc, #596]	@ (8001760 <main+0x2a0>)
 800150c:	f007 fd94 	bl	8009038 <arm_pid_init_f32>
  // @User: Setup UART 1 for communication with joy stick
  HAL_UART_Receive_DMA(&huart1, joystickPayload, 10);
 8001510:	220a      	movs	r2, #10
 8001512:	4996      	ldr	r1, [pc, #600]	@ (800176c <main+0x2ac>)
 8001514:	4896      	ldr	r0, [pc, #600]	@ (8001770 <main+0x2b0>)
 8001516:	f006 f835 	bl	8007584 <HAL_UART_Receive_DMA>

  // @User: Setup UART 2 for communication with Base system
  HAL_TIM_Base_Start_IT(&htim5); //open Timer 5 (interrupt)
 800151a:	4896      	ldr	r0, [pc, #600]	@ (8001774 <main+0x2b4>)
 800151c:	f003 fc34 	bl	8004d88 <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 8001520:	4b95      	ldr	r3, [pc, #596]	@ (8001778 <main+0x2b8>)
 8001522:	4a96      	ldr	r2, [pc, #600]	@ (800177c <main+0x2bc>)
 8001524:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8001526:	4b94      	ldr	r3, [pc, #592]	@ (8001778 <main+0x2b8>)
 8001528:	4a95      	ldr	r2, [pc, #596]	@ (8001780 <main+0x2c0>)
 800152a:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 800152c:	4b92      	ldr	r3, [pc, #584]	@ (8001778 <main+0x2b8>)
 800152e:	2215      	movs	r2, #21
 8001530:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8001532:	4b91      	ldr	r3, [pc, #580]	@ (8001778 <main+0x2b8>)
 8001534:	22c8      	movs	r2, #200	@ 0xc8
 8001536:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001538:	4992      	ldr	r1, [pc, #584]	@ (8001784 <main+0x2c4>)
 800153a:	488f      	ldr	r0, [pc, #572]	@ (8001778 <main+0x2b8>)
 800153c:	f7ff fcca 	bl	8000ed4 <Modbus_init>
  reed = 0;
 8001540:	4b91      	ldr	r3, [pc, #580]	@ (8001788 <main+0x2c8>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]

  shelfPos[0] = 1;
 8001546:	4b91      	ldr	r3, [pc, #580]	@ (800178c <main+0x2cc>)
 8001548:	2201      	movs	r2, #1
 800154a:	801a      	strh	r2, [r3, #0]
  shelfPos[1] = 2;
 800154c:	4b8f      	ldr	r3, [pc, #572]	@ (800178c <main+0x2cc>)
 800154e:	2202      	movs	r2, #2
 8001550:	805a      	strh	r2, [r3, #2]
  shelfPos[2] = 3;
 8001552:	4b8e      	ldr	r3, [pc, #568]	@ (800178c <main+0x2cc>)
 8001554:	2203      	movs	r2, #3
 8001556:	809a      	strh	r2, [r3, #4]
  shelfPos[3] = 4;
 8001558:	4b8c      	ldr	r3, [pc, #560]	@ (800178c <main+0x2cc>)
 800155a:	2204      	movs	r2, #4
 800155c:	80da      	strh	r2, [r3, #6]
  shelfPos[4] = 5;
 800155e:	4b8b      	ldr	r3, [pc, #556]	@ (800178c <main+0x2cc>)
 8001560:	2205      	movs	r2, #5
 8001562:	811a      	strh	r2, [r3, #8]

  // @User: Setup Timer 1 for Motor drive
  HAL_TIM_Base_Start(&htim1);
 8001564:	488a      	ldr	r0, [pc, #552]	@ (8001790 <main+0x2d0>)
 8001566:	f003 fb9f 	bl	8004ca8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800156a:	2100      	movs	r1, #0
 800156c:	4888      	ldr	r0, [pc, #544]	@ (8001790 <main+0x2d0>)
 800156e:	f003 fd21 	bl	8004fb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001572:	2104      	movs	r1, #4
 8001574:	4886      	ldr	r0, [pc, #536]	@ (8001790 <main+0x2d0>)
 8001576:	f003 fd1d 	bl	8004fb4 <HAL_TIM_PWM_Start>

  // @User: Setup Timer 2 as encoder interface
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800157a:	213c      	movs	r1, #60	@ 0x3c
 800157c:	4885      	ldr	r0, [pc, #532]	@ (8001794 <main+0x2d4>)
 800157e:	f004 f8d3 	bl	8005728 <HAL_TIM_Encoder_Start>


  // @User: Setup Timer 3 for sending led data
  HAL_TIM_Base_Start(&htim3);
 8001582:	4885      	ldr	r0, [pc, #532]	@ (8001798 <main+0x2d8>)
 8001584:	f003 fb90 	bl	8004ca8 <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //TRAJECTORY
	  if (Mode == 1)
 8001588:	4b84      	ldr	r3, [pc, #528]	@ (800179c <main+0x2dc>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d10f      	bne.n	80015b0 <main+0xf0>
	 	  {
	 		  generate_trapezoidal_velocity_profile(time_op, position_goal);
 8001590:	4b83      	ldr	r3, [pc, #524]	@ (80017a0 <main+0x2e0>)
 8001592:	ed93 7b00 	vldr	d7, [r3]
 8001596:	4b83      	ldr	r3, [pc, #524]	@ (80017a4 <main+0x2e4>)
 8001598:	ed93 6b00 	vldr	d6, [r3]
 800159c:	eeb0 1a46 	vmov.f32	s2, s12
 80015a0:	eef0 1a66 	vmov.f32	s3, s13
 80015a4:	eeb0 0a47 	vmov.f32	s0, s14
 80015a8:	eef0 0a67 	vmov.f32	s1, s15
 80015ac:	f000 fe80 	bl	80022b0 <generate_trapezoidal_velocity_profile>
	 	  }



	  // TODO: Test encoder QEI, remove later
	  qeiRaw = (__HAL_TIM_GET_COUNTER(&htim2))*(59.19/8192);
 80015b0:	4b78      	ldr	r3, [pc, #480]	@ (8001794 <main+0x2d4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ff70 	bl	800049c <__aeabi_ui2d>
 80015bc:	a366      	add	r3, pc, #408	@ (adr r3, 8001758 <main+0x298>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7fe ffe5 	bl	8000590 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fa79 	bl	8000ac4 <__aeabi_d2f>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4a74      	ldr	r2, [pc, #464]	@ (80017a8 <main+0x2e8>)
 80015d6:	6013      	str	r3, [r2, #0]

	  Modbus_Protocal_Worker();
 80015d8:	f7ff fd08 	bl	8000fec <Modbus_Protocal_Worker>
	  vacuum = registerFrame[0x02].U16;
 80015dc:	4b69      	ldr	r3, [pc, #420]	@ (8001784 <main+0x2c4>)
 80015de:	889b      	ldrh	r3, [r3, #4]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b72      	ldr	r3, [pc, #456]	@ (80017ac <main+0x2ec>)
 80015e4:	701a      	strb	r2, [r3, #0]
	  gripper = registerFrame[0x03].U16;
 80015e6:	4b67      	ldr	r3, [pc, #412]	@ (8001784 <main+0x2c4>)
 80015e8:	88db      	ldrh	r3, [r3, #6]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b70      	ldr	r3, [pc, #448]	@ (80017b0 <main+0x2f0>)
 80015ee:	701a      	strb	r2, [r3, #0]
	  registerFrame[0x04].U16 = reed;
 80015f0:	4b65      	ldr	r3, [pc, #404]	@ (8001788 <main+0x2c8>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b63      	ldr	r3, [pc, #396]	@ (8001784 <main+0x2c4>)
 80015f8:	811a      	strh	r2, [r3, #8]

	  ///*MODBUS PART
	  if(registerFrame[0x00].U16 != 22881){
 80015fa:	4b62      	ldr	r3, [pc, #392]	@ (8001784 <main+0x2c4>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001602:	4293      	cmp	r3, r2
 8001604:	d009      	beq.n	800161a <main+0x15a>
		  registerFrame[0x00].U16 = 22881;
 8001606:	4b5f      	ldr	r3, [pc, #380]	@ (8001784 <main+0x2c4>)
 8001608:	f645 1261 	movw	r2, #22881	@ 0x5961
 800160c:	801a      	strh	r2, [r3, #0]
		  deb++;
 800160e:	4b69      	ldr	r3, [pc, #420]	@ (80017b4 <main+0x2f4>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	3301      	adds	r3, #1
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b67      	ldr	r3, [pc, #412]	@ (80017b4 <main+0x2f4>)
 8001618:	701a      	strb	r2, [r3, #0]
	  }


 	  static uint16_t timestamp = 0;
 	  //Set shelves
 	  if(registerFrame[0x01].U16 == 1)
 800161a:	4b5a      	ldr	r3, [pc, #360]	@ (8001784 <main+0x2c4>)
 800161c:	885b      	ldrh	r3, [r3, #2]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d127      	bne.n	8001672 <main+0x1b2>
 	  {
 		  registerFrame[0x01].U16 = 0;
 8001622:	4b58      	ldr	r3, [pc, #352]	@ (8001784 <main+0x2c4>)
 8001624:	2200      	movs	r2, #0
 8001626:	805a      	strh	r2, [r3, #2]
 		  registerFrame[0x10].U16 = 1;
 8001628:	4b56      	ldr	r3, [pc, #344]	@ (8001784 <main+0x2c4>)
 800162a:	2201      	movs	r2, #1
 800162c:	841a      	strh	r2, [r3, #32]
 		  registerFrame[0x23].U16 = shelfPos[0];
 800162e:	4b57      	ldr	r3, [pc, #348]	@ (800178c <main+0x2cc>)
 8001630:	881a      	ldrh	r2, [r3, #0]
 8001632:	4b54      	ldr	r3, [pc, #336]	@ (8001784 <main+0x2c4>)
 8001634:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 		  registerFrame[0x24].U16 = shelfPos[1];
 8001638:	4b54      	ldr	r3, [pc, #336]	@ (800178c <main+0x2cc>)
 800163a:	885a      	ldrh	r2, [r3, #2]
 800163c:	4b51      	ldr	r3, [pc, #324]	@ (8001784 <main+0x2c4>)
 800163e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 		  registerFrame[0x25].U16 = shelfPos[2];
 8001642:	4b52      	ldr	r3, [pc, #328]	@ (800178c <main+0x2cc>)
 8001644:	889a      	ldrh	r2, [r3, #4]
 8001646:	4b4f      	ldr	r3, [pc, #316]	@ (8001784 <main+0x2c4>)
 8001648:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
 		  registerFrame[0x26].U16 = shelfPos[3];
 800164c:	4b4f      	ldr	r3, [pc, #316]	@ (800178c <main+0x2cc>)
 800164e:	88da      	ldrh	r2, [r3, #6]
 8001650:	4b4c      	ldr	r3, [pc, #304]	@ (8001784 <main+0x2c4>)
 8001652:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 		  registerFrame[0x27].U16 = shelfPos[4];
 8001656:	4b4d      	ldr	r3, [pc, #308]	@ (800178c <main+0x2cc>)
 8001658:	891a      	ldrh	r2, [r3, #8]
 800165a:	4b4a      	ldr	r3, [pc, #296]	@ (8001784 <main+0x2c4>)
 800165c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 		  //delay 2000ms
 		  timestamp = HAL_GetTick()+2000;
 8001660:	f001 fc8e 	bl	8002f80 <HAL_GetTick>
 8001664:	4603      	mov	r3, r0
 8001666:	b29b      	uxth	r3, r3
 8001668:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b52      	ldr	r3, [pc, #328]	@ (80017b8 <main+0x2f8>)
 8001670:	801a      	strh	r2, [r3, #0]
 	  }
 	  if(HAL_GetTick() >= timestamp && (registerFrame[0x10].U16 == 1))
 8001672:	f001 fc85 	bl	8002f80 <HAL_GetTick>
 8001676:	4603      	mov	r3, r0
 8001678:	4a4f      	ldr	r2, [pc, #316]	@ (80017b8 <main+0x2f8>)
 800167a:	8812      	ldrh	r2, [r2, #0]
 800167c:	4293      	cmp	r3, r2
 800167e:	d306      	bcc.n	800168e <main+0x1ce>
 8001680:	4b40      	ldr	r3, [pc, #256]	@ (8001784 <main+0x2c4>)
 8001682:	8c1b      	ldrh	r3, [r3, #32]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d102      	bne.n	800168e <main+0x1ce>
 	  {
 		  registerFrame[0x10].U16 = 0;
 8001688:	4b3e      	ldr	r3, [pc, #248]	@ (8001784 <main+0x2c4>)
 800168a:	2200      	movs	r2, #0
 800168c:	841a      	strh	r2, [r3, #32]
 	  }
 	  //Home
 	  if(registerFrame[0x01].U16 == 2)
 800168e:	4b3d      	ldr	r3, [pc, #244]	@ (8001784 <main+0x2c4>)
 8001690:	885b      	ldrh	r3, [r3, #2]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d109      	bne.n	80016aa <main+0x1ea>
 	  {
 		  registerFrame[0x01].U16 = 0;
 8001696:	4b3b      	ldr	r3, [pc, #236]	@ (8001784 <main+0x2c4>)
 8001698:	2200      	movs	r2, #0
 800169a:	805a      	strh	r2, [r3, #2]
 		  registerFrame[0x10].U16 = 2;
 800169c:	4b39      	ldr	r3, [pc, #228]	@ (8001784 <main+0x2c4>)
 800169e:	2202      	movs	r2, #2
 80016a0:	841a      	strh	r2, [r3, #32]
 		  setPos =  shelfPos[0];
 80016a2:	4b3a      	ldr	r3, [pc, #232]	@ (800178c <main+0x2cc>)
 80016a4:	881a      	ldrh	r2, [r3, #0]
 80016a6:	4b45      	ldr	r3, [pc, #276]	@ (80017bc <main+0x2fc>)
 80016a8:	801a      	strh	r2, [r3, #0]
 	  }
 	  //point mode
 	  if(registerFrame[0x01].U16 == 8)
 80016aa:	4b36      	ldr	r3, [pc, #216]	@ (8001784 <main+0x2c4>)
 80016ac:	885b      	ldrh	r3, [r3, #2]
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d10a      	bne.n	80016c8 <main+0x208>
 	  {
 		  registerFrame[0x01].U16 = 0;
 80016b2:	4b34      	ldr	r3, [pc, #208]	@ (8001784 <main+0x2c4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	805a      	strh	r2, [r3, #2]
 		  registerFrame[0x10].U16 = 16;
 80016b8:	4b32      	ldr	r3, [pc, #200]	@ (8001784 <main+0x2c4>)
 80016ba:	2210      	movs	r2, #16
 80016bc:	841a      	strh	r2, [r3, #32]
 		  setPos =  registerFrame[0x30].U16;
 80016be:	4b31      	ldr	r3, [pc, #196]	@ (8001784 <main+0x2c4>)
 80016c0:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80016c4:	4b3d      	ldr	r3, [pc, #244]	@ (80017bc <main+0x2fc>)
 80016c6:	801a      	strh	r2, [r3, #0]
 	  }
 	  //reset
 	  if(piingpong == 1 && (registerFrame[0x10].U16 == 2 || registerFrame[0x10].U16 == 16) )//check piingpong status
 80016c8:	4b3d      	ldr	r3, [pc, #244]	@ (80017c0 <main+0x300>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d10a      	bne.n	80016e6 <main+0x226>
 80016d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001784 <main+0x2c4>)
 80016d2:	8c1b      	ldrh	r3, [r3, #32]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d003      	beq.n	80016e0 <main+0x220>
 80016d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001784 <main+0x2c4>)
 80016da:	8c1b      	ldrh	r3, [r3, #32]
 80016dc:	2b10      	cmp	r3, #16
 80016de:	d102      	bne.n	80016e6 <main+0x226>
 	  {
 		  registerFrame[0x10].U16 = 0;
 80016e0:	4b28      	ldr	r3, [pc, #160]	@ (8001784 <main+0x2c4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	841a      	strh	r2, [r3, #32]
 	  }
 	  //jog mode
 	  if((registerFrame[0x01].U16 == 4))
 80016e6:	4b27      	ldr	r3, [pc, #156]	@ (8001784 <main+0x2c4>)
 80016e8:	885b      	ldrh	r3, [r3, #2]
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	f040 80af 	bne.w	800184e <main+0x38e>
 	  {
 		  registerFrame[0x01].U16 = 0; //reset status
 80016f0:	4b24      	ldr	r3, [pc, #144]	@ (8001784 <main+0x2c4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	805a      	strh	r2, [r3, #2]

 	      temPick = (registerFrame[0x21].U16);
 80016f6:	4b23      	ldr	r3, [pc, #140]	@ (8001784 <main+0x2c4>)
 80016f8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80016fc:	4b31      	ldr	r3, [pc, #196]	@ (80017c4 <main+0x304>)
 80016fe:	801a      	strh	r2, [r3, #0]
 	      temPlace = (registerFrame[0x22].U16);
 8001700:	4b20      	ldr	r3, [pc, #128]	@ (8001784 <main+0x2c4>)
 8001702:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001706:	4b30      	ldr	r3, [pc, #192]	@ (80017c8 <main+0x308>)
 8001708:	801a      	strh	r2, [r3, #0]
 	      rnd = 0;
 800170a:	4b30      	ldr	r3, [pc, #192]	@ (80017cc <main+0x30c>)
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
 	      ////// Convert to string
 	      for(uint16_t i = 10000;i>=1;i/=10)
 8001710:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001714:	80fb      	strh	r3, [r7, #6]
 8001716:	e095      	b.n	8001844 <main+0x384>
 	      {
 	    	  if(temPick/i == 0 || temPick/i > 5 || temPlace/i == 0 || temPlace/i > 5) // check if 0 or > 5
 8001718:	4b2a      	ldr	r3, [pc, #168]	@ (80017c4 <main+0x304>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	88fa      	ldrh	r2, [r7, #6]
 800171e:	429a      	cmp	r2, r3
 8001720:	d814      	bhi.n	800174c <main+0x28c>
 8001722:	4b28      	ldr	r3, [pc, #160]	@ (80017c4 <main+0x304>)
 8001724:	881a      	ldrh	r2, [r3, #0]
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	fbb2 f3f3 	udiv	r3, r2, r3
 800172c:	b29b      	uxth	r3, r3
 800172e:	2b05      	cmp	r3, #5
 8001730:	d80c      	bhi.n	800174c <main+0x28c>
 8001732:	4b25      	ldr	r3, [pc, #148]	@ (80017c8 <main+0x308>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	88fa      	ldrh	r2, [r7, #6]
 8001738:	429a      	cmp	r2, r3
 800173a:	d807      	bhi.n	800174c <main+0x28c>
 800173c:	4b22      	ldr	r3, [pc, #136]	@ (80017c8 <main+0x308>)
 800173e:	881a      	ldrh	r2, [r3, #0]
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	b29b      	uxth	r3, r3
 8001748:	2b05      	cmp	r3, #5
 800174a:	d941      	bls.n	80017d0 <main+0x310>
 	    	  {
 	    		  rnd = 0;
 800174c:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <main+0x30c>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
 	    		  break;
 8001752:	e131      	b.n	80019b8 <main+0x4f8>
 8001754:	f3af 8000 	nop.w
 8001758:	eb851eb8 	.word	0xeb851eb8
 800175c:	3f7d9851 	.word	0x3f7d9851
 8001760:	2000111c 	.word	0x2000111c
 8001764:	3dcccccd 	.word	0x3dcccccd
 8001768:	3727c5ac 	.word	0x3727c5ac
 800176c:	20000a20 	.word	0x20000a20
 8001770:	20000768 	.word	0x20000768
 8001774:	20000570 	.word	0x20000570
 8001778:	20000a34 	.word	0x20000a34
 800177c:	20000834 	.word	0x20000834
 8001780:	2000063c 	.word	0x2000063c
 8001784:	20000f10 	.word	0x20000f10
 8001788:	20000f0e 	.word	0x20000f0e
 800178c:	200010a0 	.word	0x200010a0
 8001790:	20000240 	.word	0x20000240
 8001794:	2000030c 	.word	0x2000030c
 8001798:	200003d8 	.word	0x200003d8
 800179c:	20001118 	.word	0x20001118
 80017a0:	20000200 	.word	0x20000200
 80017a4:	20000208 	.word	0x20000208
 80017a8:	20000a2c 	.word	0x20000a2c
 80017ac:	20000f0c 	.word	0x20000f0c
 80017b0:	20000f0d 	.word	0x20000f0d
 80017b4:	200010ae 	.word	0x200010ae
 80017b8:	20001144 	.word	0x20001144
 80017bc:	200010ac 	.word	0x200010ac
 80017c0:	200010aa 	.word	0x200010aa
 80017c4:	200010b0 	.word	0x200010b0
 80017c8:	200010b2 	.word	0x200010b2
 80017cc:	200010ca 	.word	0x200010ca
 	    	  }
 	    	  pick[rnd] = temPick/i; // use this for pick
 80017d0:	4b7a      	ldr	r3, [pc, #488]	@ (80019bc <main+0x4fc>)
 80017d2:	881a      	ldrh	r2, [r3, #0]
 80017d4:	4b7a      	ldr	r3, [pc, #488]	@ (80019c0 <main+0x500>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	4b78      	ldr	r3, [pc, #480]	@ (80019c4 <main+0x504>)
 80017e4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 	    	  place[rnd] = temPlace/i; // use this for place
 80017e8:	4b77      	ldr	r3, [pc, #476]	@ (80019c8 <main+0x508>)
 80017ea:	881a      	ldrh	r2, [r3, #0]
 80017ec:	4b74      	ldr	r3, [pc, #464]	@ (80019c0 <main+0x500>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	4b74      	ldr	r3, [pc, #464]	@ (80019cc <main+0x50c>)
 80017fc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 	    	  temPick = temPick%i;
 8001800:	4b6e      	ldr	r3, [pc, #440]	@ (80019bc <main+0x4fc>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	88fa      	ldrh	r2, [r7, #6]
 8001806:	fbb3 f1f2 	udiv	r1, r3, r2
 800180a:	fb01 f202 	mul.w	r2, r1, r2
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	b29a      	uxth	r2, r3
 8001812:	4b6a      	ldr	r3, [pc, #424]	@ (80019bc <main+0x4fc>)
 8001814:	801a      	strh	r2, [r3, #0]
 	    	  temPlace = temPlace%i;
 8001816:	4b6c      	ldr	r3, [pc, #432]	@ (80019c8 <main+0x508>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	88fa      	ldrh	r2, [r7, #6]
 800181c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001820:	fb01 f202 	mul.w	r2, r1, r2
 8001824:	1a9b      	subs	r3, r3, r2
 8001826:	b29a      	uxth	r2, r3
 8001828:	4b67      	ldr	r3, [pc, #412]	@ (80019c8 <main+0x508>)
 800182a:	801a      	strh	r2, [r3, #0]
 	    	  rnd++;
 800182c:	4b64      	ldr	r3, [pc, #400]	@ (80019c0 <main+0x500>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b62      	ldr	r3, [pc, #392]	@ (80019c0 <main+0x500>)
 8001836:	701a      	strb	r2, [r3, #0]
 	      for(uint16_t i = 10000;i>=1;i/=10)
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	4a65      	ldr	r2, [pc, #404]	@ (80019d0 <main+0x510>)
 800183c:	fba2 2303 	umull	r2, r3, r2, r3
 8001840:	08db      	lsrs	r3, r3, #3
 8001842:	80fb      	strh	r3, [r7, #6]
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f47f af66 	bne.w	8001718 <main+0x258>
 800184c:	e69c      	b.n	8001588 <main+0xc8>
 	      }
 	  }
 	  else if(rnd > 0) //  run Jog
 800184e:	4b5c      	ldr	r3, [pc, #368]	@ (80019c0 <main+0x500>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 809d 	beq.w	8001992 <main+0x4d2>
 	  {
 	  		if(registerFrame[0x10].U16 == 0 && rnd == 5 && gripper == 0 && reed == 1 && vacuum == 0) // first rev
 8001858:	4b5e      	ldr	r3, [pc, #376]	@ (80019d4 <main+0x514>)
 800185a:	8c1b      	ldrh	r3, [r3, #32]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d11f      	bne.n	80018a0 <main+0x3e0>
 8001860:	4b57      	ldr	r3, [pc, #348]	@ (80019c0 <main+0x500>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b05      	cmp	r3, #5
 8001866:	d11b      	bne.n	80018a0 <main+0x3e0>
 8001868:	4b5b      	ldr	r3, [pc, #364]	@ (80019d8 <main+0x518>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d117      	bne.n	80018a0 <main+0x3e0>
 8001870:	4b5a      	ldr	r3, [pc, #360]	@ (80019dc <main+0x51c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d113      	bne.n	80018a0 <main+0x3e0>
 8001878:	4b59      	ldr	r3, [pc, #356]	@ (80019e0 <main+0x520>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10f      	bne.n	80018a0 <main+0x3e0>
 	  		{
 	  			(registerFrame[0x10].U16) = 4; // Z-go pick
 8001880:	4b54      	ldr	r3, [pc, #336]	@ (80019d4 <main+0x514>)
 8001882:	2204      	movs	r2, #4
 8001884:	841a      	strh	r2, [r3, #32]
 	  			setPos = shelfPos[pick[5-rnd]-1];
 8001886:	4b4e      	ldr	r3, [pc, #312]	@ (80019c0 <main+0x500>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f1c3 0305 	rsb	r3, r3, #5
 800188e:	4a4d      	ldr	r2, [pc, #308]	@ (80019c4 <main+0x504>)
 8001890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001894:	3b01      	subs	r3, #1
 8001896:	4a53      	ldr	r2, [pc, #332]	@ (80019e4 <main+0x524>)
 8001898:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800189c:	4b52      	ldr	r3, [pc, #328]	@ (80019e8 <main+0x528>)
 800189e:	801a      	strh	r2, [r3, #0]
 	  		}
 	  		if((piingpong && registerFrame[0x10].U16 == 8)) // prev mode: place, do pick
 80018a0:	4b52      	ldr	r3, [pc, #328]	@ (80019ec <main+0x52c>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d03c      	beq.n	8001922 <main+0x462>
 80018a8:	4b4a      	ldr	r3, [pc, #296]	@ (80019d4 <main+0x514>)
 80018aa:	8c1b      	ldrh	r3, [r3, #32]
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d138      	bne.n	8001922 <main+0x462>
 	  		{
 	  			///////place down

 	  			if(reed != 2){
 80018b0:	4b4a      	ldr	r3, [pc, #296]	@ (80019dc <main+0x51c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d003      	beq.n	80018c0 <main+0x400>
 	  				registerFrame[0x03].U16 = 1; // gripper forward
 80018b8:	4b46      	ldr	r3, [pc, #280]	@ (80019d4 <main+0x514>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	80da      	strh	r2, [r3, #6]
 80018be:	e005      	b.n	80018cc <main+0x40c>
 	  			}
 	  			else //reached
 	  			{
 	  				registerFrame[0x02].U16 = 0; //vacuum off
 80018c0:	4b44      	ldr	r3, [pc, #272]	@ (80019d4 <main+0x514>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	809a      	strh	r2, [r3, #4]
 	  					//Delay a few sec
 	  				registerFrame[0x03].U16 = 0; //gripper backward
 80018c6:	4b43      	ldr	r3, [pc, #268]	@ (80019d4 <main+0x514>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	80da      	strh	r2, [r3, #6]
 	  			}
 	  			///////finish place -> move on
 	  			if(gripper == 0 && reed == 1 && vacuum == 0)
 80018cc:	4b42      	ldr	r3, [pc, #264]	@ (80019d8 <main+0x518>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d170      	bne.n	80019b6 <main+0x4f6>
 80018d4:	4b41      	ldr	r3, [pc, #260]	@ (80019dc <main+0x51c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d16c      	bne.n	80019b6 <main+0x4f6>
 80018dc:	4b40      	ldr	r3, [pc, #256]	@ (80019e0 <main+0x520>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d168      	bne.n	80019b6 <main+0x4f6>
 	  			{
 	  				rnd--;
 80018e4:	4b36      	ldr	r3, [pc, #216]	@ (80019c0 <main+0x500>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b34      	ldr	r3, [pc, #208]	@ (80019c0 <main+0x500>)
 80018ee:	701a      	strb	r2, [r3, #0]
 	  				if(rnd>0)
 80018f0:	4b33      	ldr	r3, [pc, #204]	@ (80019c0 <main+0x500>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d010      	beq.n	800191a <main+0x45a>
 	  				{
 	  					(registerFrame[0x10].U16) = 4; // Z-go pick
 80018f8:	4b36      	ldr	r3, [pc, #216]	@ (80019d4 <main+0x514>)
 80018fa:	2204      	movs	r2, #4
 80018fc:	841a      	strh	r2, [r3, #32]
 	  					setPos = shelfPos[pick[5-rnd]-1];
 80018fe:	4b30      	ldr	r3, [pc, #192]	@ (80019c0 <main+0x500>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	f1c3 0305 	rsb	r3, r3, #5
 8001906:	4a2f      	ldr	r2, [pc, #188]	@ (80019c4 <main+0x504>)
 8001908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800190c:	3b01      	subs	r3, #1
 800190e:	4a35      	ldr	r2, [pc, #212]	@ (80019e4 <main+0x524>)
 8001910:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001914:	4b34      	ldr	r3, [pc, #208]	@ (80019e8 <main+0x528>)
 8001916:	801a      	strh	r2, [r3, #0]
 	  			if(gripper == 0 && reed == 1 && vacuum == 0)
 8001918:	e04d      	b.n	80019b6 <main+0x4f6>
 	  				}
 	  				else
 	  				{
 	  					(registerFrame[0x10].U16 = 0); // End Jogs
 800191a:	4b2e      	ldr	r3, [pc, #184]	@ (80019d4 <main+0x514>)
 800191c:	2200      	movs	r2, #0
 800191e:	841a      	strh	r2, [r3, #32]
 	  			if(gripper == 0 && reed == 1 && vacuum == 0)
 8001920:	e049      	b.n	80019b6 <main+0x4f6>
 	  				}
 	  			}
 	  			//MoveTosetPos();
 	  		}
 	  		else if(piingpong && registerFrame[0x10].U16 == 4)// prev mode: pick, do place
 8001922:	4b32      	ldr	r3, [pc, #200]	@ (80019ec <main+0x52c>)
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f43f ae2e 	beq.w	8001588 <main+0xc8>
 800192c:	4b29      	ldr	r3, [pc, #164]	@ (80019d4 <main+0x514>)
 800192e:	8c1b      	ldrh	r3, [r3, #32]
 8001930:	2b04      	cmp	r3, #4
 8001932:	f47f ae29 	bne.w	8001588 <main+0xc8>
 	  		{
 	  			//////pick up
 	  			if(reed != 2)
 8001936:	4b29      	ldr	r3, [pc, #164]	@ (80019dc <main+0x51c>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d003      	beq.n	8001946 <main+0x486>
 	  			{
 	  				registerFrame[0x03].U16 = 1; //gripper forward
 800193e:	4b25      	ldr	r3, [pc, #148]	@ (80019d4 <main+0x514>)
 8001940:	2201      	movs	r2, #1
 8001942:	80da      	strh	r2, [r3, #6]
 8001944:	e005      	b.n	8001952 <main+0x492>
 	  			}
 	  			else
 	  			{
 	  				registerFrame[0x02].U16 = 1; //vacuum on
 8001946:	4b23      	ldr	r3, [pc, #140]	@ (80019d4 <main+0x514>)
 8001948:	2201      	movs	r2, #1
 800194a:	809a      	strh	r2, [r3, #4]
 	  				// Delay a few sec
 	  				registerFrame[0x03].U16 = 0; //gripper backward
 800194c:	4b21      	ldr	r3, [pc, #132]	@ (80019d4 <main+0x514>)
 800194e:	2200      	movs	r2, #0
 8001950:	80da      	strh	r2, [r3, #6]
 	  			}
 	  			///////finish pick -> move on
 	  			if(gripper == 0 && reed == 1 && vacuum == 1)
 8001952:	4b21      	ldr	r3, [pc, #132]	@ (80019d8 <main+0x518>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f47f ae16 	bne.w	8001588 <main+0xc8>
 800195c:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <main+0x51c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	f47f ae11 	bne.w	8001588 <main+0xc8>
 8001966:	4b1e      	ldr	r3, [pc, #120]	@ (80019e0 <main+0x520>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b01      	cmp	r3, #1
 800196c:	f47f ae0c 	bne.w	8001588 <main+0xc8>
 	  			{
 	  				(registerFrame[0x10].U16) = 8; // Z-go place
 8001970:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <main+0x514>)
 8001972:	2208      	movs	r2, #8
 8001974:	841a      	strh	r2, [r3, #32]
 	  				setPos = shelfPos[place[5-rnd]-1];
 8001976:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <main+0x500>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	f1c3 0305 	rsb	r3, r3, #5
 800197e:	4a13      	ldr	r2, [pc, #76]	@ (80019cc <main+0x50c>)
 8001980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001984:	3b01      	subs	r3, #1
 8001986:	4a17      	ldr	r2, [pc, #92]	@ (80019e4 <main+0x524>)
 8001988:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800198c:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <main+0x528>)
 800198e:	801a      	strh	r2, [r3, #0]
 8001990:	e5fa      	b.n	8001588 <main+0xc8>
 	  			}
 	  		}

 	  	}

 	  	else if(piingpong && (registerFrame[0x10].U16 == 2 || registerFrame[0x10].U16 == 16))
 8001992:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <main+0x52c>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f43f adf6 	beq.w	8001588 <main+0xc8>
 800199c:	4b0d      	ldr	r3, [pc, #52]	@ (80019d4 <main+0x514>)
 800199e:	8c1b      	ldrh	r3, [r3, #32]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d004      	beq.n	80019ae <main+0x4ee>
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <main+0x514>)
 80019a6:	8c1b      	ldrh	r3, [r3, #32]
 80019a8:	2b10      	cmp	r3, #16
 80019aa:	f47f aded 	bne.w	8001588 <main+0xc8>
 	  	{
 	  		//finish point & home mode
 	  		registerFrame[0x10].U16 = 0;
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <main+0x514>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	841a      	strh	r2, [r3, #32]
 80019b4:	e5e8      	b.n	8001588 <main+0xc8>
 	  			if(gripper == 0 && reed == 1 && vacuum == 0)
 80019b6:	bf00      	nop
  {
 80019b8:	e5e6      	b.n	8001588 <main+0xc8>
 80019ba:	bf00      	nop
 80019bc:	200010b0 	.word	0x200010b0
 80019c0:	200010ca 	.word	0x200010ca
 80019c4:	200010b4 	.word	0x200010b4
 80019c8:	200010b2 	.word	0x200010b2
 80019cc:	200010c0 	.word	0x200010c0
 80019d0:	cccccccd 	.word	0xcccccccd
 80019d4:	20000f10 	.word	0x20000f10
 80019d8:	20000f0d 	.word	0x20000f0d
 80019dc:	20000f0e 	.word	0x20000f0e
 80019e0:	20000f0c 	.word	0x20000f0c
 80019e4:	200010a0 	.word	0x200010a0
 80019e8:	200010ac 	.word	0x200010ac
 80019ec:	200010aa 	.word	0x200010aa

080019f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b094      	sub	sp, #80	@ 0x50
 80019f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f6:	f107 0318 	add.w	r3, r7, #24
 80019fa:	2238      	movs	r2, #56	@ 0x38
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f007 fb50 	bl	80090a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f002 f8b4 	bl	8003b80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a20:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a22:	2340      	movs	r3, #64	@ 0x40
 8001a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a26:	2302      	movs	r3, #2
 8001a28:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001a32:	2355      	movs	r3, #85	@ 0x55
 8001a34:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a36:	2302      	movs	r3, #2
 8001a38:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a42:	f107 0318 	add.w	r3, r7, #24
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 f94e 	bl	8003ce8 <HAL_RCC_OscConfig>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001a52:	f000 fe8b 	bl	800276c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a56:	230f      	movs	r3, #15
 8001a58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	2104      	movs	r1, #4
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 fc4c 	bl	800430c <HAL_RCC_ClockConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001a7a:	f000 fe77 	bl	800276c <Error_Handler>
  }
}
 8001a7e:	bf00      	nop
 8001a80:	3750      	adds	r7, #80	@ 0x50
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b09e      	sub	sp, #120	@ 0x78
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001aa8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
 8001ac4:	615a      	str	r2, [r3, #20]
 8001ac6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ac8:	463b      	mov	r3, r7
 8001aca:	2234      	movs	r2, #52	@ 0x34
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f007 fae8 	bl	80090a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ad4:	4b54      	ldr	r3, [pc, #336]	@ (8001c28 <MX_TIM1_Init+0x1a0>)
 8001ad6:	4a55      	ldr	r2, [pc, #340]	@ (8001c2c <MX_TIM1_Init+0x1a4>)
 8001ad8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001ada:	4b53      	ldr	r3, [pc, #332]	@ (8001c28 <MX_TIM1_Init+0x1a0>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae0:	4b51      	ldr	r3, [pc, #324]	@ (8001c28 <MX_TIM1_Init+0x1a0>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ae6:	4b50      	ldr	r3, [pc, #320]	@ (8001c28 <MX_TIM1_Init+0x1a0>)
 8001ae8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aee:	4b4e      	ldr	r3, [pc, #312]	@ (8001c28 <MX_TIM1_Init+0x1a0>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001af4:	4b4c      	ldr	r3, [pc, #304]	@ (8001c28 <MX_TIM1_Init+0x1a0>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afa:	4b4b      	ldr	r3, [pc, #300]	@ (8001c28 <MX_TIM1_Init+0x1a0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b00:	4849      	ldr	r0, [pc, #292]	@ (8001c28 <MX_TIM1_Init+0x1a0>)
 8001b02:	f003 f86d 	bl	8004be0 <HAL_TIM_Base_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001b0c:	f000 fe2e 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b14:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b16:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4842      	ldr	r0, [pc, #264]	@ (8001c28 <MX_TIM1_Init+0x1a0>)
 8001b1e:	f004 f91f 	bl	8005d60 <HAL_TIM_ConfigClockSource>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001b28:	f000 fe20 	bl	800276c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b2c:	483e      	ldr	r0, [pc, #248]	@ (8001c28 <MX_TIM1_Init+0x1a0>)
 8001b2e:	f003 f9d3 	bl	8004ed8 <HAL_TIM_PWM_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001b38:	f000 fe18 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b48:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4836      	ldr	r0, [pc, #216]	@ (8001c28 <MX_TIM1_Init+0x1a0>)
 8001b50:	f005 f8e2 	bl	8006d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001b5a:	f000 fe07 	bl	800276c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001b62:	2301      	movs	r3, #1
 8001b64:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 8001b66:	2301      	movs	r3, #1
 8001b68:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001b6a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b6e:	461a      	mov	r2, r3
 8001b70:	2101      	movs	r1, #1
 8001b72:	482d      	ldr	r0, [pc, #180]	@ (8001c28 <MX_TIM1_Init+0x1a0>)
 8001b74:	f005 f9fa 	bl	8006f6c <HAL_TIMEx_ConfigBreakInput>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001b7e:	f000 fdf5 	bl	800276c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b82:	2360      	movs	r3, #96	@ 0x60
 8001b84:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b9e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4820      	ldr	r0, [pc, #128]	@ (8001c28 <MX_TIM1_Init+0x1a0>)
 8001ba8:	f003 ffc6 	bl	8005b38 <HAL_TIM_PWM_ConfigChannel>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001bb2:	f000 fddb 	bl	800276c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bb6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bba:	2204      	movs	r2, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	481a      	ldr	r0, [pc, #104]	@ (8001c28 <MX_TIM1_Init+0x1a0>)
 8001bc0:	f003 ffba 	bl	8005b38 <HAL_TIM_PWM_ConfigChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001bca:	f000 fdcf 	bl	800276c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001bde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001be2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bf4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c06:	463b      	mov	r3, r7
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4807      	ldr	r0, [pc, #28]	@ (8001c28 <MX_TIM1_Init+0x1a0>)
 8001c0c:	f005 f91a 	bl	8006e44 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8001c16:	f000 fda9 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c1a:	4803      	ldr	r0, [pc, #12]	@ (8001c28 <MX_TIM1_Init+0x1a0>)
 8001c1c:	f000 fef2 	bl	8002a04 <HAL_TIM_MspPostInit>

}
 8001c20:	bf00      	nop
 8001c22:	3778      	adds	r7, #120	@ 0x78
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000240 	.word	0x20000240
 8001c2c:	40012c00 	.word	0x40012c00

08001c30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08c      	sub	sp, #48	@ 0x30
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	2224      	movs	r2, #36	@ 0x24
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f007 fa30 	bl	80090a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c44:	463b      	mov	r3, r7
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c4e:	4b21      	ldr	r3, [pc, #132]	@ (8001cd4 <MX_TIM2_Init+0xa4>)
 8001c50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c56:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd4 <MX_TIM2_Init+0xa4>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd4 <MX_TIM2_Init+0xa4>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c62:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <MX_TIM2_Init+0xa4>)
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295
 8001c68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <MX_TIM2_Init+0xa4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c70:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <MX_TIM2_Init+0xa4>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c76:	2303      	movs	r3, #3
 8001c78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c92:	2300      	movs	r3, #0
 8001c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	480c      	ldr	r0, [pc, #48]	@ (8001cd4 <MX_TIM2_Init+0xa4>)
 8001ca2:	f003 fc8d 	bl	80055c0 <HAL_TIM_Encoder_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001cac:	f000 fd5e 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cb8:	463b      	mov	r3, r7
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4805      	ldr	r0, [pc, #20]	@ (8001cd4 <MX_TIM2_Init+0xa4>)
 8001cbe:	f005 f82b 	bl	8006d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001cc8:	f000 fd50 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ccc:	bf00      	nop
 8001cce:	3730      	adds	r7, #48	@ 0x30
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	2000030c 	.word	0x2000030c

08001cd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08e      	sub	sp, #56	@ 0x38
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
 8001d04:	611a      	str	r2, [r3, #16]
 8001d06:	615a      	str	r2, [r3, #20]
 8001d08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001dbc <MX_TIM3_Init+0xe4>)
 8001d0c:	4a2c      	ldr	r2, [pc, #176]	@ (8001dc0 <MX_TIM3_Init+0xe8>)
 8001d0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001d10:	4b2a      	ldr	r3, [pc, #168]	@ (8001dbc <MX_TIM3_Init+0xe4>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d16:	4b29      	ldr	r3, [pc, #164]	@ (8001dbc <MX_TIM3_Init+0xe4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 106;
 8001d1c:	4b27      	ldr	r3, [pc, #156]	@ (8001dbc <MX_TIM3_Init+0xe4>)
 8001d1e:	226a      	movs	r2, #106	@ 0x6a
 8001d20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d22:	4b26      	ldr	r3, [pc, #152]	@ (8001dbc <MX_TIM3_Init+0xe4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d28:	4b24      	ldr	r3, [pc, #144]	@ (8001dbc <MX_TIM3_Init+0xe4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d2e:	4823      	ldr	r0, [pc, #140]	@ (8001dbc <MX_TIM3_Init+0xe4>)
 8001d30:	f002 ff56 	bl	8004be0 <HAL_TIM_Base_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d3a:	f000 fd17 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d48:	4619      	mov	r1, r3
 8001d4a:	481c      	ldr	r0, [pc, #112]	@ (8001dbc <MX_TIM3_Init+0xe4>)
 8001d4c:	f004 f808 	bl	8005d60 <HAL_TIM_ConfigClockSource>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d56:	f000 fd09 	bl	800276c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d5a:	4818      	ldr	r0, [pc, #96]	@ (8001dbc <MX_TIM3_Init+0xe4>)
 8001d5c:	f003 f8bc 	bl	8004ed8 <HAL_TIM_PWM_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d66:	f000 fd01 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d72:	f107 031c 	add.w	r3, r7, #28
 8001d76:	4619      	mov	r1, r3
 8001d78:	4810      	ldr	r0, [pc, #64]	@ (8001dbc <MX_TIM3_Init+0xe4>)
 8001d7a:	f004 ffcd 	bl	8006d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d84:	f000 fcf2 	bl	800276c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d88:	2360      	movs	r3, #96	@ 0x60
 8001d8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d98:	463b      	mov	r3, r7
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4807      	ldr	r0, [pc, #28]	@ (8001dbc <MX_TIM3_Init+0xe4>)
 8001da0:	f003 feca 	bl	8005b38 <HAL_TIM_PWM_ConfigChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001daa:	f000 fcdf 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dae:	4803      	ldr	r0, [pc, #12]	@ (8001dbc <MX_TIM3_Init+0xe4>)
 8001db0:	f000 fe28 	bl	8002a04 <HAL_TIM_MspPostInit>

}
 8001db4:	bf00      	nop
 8001db6:	3738      	adds	r7, #56	@ 0x38
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	200003d8 	.word	0x200003d8
 8001dc0:	40000400 	.word	0x40000400

08001dc4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dca:	f107 0310 	add.w	r3, r7, #16
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001de2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e58 <MX_TIM4_Init+0x94>)
 8001de4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e5c <MX_TIM4_Init+0x98>)
 8001de6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <MX_TIM4_Init+0x94>)
 8001dea:	22a9      	movs	r2, #169	@ 0xa9
 8001dec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <MX_TIM4_Init+0x94>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001df4:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <MX_TIM4_Init+0x94>)
 8001df6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dfa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfc:	4b16      	ldr	r3, [pc, #88]	@ (8001e58 <MX_TIM4_Init+0x94>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e02:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <MX_TIM4_Init+0x94>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e08:	4813      	ldr	r0, [pc, #76]	@ (8001e58 <MX_TIM4_Init+0x94>)
 8001e0a:	f002 fee9 	bl	8004be0 <HAL_TIM_Base_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001e14:	f000 fcaa 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e1e:	f107 0310 	add.w	r3, r7, #16
 8001e22:	4619      	mov	r1, r3
 8001e24:	480c      	ldr	r0, [pc, #48]	@ (8001e58 <MX_TIM4_Init+0x94>)
 8001e26:	f003 ff9b 	bl	8005d60 <HAL_TIM_ConfigClockSource>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001e30:	f000 fc9c 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e34:	2300      	movs	r3, #0
 8001e36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4805      	ldr	r0, [pc, #20]	@ (8001e58 <MX_TIM4_Init+0x94>)
 8001e42:	f004 ff69 	bl	8006d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001e4c:	f000 fc8e 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e50:	bf00      	nop
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200004a4 	.word	0x200004a4
 8001e5c:	40000800 	.word	0x40000800

08001e60 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e66:	f107 0310 	add.w	r3, r7, #16
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <MX_TIM5_Init+0x98>)
 8001e80:	4a1e      	ldr	r2, [pc, #120]	@ (8001efc <MX_TIM5_Init+0x9c>)
 8001e82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16999;
 8001e84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef8 <MX_TIM5_Init+0x98>)
 8001e86:	f244 2267 	movw	r2, #16999	@ 0x4267
 8001e8a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <MX_TIM5_Init+0x98>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8001e92:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <MX_TIM5_Init+0x98>)
 8001e94:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001e98:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9a:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <MX_TIM5_Init+0x98>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <MX_TIM5_Init+0x98>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ea6:	4814      	ldr	r0, [pc, #80]	@ (8001ef8 <MX_TIM5_Init+0x98>)
 8001ea8:	f002 fe9a 	bl	8004be0 <HAL_TIM_Base_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001eb2:	f000 fc5b 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	480d      	ldr	r0, [pc, #52]	@ (8001ef8 <MX_TIM5_Init+0x98>)
 8001ec4:	f003 ff4c 	bl	8005d60 <HAL_TIM_ConfigClockSource>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001ece:	f000 fc4d 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4806      	ldr	r0, [pc, #24]	@ (8001ef8 <MX_TIM5_Init+0x98>)
 8001ee0:	f004 ff1a 	bl	8006d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001eea:	f000 fc3f 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	3720      	adds	r7, #32
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000570 	.word	0x20000570
 8001efc:	40000c00 	.word	0x40000c00

08001f00 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001f04:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <MX_TIM16_Init+0x58>)
 8001f06:	4a15      	ldr	r2, [pc, #84]	@ (8001f5c <MX_TIM16_Init+0x5c>)
 8001f08:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001f0a:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <MX_TIM16_Init+0x58>)
 8001f0c:	22a9      	movs	r2, #169	@ 0xa9
 8001f0e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f10:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <MX_TIM16_Init+0x58>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <MX_TIM16_Init+0x58>)
 8001f18:	f240 4279 	movw	r2, #1145	@ 0x479
 8001f1c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <MX_TIM16_Init+0x58>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <MX_TIM16_Init+0x58>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <MX_TIM16_Init+0x58>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f30:	4809      	ldr	r0, [pc, #36]	@ (8001f58 <MX_TIM16_Init+0x58>)
 8001f32:	f002 fe55 	bl	8004be0 <HAL_TIM_Base_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001f3c:	f000 fc16 	bl	800276c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001f40:	2108      	movs	r1, #8
 8001f42:	4805      	ldr	r0, [pc, #20]	@ (8001f58 <MX_TIM16_Init+0x58>)
 8001f44:	f003 fa46 	bl	80053d4 <HAL_TIM_OnePulse_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001f4e:	f000 fc0d 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	2000063c 	.word	0x2000063c
 8001f5c:	40014400 	.word	0x40014400

08001f60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f64:	4b22      	ldr	r3, [pc, #136]	@ (8001ff0 <MX_USART1_UART_Init+0x90>)
 8001f66:	4a23      	ldr	r2, [pc, #140]	@ (8001ff4 <MX_USART1_UART_Init+0x94>)
 8001f68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ff0 <MX_USART1_UART_Init+0x90>)
 8001f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f72:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff0 <MX_USART1_UART_Init+0x90>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff0 <MX_USART1_UART_Init+0x90>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff0 <MX_USART1_UART_Init+0x90>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f84:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <MX_USART1_UART_Init+0x90>)
 8001f86:	220c      	movs	r2, #12
 8001f88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8a:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <MX_USART1_UART_Init+0x90>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f90:	4b17      	ldr	r3, [pc, #92]	@ (8001ff0 <MX_USART1_UART_Init+0x90>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f96:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <MX_USART1_UART_Init+0x90>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <MX_USART1_UART_Init+0x90>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fa2:	4b13      	ldr	r3, [pc, #76]	@ (8001ff0 <MX_USART1_UART_Init+0x90>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fa8:	4811      	ldr	r0, [pc, #68]	@ (8001ff0 <MX_USART1_UART_Init+0x90>)
 8001faa:	f005 f951 	bl	8007250 <HAL_UART_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001fb4:	f000 fbda 	bl	800276c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fb8:	2100      	movs	r1, #0
 8001fba:	480d      	ldr	r0, [pc, #52]	@ (8001ff0 <MX_USART1_UART_Init+0x90>)
 8001fbc:	f006 ff71 	bl	8008ea2 <HAL_UARTEx_SetTxFifoThreshold>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001fc6:	f000 fbd1 	bl	800276c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4808      	ldr	r0, [pc, #32]	@ (8001ff0 <MX_USART1_UART_Init+0x90>)
 8001fce:	f006 ffa6 	bl	8008f1e <HAL_UARTEx_SetRxFifoThreshold>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001fd8:	f000 fbc8 	bl	800276c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001fdc:	4804      	ldr	r0, [pc, #16]	@ (8001ff0 <MX_USART1_UART_Init+0x90>)
 8001fde:	f006 ff27 	bl	8008e30 <HAL_UARTEx_DisableFifoMode>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001fe8:	f000 fbc0 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000768 	.word	0x20000768
 8001ff4:	40013800 	.word	0x40013800

08001ff8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ffc:	4b23      	ldr	r3, [pc, #140]	@ (800208c <MX_USART2_UART_Init+0x94>)
 8001ffe:	4a24      	ldr	r2, [pc, #144]	@ (8002090 <MX_USART2_UART_Init+0x98>)
 8002000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002002:	4b22      	ldr	r3, [pc, #136]	@ (800208c <MX_USART2_UART_Init+0x94>)
 8002004:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800200a:	4b20      	ldr	r3, [pc, #128]	@ (800208c <MX_USART2_UART_Init+0x94>)
 800200c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002010:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002012:	4b1e      	ldr	r3, [pc, #120]	@ (800208c <MX_USART2_UART_Init+0x94>)
 8002014:	2200      	movs	r2, #0
 8002016:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002018:	4b1c      	ldr	r3, [pc, #112]	@ (800208c <MX_USART2_UART_Init+0x94>)
 800201a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800201e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002020:	4b1a      	ldr	r3, [pc, #104]	@ (800208c <MX_USART2_UART_Init+0x94>)
 8002022:	220c      	movs	r2, #12
 8002024:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002026:	4b19      	ldr	r3, [pc, #100]	@ (800208c <MX_USART2_UART_Init+0x94>)
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800202c:	4b17      	ldr	r3, [pc, #92]	@ (800208c <MX_USART2_UART_Init+0x94>)
 800202e:	2200      	movs	r2, #0
 8002030:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002032:	4b16      	ldr	r3, [pc, #88]	@ (800208c <MX_USART2_UART_Init+0x94>)
 8002034:	2200      	movs	r2, #0
 8002036:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002038:	4b14      	ldr	r3, [pc, #80]	@ (800208c <MX_USART2_UART_Init+0x94>)
 800203a:	2200      	movs	r2, #0
 800203c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800203e:	4b13      	ldr	r3, [pc, #76]	@ (800208c <MX_USART2_UART_Init+0x94>)
 8002040:	2200      	movs	r2, #0
 8002042:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002044:	4811      	ldr	r0, [pc, #68]	@ (800208c <MX_USART2_UART_Init+0x94>)
 8002046:	f005 f903 	bl	8007250 <HAL_UART_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002050:	f000 fb8c 	bl	800276c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002054:	2100      	movs	r1, #0
 8002056:	480d      	ldr	r0, [pc, #52]	@ (800208c <MX_USART2_UART_Init+0x94>)
 8002058:	f006 ff23 	bl	8008ea2 <HAL_UARTEx_SetTxFifoThreshold>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002062:	f000 fb83 	bl	800276c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002066:	2100      	movs	r1, #0
 8002068:	4808      	ldr	r0, [pc, #32]	@ (800208c <MX_USART2_UART_Init+0x94>)
 800206a:	f006 ff58 	bl	8008f1e <HAL_UARTEx_SetRxFifoThreshold>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002074:	f000 fb7a 	bl	800276c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002078:	4804      	ldr	r0, [pc, #16]	@ (800208c <MX_USART2_UART_Init+0x94>)
 800207a:	f006 fed9 	bl	8008e30 <HAL_UARTEx_DisableFifoMode>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002084:	f000 fb72 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000834 	.word	0x20000834
 8002090:	40004400 	.word	0x40004400

08002094 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800209a:	4b24      	ldr	r3, [pc, #144]	@ (800212c <MX_DMA_Init+0x98>)
 800209c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800209e:	4a23      	ldr	r2, [pc, #140]	@ (800212c <MX_DMA_Init+0x98>)
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80020a6:	4b21      	ldr	r3, [pc, #132]	@ (800212c <MX_DMA_Init+0x98>)
 80020a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020b2:	4b1e      	ldr	r3, [pc, #120]	@ (800212c <MX_DMA_Init+0x98>)
 80020b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b6:	4a1d      	ldr	r2, [pc, #116]	@ (800212c <MX_DMA_Init+0x98>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80020be:	4b1b      	ldr	r3, [pc, #108]	@ (800212c <MX_DMA_Init+0x98>)
 80020c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020ca:	4b18      	ldr	r3, [pc, #96]	@ (800212c <MX_DMA_Init+0x98>)
 80020cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ce:	4a17      	ldr	r2, [pc, #92]	@ (800212c <MX_DMA_Init+0x98>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <MX_DMA_Init+0x98>)
 80020d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	200b      	movs	r0, #11
 80020e8:	f001 f831 	bl	800314e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80020ec:	200b      	movs	r0, #11
 80020ee:	f001 f848 	bl	8003182 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2100      	movs	r1, #0
 80020f6:	200c      	movs	r0, #12
 80020f8:	f001 f829 	bl	800314e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80020fc:	200c      	movs	r0, #12
 80020fe:	f001 f840 	bl	8003182 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	2100      	movs	r1, #0
 8002106:	200d      	movs	r0, #13
 8002108:	f001 f821 	bl	800314e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800210c:	200d      	movs	r0, #13
 800210e:	f001 f838 	bl	8003182 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	2100      	movs	r1, #0
 8002116:	2039      	movs	r0, #57	@ 0x39
 8002118:	f001 f819 	bl	800314e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 800211c:	2039      	movs	r0, #57	@ 0x39
 800211e:	f001 f830 	bl	8003182 <HAL_NVIC_EnableIRQ>

}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000

08002130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	@ 0x28
 8002134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
 8002144:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002146:	4b57      	ldr	r3, [pc, #348]	@ (80022a4 <MX_GPIO_Init+0x174>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214a:	4a56      	ldr	r2, [pc, #344]	@ (80022a4 <MX_GPIO_Init+0x174>)
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002152:	4b54      	ldr	r3, [pc, #336]	@ (80022a4 <MX_GPIO_Init+0x174>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800215e:	4b51      	ldr	r3, [pc, #324]	@ (80022a4 <MX_GPIO_Init+0x174>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002162:	4a50      	ldr	r2, [pc, #320]	@ (80022a4 <MX_GPIO_Init+0x174>)
 8002164:	f043 0320 	orr.w	r3, r3, #32
 8002168:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800216a:	4b4e      	ldr	r3, [pc, #312]	@ (80022a4 <MX_GPIO_Init+0x174>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	4b4b      	ldr	r3, [pc, #300]	@ (80022a4 <MX_GPIO_Init+0x174>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217a:	4a4a      	ldr	r2, [pc, #296]	@ (80022a4 <MX_GPIO_Init+0x174>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002182:	4b48      	ldr	r3, [pc, #288]	@ (80022a4 <MX_GPIO_Init+0x174>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800218e:	4b45      	ldr	r3, [pc, #276]	@ (80022a4 <MX_GPIO_Init+0x174>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002192:	4a44      	ldr	r2, [pc, #272]	@ (80022a4 <MX_GPIO_Init+0x174>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800219a:	4b42      	ldr	r3, [pc, #264]	@ (80022a4 <MX_GPIO_Init+0x174>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	f240 4111 	movw	r1, #1041	@ 0x411
 80021ac:	483e      	ldr	r0, [pc, #248]	@ (80022a8 <MX_GPIO_Init+0x178>)
 80021ae:	f001 fcb7 	bl	8003b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2180      	movs	r1, #128	@ 0x80
 80021b6:	483d      	ldr	r0, [pc, #244]	@ (80022ac <MX_GPIO_Init+0x17c>)
 80021b8:	f001 fcb2 	bl	8003b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	4619      	mov	r1, r3
 80021d2:	4836      	ldr	r0, [pc, #216]	@ (80022ac <MX_GPIO_Init+0x17c>)
 80021d4:	f001 fb22 	bl	800381c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021d8:	2380      	movs	r3, #128	@ 0x80
 80021da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021dc:	2300      	movs	r3, #0
 80021de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e0:	2301      	movs	r3, #1
 80021e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	4619      	mov	r1, r3
 80021ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021ee:	f001 fb15 	bl	800381c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4;
 80021f2:	f240 4311 	movw	r3, #1041	@ 0x411
 80021f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f8:	2301      	movs	r3, #1
 80021fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4619      	mov	r1, r3
 800220a:	4827      	ldr	r0, [pc, #156]	@ (80022a8 <MX_GPIO_Init+0x178>)
 800220c:	f001 fb06 	bl	800381c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002210:	2380      	movs	r3, #128	@ 0x80
 8002212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	2301      	movs	r3, #1
 8002216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4619      	mov	r1, r3
 8002226:	4821      	ldr	r0, [pc, #132]	@ (80022ac <MX_GPIO_Init+0x17c>)
 8002228:	f001 faf8 	bl	800381c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800222c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002232:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002238:	2301      	movs	r3, #1
 800223a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	4619      	mov	r1, r3
 8002242:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002246:	f001 fae9 	bl	800381c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800224a:	2320      	movs	r3, #32
 800224c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800224e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002254:	2301      	movs	r3, #1
 8002256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	4619      	mov	r1, r3
 800225e:	4812      	ldr	r0, [pc, #72]	@ (80022a8 <MX_GPIO_Init+0x178>)
 8002260:	f001 fadc 	bl	800381c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002264:	2340      	movs	r3, #64	@ 0x40
 8002266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002268:	2300      	movs	r3, #0
 800226a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800226c:	2301      	movs	r3, #1
 800226e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	4619      	mov	r1, r3
 8002276:	480c      	ldr	r0, [pc, #48]	@ (80022a8 <MX_GPIO_Init+0x178>)
 8002278:	f001 fad0 	bl	800381c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2100      	movs	r1, #0
 8002280:	2017      	movs	r0, #23
 8002282:	f000 ff64 	bl	800314e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002286:	2017      	movs	r0, #23
 8002288:	f000 ff7b 	bl	8003182 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800228c:	2200      	movs	r2, #0
 800228e:	2100      	movs	r1, #0
 8002290:	2028      	movs	r0, #40	@ 0x28
 8002292:	f000 ff5c 	bl	800314e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002296:	2028      	movs	r0, #40	@ 0x28
 8002298:	f000 ff73 	bl	8003182 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800229c:	bf00      	nop
 800229e:	3728      	adds	r7, #40	@ 0x28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	48000400 	.word	0x48000400
 80022ac:	48000800 	.word	0x48000800

080022b0 <generate_trapezoidal_velocity_profile>:

/* USER CODE BEGIN 4 */

///TRAJECTORY
void generate_trapezoidal_velocity_profile(double t2, double x2) {
 80022b0:	b5b0      	push	{r4, r5, r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	ed87 0b02 	vstr	d0, [r7, #8]
 80022ba:	ed87 1b00 	vstr	d1, [r7]
  // Total displacement and time interval
	total_displacement = x2 - position_now;
 80022be:	4b29      	ldr	r3, [pc, #164]	@ (8002364 <generate_trapezoidal_velocity_profile+0xb4>)
 80022c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022c8:	f7fd ffaa 	bl	8000220 <__aeabi_dsub>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4925      	ldr	r1, [pc, #148]	@ (8002368 <generate_trapezoidal_velocity_profile+0xb8>)
 80022d2:	e9c1 2300 	strd	r2, r3, [r1]
	total_time = t2;
 80022d6:	4925      	ldr	r1, [pc, #148]	@ (800236c <generate_trapezoidal_velocity_profile+0xbc>)
 80022d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022dc:	e9c1 2300 	strd	r2, r3, [r1]

  // Calculate optimal acceleration time (t_acc) - Assume a reasonable value
	t_acc = total_time / 4;  // This is an assumption; you can adjust it
 80022e0:	4b22      	ldr	r3, [pc, #136]	@ (800236c <generate_trapezoidal_velocity_profile+0xbc>)
 80022e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	4b21      	ldr	r3, [pc, #132]	@ (8002370 <generate_trapezoidal_velocity_profile+0xc0>)
 80022ec:	f7fe fa7a 	bl	80007e4 <__aeabi_ddiv>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	491f      	ldr	r1, [pc, #124]	@ (8002374 <generate_trapezoidal_velocity_profile+0xc4>)
 80022f6:	e9c1 2300 	strd	r2, r3, [r1]

  // Remaining time for constant velocity phase
	t_const = total_time - 2 * t_acc;
 80022fa:	4b1c      	ldr	r3, [pc, #112]	@ (800236c <generate_trapezoidal_velocity_profile+0xbc>)
 80022fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002300:	4b1c      	ldr	r3, [pc, #112]	@ (8002374 <generate_trapezoidal_velocity_profile+0xc4>)
 8002302:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	f7fd ff8b 	bl	8000224 <__adddf3>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4620      	mov	r0, r4
 8002314:	4629      	mov	r1, r5
 8002316:	f7fd ff83 	bl	8000220 <__aeabi_dsub>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4916      	ldr	r1, [pc, #88]	@ (8002378 <generate_trapezoidal_velocity_profile+0xc8>)
 8002320:	e9c1 2300 	strd	r2, r3, [r1]

  // Calculate peak velocity
	Peak = total_displacement / (t_acc + t_const);
 8002324:	4b10      	ldr	r3, [pc, #64]	@ (8002368 <generate_trapezoidal_velocity_profile+0xb8>)
 8002326:	e9d3 4500 	ldrd	r4, r5, [r3]
 800232a:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <generate_trapezoidal_velocity_profile+0xc4>)
 800232c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002330:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <generate_trapezoidal_velocity_profile+0xc8>)
 8002332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002336:	f7fd ff75 	bl	8000224 <__adddf3>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4620      	mov	r0, r4
 8002340:	4629      	mov	r1, r5
 8002342:	f7fe fa4f 	bl	80007e4 <__aeabi_ddiv>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	490c      	ldr	r1, [pc, #48]	@ (800237c <generate_trapezoidal_velocity_profile+0xcc>)
 800234c:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_TIM_Base_Start_IT(&htim2);
 8002350:	480b      	ldr	r0, [pc, #44]	@ (8002380 <generate_trapezoidal_velocity_profile+0xd0>)
 8002352:	f002 fd19 	bl	8004d88 <HAL_TIM_Base_Start_IT>

	Mode = 0;
 8002356:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <generate_trapezoidal_velocity_profile+0xd4>)
 8002358:	2200      	movs	r2, #0
 800235a:	801a      	strh	r2, [r3, #0]

  }
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bdb0      	pop	{r4, r5, r7, pc}
 8002364:	200010d0 	.word	0x200010d0
 8002368:	200010d8 	.word	0x200010d8
 800236c:	200010e0 	.word	0x200010e0
 8002370:	40100000 	.word	0x40100000
 8002374:	200010e8 	.word	0x200010e8
 8002378:	200010f0 	.word	0x200010f0
 800237c:	200010f8 	.word	0x200010f8
 8002380:	2000030c 	.word	0x2000030c
 8002384:	20001118 	.word	0x20001118

08002388 <generate_Velocity>:

void generate_Velocity()
{
 8002388:	b5b0      	push	{r4, r5, r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
	t = (time_op) * i / num_points;
 800238e:	4ba8      	ldr	r3, [pc, #672]	@ (8002630 <generate_Velocity+0x2a8>)
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	4610      	mov	r0, r2
 8002396:	4619      	mov	r1, r3
 8002398:	f7fe f8c4 	bl	8000524 <__aeabi_ul2d>
 800239c:	4ba5      	ldr	r3, [pc, #660]	@ (8002634 <generate_Velocity+0x2ac>)
 800239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a2:	f7fe f8f5 	bl	8000590 <__aeabi_dmul>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4614      	mov	r4, r2
 80023ac:	461d      	mov	r5, r3
 80023ae:	4ba2      	ldr	r3, [pc, #648]	@ (8002638 <generate_Velocity+0x2b0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe f882 	bl	80004bc <__aeabi_i2d>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4620      	mov	r0, r4
 80023be:	4629      	mov	r1, r5
 80023c0:	f7fe fa10 	bl	80007e4 <__aeabi_ddiv>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	499c      	ldr	r1, [pc, #624]	@ (800263c <generate_Velocity+0x2b4>)
 80023ca:	e9c1 2300 	strd	r2, r3, [r1]
		        if (t < t_acc) {
 80023ce:	4b9b      	ldr	r3, [pc, #620]	@ (800263c <generate_Velocity+0x2b4>)
 80023d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023d4:	4b9a      	ldr	r3, [pc, #616]	@ (8002640 <generate_Velocity+0x2b8>)
 80023d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023da:	f7fe fb4b 	bl	8000a74 <__aeabi_dcmplt>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01a      	beq.n	800241a <generate_Velocity+0x92>
		          velocity = (Peak * (t / t_acc));
 80023e4:	4b95      	ldr	r3, [pc, #596]	@ (800263c <generate_Velocity+0x2b4>)
 80023e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023ea:	4b95      	ldr	r3, [pc, #596]	@ (8002640 <generate_Velocity+0x2b8>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	f7fe f9f8 	bl	80007e4 <__aeabi_ddiv>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4610      	mov	r0, r2
 80023fa:	4619      	mov	r1, r3
 80023fc:	4b91      	ldr	r3, [pc, #580]	@ (8002644 <generate_Velocity+0x2bc>)
 80023fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002402:	f7fe f8c5 	bl	8000590 <__aeabi_dmul>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4610      	mov	r0, r2
 800240c:	4619      	mov	r1, r3
 800240e:	f7fe fb59 	bl	8000ac4 <__aeabi_d2f>
 8002412:	4603      	mov	r3, r0
 8002414:	4a8c      	ldr	r2, [pc, #560]	@ (8002648 <generate_Velocity+0x2c0>)
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	e04c      	b.n	80024b4 <generate_Velocity+0x12c>
		        } else if (t >= t_acc && t <+ t_acc + t_const) {
 800241a:	4b88      	ldr	r3, [pc, #544]	@ (800263c <generate_Velocity+0x2b4>)
 800241c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002420:	4b87      	ldr	r3, [pc, #540]	@ (8002640 <generate_Velocity+0x2b8>)
 8002422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002426:	f7fe fb39 	bl	8000a9c <__aeabi_dcmpge>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d01e      	beq.n	800246e <generate_Velocity+0xe6>
 8002430:	4b83      	ldr	r3, [pc, #524]	@ (8002640 <generate_Velocity+0x2b8>)
 8002432:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002436:	4b85      	ldr	r3, [pc, #532]	@ (800264c <generate_Velocity+0x2c4>)
 8002438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243c:	f7fd fef2 	bl	8000224 <__adddf3>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	4b7c      	ldr	r3, [pc, #496]	@ (800263c <generate_Velocity+0x2b4>)
 800244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244e:	f7fe fb2f 	bl	8000ab0 <__aeabi_dcmpgt>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <generate_Velocity+0xe6>
		          velocity = Peak;
 8002458:	4b7a      	ldr	r3, [pc, #488]	@ (8002644 <generate_Velocity+0x2bc>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f7fe fb2f 	bl	8000ac4 <__aeabi_d2f>
 8002466:	4603      	mov	r3, r0
 8002468:	4a77      	ldr	r2, [pc, #476]	@ (8002648 <generate_Velocity+0x2c0>)
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	e022      	b.n	80024b4 <generate_Velocity+0x12c>
		        } else {
		          velocity = (Peak * ((time_op - t) / t_acc));
 800246e:	4b71      	ldr	r3, [pc, #452]	@ (8002634 <generate_Velocity+0x2ac>)
 8002470:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002474:	4b71      	ldr	r3, [pc, #452]	@ (800263c <generate_Velocity+0x2b4>)
 8002476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247a:	f7fd fed1 	bl	8000220 <__aeabi_dsub>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4610      	mov	r0, r2
 8002484:	4619      	mov	r1, r3
 8002486:	4b6e      	ldr	r3, [pc, #440]	@ (8002640 <generate_Velocity+0x2b8>)
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	f7fe f9aa 	bl	80007e4 <__aeabi_ddiv>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	4b6a      	ldr	r3, [pc, #424]	@ (8002644 <generate_Velocity+0x2bc>)
 800249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249e:	f7fe f877 	bl	8000590 <__aeabi_dmul>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4610      	mov	r0, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	f7fe fb0b 	bl	8000ac4 <__aeabi_d2f>
 80024ae:	4603      	mov	r3, r0
 80024b0:	4a65      	ldr	r2, [pc, #404]	@ (8002648 <generate_Velocity+0x2c0>)
 80024b2:	6013      	str	r3, [r2, #0]
		        }
		        position += velocity/1000.0;
 80024b4:	4b66      	ldr	r3, [pc, #408]	@ (8002650 <generate_Velocity+0x2c8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe f811 	bl	80004e0 <__aeabi_f2d>
 80024be:	4604      	mov	r4, r0
 80024c0:	460d      	mov	r5, r1
 80024c2:	4b61      	ldr	r3, [pc, #388]	@ (8002648 <generate_Velocity+0x2c0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe f80a 	bl	80004e0 <__aeabi_f2d>
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	4b60      	ldr	r3, [pc, #384]	@ (8002654 <generate_Velocity+0x2cc>)
 80024d2:	f7fe f987 	bl	80007e4 <__aeabi_ddiv>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4620      	mov	r0, r4
 80024dc:	4629      	mov	r1, r5
 80024de:	f7fd fea1 	bl	8000224 <__adddf3>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f7fe faeb 	bl	8000ac4 <__aeabi_d2f>
 80024ee:	4603      	mov	r3, r0
 80024f0:	4a57      	ldr	r2, [pc, #348]	@ (8002650 <generate_Velocity+0x2c8>)
 80024f2:	6013      	str	r3, [r2, #0]

		        position_now = position;
 80024f4:	4b56      	ldr	r3, [pc, #344]	@ (8002650 <generate_Velocity+0x2c8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fd fff1 	bl	80004e0 <__aeabi_f2d>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4955      	ldr	r1, [pc, #340]	@ (8002658 <generate_Velocity+0x2d0>)
 8002504:	e9c1 2300 	strd	r2, r3, [r1]

		        Vfeedback = arm_pid_f32(&PID, position_now - qei);
 8002508:	4b53      	ldr	r3, [pc, #332]	@ (8002658 <generate_Velocity+0x2d0>)
 800250a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800250e:	4b53      	ldr	r3, [pc, #332]	@ (800265c <generate_Velocity+0x2d4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fd ffe4 	bl	80004e0 <__aeabi_f2d>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4620      	mov	r0, r4
 800251e:	4629      	mov	r1, r5
 8002520:	f7fd fe7e 	bl	8000220 <__aeabi_dsub>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4610      	mov	r0, r2
 800252a:	4619      	mov	r1, r3
 800252c:	f7fe faca 	bl	8000ac4 <__aeabi_d2f>
 8002530:	4603      	mov	r3, r0
 8002532:	4a4b      	ldr	r2, [pc, #300]	@ (8002660 <generate_Velocity+0x2d8>)
 8002534:	60fa      	str	r2, [r7, #12]
 8002536:	60bb      	str	r3, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	ed93 7a00 	vldr	s14, [r3]
 800253e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002542:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	edd3 6a01 	vldr	s13, [r3, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002552:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002556:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	edd3 7a04 	vldr	s15, [r3, #16]
 8002566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800256a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002578:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8002590:	edd7 7a01 	vldr	s15, [r7, #4]
 8002594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002598:	ee17 3a90 	vmov	r3, s15
 800259c:	b21a      	sxth	r2, r3
 800259e:	4b31      	ldr	r3, [pc, #196]	@ (8002664 <generate_Velocity+0x2dc>)
 80025a0:	801a      	strh	r2, [r3, #0]

		        if(Vfeedback < 0)
 80025a2:	4b30      	ldr	r3, [pc, #192]	@ (8002664 <generate_Velocity+0x2dc>)
 80025a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	da0a      	bge.n	80025c2 <generate_Velocity+0x23a>
		        {
		        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Vfeedback);
 80025ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002664 <generate_Velocity+0x2dc>)
 80025ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002668 <generate_Velocity+0x2e0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	635a      	str	r2, [r3, #52]	@ 0x34
		        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80025b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002668 <generate_Velocity+0x2e0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2200      	movs	r2, #0
 80025be:	639a      	str	r2, [r3, #56]	@ 0x38
 80025c0:	e01b      	b.n	80025fa <generate_Velocity+0x272>
		        }
		        else if(Vfeedback > 0)
 80025c2:	4b28      	ldr	r3, [pc, #160]	@ (8002664 <generate_Velocity+0x2dc>)
 80025c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	dd0a      	ble.n	80025e2 <generate_Velocity+0x25a>
		        {
		        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, Vfeedback);
 80025cc:	4b25      	ldr	r3, [pc, #148]	@ (8002664 <generate_Velocity+0x2dc>)
 80025ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025d2:	4b25      	ldr	r3, [pc, #148]	@ (8002668 <generate_Velocity+0x2e0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	639a      	str	r2, [r3, #56]	@ 0x38
		        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80025d8:	4b23      	ldr	r3, [pc, #140]	@ (8002668 <generate_Velocity+0x2e0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2200      	movs	r2, #0
 80025de:	635a      	str	r2, [r3, #52]	@ 0x34
 80025e0:	e00b      	b.n	80025fa <generate_Velocity+0x272>
		        }
		        else
		        {
		        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, Vfeedback);
 80025e2:	4b20      	ldr	r3, [pc, #128]	@ (8002664 <generate_Velocity+0x2dc>)
 80025e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002668 <generate_Velocity+0x2e0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	639a      	str	r2, [r3, #56]	@ 0x38
		        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Vfeedback);
 80025ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <generate_Velocity+0x2dc>)
 80025f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002668 <generate_Velocity+0x2e0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	635a      	str	r2, [r3, #52]	@ 0x34
		        }

//		        qei = PlantSimulation(Vfeeback);

		        if ( i >= time_op*1000)
 80025fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002630 <generate_Velocity+0x2a8>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	f7fd ff8e 	bl	8000524 <__aeabi_ul2d>
 8002608:	4604      	mov	r4, r0
 800260a:	460d      	mov	r5, r1
 800260c:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <generate_Velocity+0x2ac>)
 800260e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	4b0f      	ldr	r3, [pc, #60]	@ (8002654 <generate_Velocity+0x2cc>)
 8002618:	f7fd ffba 	bl	8000590 <__aeabi_dmul>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4620      	mov	r0, r4
 8002622:	4629      	mov	r1, r5
 8002624:	f7fe fa3a 	bl	8000a9c <__aeabi_dcmpge>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d11e      	bne.n	800266c <generate_Velocity+0x2e4>
		        {
		        	__HAL_TIM_SET_COUNTER(&htim4, 0);
		        	HAL_TIM_Base_Stop_IT(&htim4);
		        	i = 0;
		        }
}
 800262e:	e02b      	b.n	8002688 <generate_Velocity+0x300>
 8002630:	20001100 	.word	0x20001100
 8002634:	20000200 	.word	0x20000200
 8002638:	20000210 	.word	0x20000210
 800263c:	20001108 	.word	0x20001108
 8002640:	200010e8 	.word	0x200010e8
 8002644:	200010f8 	.word	0x200010f8
 8002648:	20001110 	.word	0x20001110
 800264c:	200010f0 	.word	0x200010f0
 8002650:	20001114 	.word	0x20001114
 8002654:	408f4000 	.word	0x408f4000
 8002658:	200010d0 	.word	0x200010d0
 800265c:	20001140 	.word	0x20001140
 8002660:	2000111c 	.word	0x2000111c
 8002664:	2000111a 	.word	0x2000111a
 8002668:	200003d8 	.word	0x200003d8
		        	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800266c:	4b08      	ldr	r3, [pc, #32]	@ (8002690 <generate_Velocity+0x308>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2200      	movs	r2, #0
 8002672:	625a      	str	r2, [r3, #36]	@ 0x24
		        	HAL_TIM_Base_Stop_IT(&htim4);
 8002674:	4806      	ldr	r0, [pc, #24]	@ (8002690 <generate_Velocity+0x308>)
 8002676:	f002 fbff 	bl	8004e78 <HAL_TIM_Base_Stop_IT>
		        	i = 0;
 800267a:	4906      	ldr	r1, [pc, #24]	@ (8002694 <generate_Velocity+0x30c>)
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bdb0      	pop	{r4, r5, r7, pc}
 8002690:	200004a4 	.word	0x200004a4
 8002694:	20001100 	.word	0x20001100

08002698 <HAL_GPIO_EXTI_Callback>:
uint8_t getZStop(){
	return zStop;
}

// @User : Stop motor when hit the end stop
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026a8:	d103      	bne.n	80026b2 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		Mode = 1;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	@ (80026e4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	801a      	strh	r2, [r3, #0]
	else if(GPIO_Pin == GPIO_PIN_5 || GPIO_Pin == GPIO_PIN_10){
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
		zStop = 1;
	}
}
 80026b0:	e011      	b.n	80026d6 <HAL_GPIO_EXTI_Callback+0x3e>
	else if(GPIO_Pin == GPIO_PIN_5 || GPIO_Pin == GPIO_PIN_10){
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	2b20      	cmp	r3, #32
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_EXTI_Callback+0x28>
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026be:	d10a      	bne.n	80026d6 <HAL_GPIO_EXTI_Callback+0x3e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80026c0:	4b09      	ldr	r3, [pc, #36]	@ (80026e8 <HAL_GPIO_EXTI_Callback+0x50>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2200      	movs	r2, #0
 80026c6:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80026c8:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <HAL_GPIO_EXTI_Callback+0x50>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2200      	movs	r2, #0
 80026ce:	639a      	str	r2, [r3, #56]	@ 0x38
		zStop = 1;
 80026d0:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <HAL_GPIO_EXTI_Callback+0x54>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20001118 	.word	0x20001118
 80026e8:	20000240 	.word	0x20000240
 80026ec:	20000a30 	.word	0x20000a30

080026f0 <HAL_TIM_PWM_PulseFinishedCallback>:


// @User : Stop timer3 that send data to led
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3){
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a05      	ldr	r2, [pc, #20]	@ (8002714 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d103      	bne.n	800270a <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 8002702:	2104      	movs	r1, #4
 8002704:	4804      	ldr	r0, [pc, #16]	@ (8002718 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8002706:	f002 fd67 	bl	80051d8 <HAL_TIM_PWM_Stop_DMA>
	}

}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40000400 	.word	0x40000400
 8002718:	200003d8 	.word	0x200003d8

0800271c <HAL_TIM_PeriodElapsedCallback>:

//Callback -> Timer finish
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800271c:	b5b0      	push	{r4, r5, r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a0d      	ldr	r2, [pc, #52]	@ (800275c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d103      	bne.n	8002734 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		registerFrame[0x00].U16 = 22881; //send "Ya"
 800272c:	4b0c      	ldr	r3, [pc, #48]	@ (8002760 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800272e:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002732:	801a      	strh	r2, [r3, #0]
	}
	if(htim == &htim4)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a0b      	ldr	r2, [pc, #44]	@ (8002764 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d10a      	bne.n	8002752 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		i+=1;
 800273c:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002742:	1c54      	adds	r4, r2, #1
 8002744:	f143 0500 	adc.w	r5, r3, #0
 8002748:	4b07      	ldr	r3, [pc, #28]	@ (8002768 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800274a:	e9c3 4500 	strd	r4, r5, [r3]
		generate_Velocity();
 800274e:	f7ff fe1b 	bl	8002388 <generate_Velocity>

	}

}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bdb0      	pop	{r4, r5, r7, pc}
 800275a:	bf00      	nop
 800275c:	20000570 	.word	0x20000570
 8002760:	20000f10 	.word	0x20000f10
 8002764:	200004a4 	.word	0x200004a4
 8002768:	20001100 	.word	0x20001100

0800276c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002770:	b672      	cpsid	i
}
 8002772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002774:	bf00      	nop
 8002776:	e7fd      	b.n	8002774 <Error_Handler+0x8>

08002778 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277e:	4b0f      	ldr	r3, [pc, #60]	@ (80027bc <HAL_MspInit+0x44>)
 8002780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002782:	4a0e      	ldr	r2, [pc, #56]	@ (80027bc <HAL_MspInit+0x44>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6613      	str	r3, [r2, #96]	@ 0x60
 800278a:	4b0c      	ldr	r3, [pc, #48]	@ (80027bc <HAL_MspInit+0x44>)
 800278c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	607b      	str	r3, [r7, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002796:	4b09      	ldr	r3, [pc, #36]	@ (80027bc <HAL_MspInit+0x44>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279a:	4a08      	ldr	r2, [pc, #32]	@ (80027bc <HAL_MspInit+0x44>)
 800279c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80027a2:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <HAL_MspInit+0x44>)
 80027a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80027ae:	f001 fa8b 	bl	8003cc8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000

080027c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08e      	sub	sp, #56	@ 0x38
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a61      	ldr	r2, [pc, #388]	@ (8002964 <HAL_TIM_Base_MspInit+0x1a4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d131      	bne.n	8002846 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027e2:	4b61      	ldr	r3, [pc, #388]	@ (8002968 <HAL_TIM_Base_MspInit+0x1a8>)
 80027e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e6:	4a60      	ldr	r2, [pc, #384]	@ (8002968 <HAL_TIM_Base_MspInit+0x1a8>)
 80027e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80027ee:	4b5e      	ldr	r3, [pc, #376]	@ (8002968 <HAL_TIM_Base_MspInit+0x1a8>)
 80027f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027f6:	623b      	str	r3, [r7, #32]
 80027f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002968 <HAL_TIM_Base_MspInit+0x1a8>)
 80027fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027fe:	4a5a      	ldr	r2, [pc, #360]	@ (8002968 <HAL_TIM_Base_MspInit+0x1a8>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002806:	4b58      	ldr	r3, [pc, #352]	@ (8002968 <HAL_TIM_Base_MspInit+0x1a8>)
 8002808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	61fb      	str	r3, [r7, #28]
 8002810:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002812:	2340      	movs	r3, #64	@ 0x40
 8002814:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002816:	2312      	movs	r3, #18
 8002818:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800281a:	2301      	movs	r3, #1
 800281c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002822:	2306      	movs	r3, #6
 8002824:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800282a:	4619      	mov	r1, r3
 800282c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002830:	f000 fff4 	bl	800381c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002834:	2200      	movs	r2, #0
 8002836:	2100      	movs	r1, #0
 8002838:	2019      	movs	r0, #25
 800283a:	f000 fc88 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800283e:	2019      	movs	r0, #25
 8002840:	f000 fc9f 	bl	8003182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002844:	e089      	b.n	800295a <HAL_TIM_Base_MspInit+0x19a>
  else if(htim_base->Instance==TIM3)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a48      	ldr	r2, [pc, #288]	@ (800296c <HAL_TIM_Base_MspInit+0x1ac>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d137      	bne.n	80028c0 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002850:	4b45      	ldr	r3, [pc, #276]	@ (8002968 <HAL_TIM_Base_MspInit+0x1a8>)
 8002852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002854:	4a44      	ldr	r2, [pc, #272]	@ (8002968 <HAL_TIM_Base_MspInit+0x1a8>)
 8002856:	f043 0302 	orr.w	r3, r3, #2
 800285a:	6593      	str	r3, [r2, #88]	@ 0x58
 800285c:	4b42      	ldr	r3, [pc, #264]	@ (8002968 <HAL_TIM_Base_MspInit+0x1a8>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch2.Instance = DMA1_Channel3;
 8002868:	4b41      	ldr	r3, [pc, #260]	@ (8002970 <HAL_TIM_Base_MspInit+0x1b0>)
 800286a:	4a42      	ldr	r2, [pc, #264]	@ (8002974 <HAL_TIM_Base_MspInit+0x1b4>)
 800286c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800286e:	4b40      	ldr	r3, [pc, #256]	@ (8002970 <HAL_TIM_Base_MspInit+0x1b0>)
 8002870:	223e      	movs	r2, #62	@ 0x3e
 8002872:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002874:	4b3e      	ldr	r3, [pc, #248]	@ (8002970 <HAL_TIM_Base_MspInit+0x1b0>)
 8002876:	2210      	movs	r2, #16
 8002878:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800287a:	4b3d      	ldr	r3, [pc, #244]	@ (8002970 <HAL_TIM_Base_MspInit+0x1b0>)
 800287c:	2200      	movs	r2, #0
 800287e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002880:	4b3b      	ldr	r3, [pc, #236]	@ (8002970 <HAL_TIM_Base_MspInit+0x1b0>)
 8002882:	2280      	movs	r2, #128	@ 0x80
 8002884:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002886:	4b3a      	ldr	r3, [pc, #232]	@ (8002970 <HAL_TIM_Base_MspInit+0x1b0>)
 8002888:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800288c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800288e:	4b38      	ldr	r3, [pc, #224]	@ (8002970 <HAL_TIM_Base_MspInit+0x1b0>)
 8002890:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002894:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8002896:	4b36      	ldr	r3, [pc, #216]	@ (8002970 <HAL_TIM_Base_MspInit+0x1b0>)
 8002898:	2200      	movs	r2, #0
 800289a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800289c:	4b34      	ldr	r3, [pc, #208]	@ (8002970 <HAL_TIM_Base_MspInit+0x1b0>)
 800289e:	2200      	movs	r2, #0
 80028a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80028a2:	4833      	ldr	r0, [pc, #204]	@ (8002970 <HAL_TIM_Base_MspInit+0x1b0>)
 80028a4:	f000 fc88 	bl	80031b8 <HAL_DMA_Init>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_TIM_Base_MspInit+0xf2>
      Error_Handler();
 80028ae:	f7ff ff5d 	bl	800276c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002970 <HAL_TIM_Base_MspInit+0x1b0>)
 80028b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80028b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002970 <HAL_TIM_Base_MspInit+0x1b0>)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80028be:	e04c      	b.n	800295a <HAL_TIM_Base_MspInit+0x19a>
  else if(htim_base->Instance==TIM4)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002978 <HAL_TIM_Base_MspInit+0x1b8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d114      	bne.n	80028f4 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028ca:	4b27      	ldr	r3, [pc, #156]	@ (8002968 <HAL_TIM_Base_MspInit+0x1a8>)
 80028cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ce:	4a26      	ldr	r2, [pc, #152]	@ (8002968 <HAL_TIM_Base_MspInit+0x1a8>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80028d6:	4b24      	ldr	r3, [pc, #144]	@ (8002968 <HAL_TIM_Base_MspInit+0x1a8>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028e2:	2200      	movs	r2, #0
 80028e4:	2100      	movs	r1, #0
 80028e6:	201e      	movs	r0, #30
 80028e8:	f000 fc31 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028ec:	201e      	movs	r0, #30
 80028ee:	f000 fc48 	bl	8003182 <HAL_NVIC_EnableIRQ>
}
 80028f2:	e032      	b.n	800295a <HAL_TIM_Base_MspInit+0x19a>
  else if(htim_base->Instance==TIM5)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a20      	ldr	r2, [pc, #128]	@ (800297c <HAL_TIM_Base_MspInit+0x1bc>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d114      	bne.n	8002928 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002968 <HAL_TIM_Base_MspInit+0x1a8>)
 8002900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002902:	4a19      	ldr	r2, [pc, #100]	@ (8002968 <HAL_TIM_Base_MspInit+0x1a8>)
 8002904:	f043 0308 	orr.w	r3, r3, #8
 8002908:	6593      	str	r3, [r2, #88]	@ 0x58
 800290a:	4b17      	ldr	r3, [pc, #92]	@ (8002968 <HAL_TIM_Base_MspInit+0x1a8>)
 800290c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2100      	movs	r1, #0
 800291a:	2032      	movs	r0, #50	@ 0x32
 800291c:	f000 fc17 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002920:	2032      	movs	r0, #50	@ 0x32
 8002922:	f000 fc2e 	bl	8003182 <HAL_NVIC_EnableIRQ>
}
 8002926:	e018      	b.n	800295a <HAL_TIM_Base_MspInit+0x19a>
  else if(htim_base->Instance==TIM16)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a14      	ldr	r2, [pc, #80]	@ (8002980 <HAL_TIM_Base_MspInit+0x1c0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d113      	bne.n	800295a <HAL_TIM_Base_MspInit+0x19a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002932:	4b0d      	ldr	r3, [pc, #52]	@ (8002968 <HAL_TIM_Base_MspInit+0x1a8>)
 8002934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002936:	4a0c      	ldr	r2, [pc, #48]	@ (8002968 <HAL_TIM_Base_MspInit+0x1a8>)
 8002938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800293c:	6613      	str	r3, [r2, #96]	@ 0x60
 800293e:	4b0a      	ldr	r3, [pc, #40]	@ (8002968 <HAL_TIM_Base_MspInit+0x1a8>)
 8002940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	2100      	movs	r1, #0
 800294e:	2019      	movs	r0, #25
 8002950:	f000 fbfd 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002954:	2019      	movs	r0, #25
 8002956:	f000 fc14 	bl	8003182 <HAL_NVIC_EnableIRQ>
}
 800295a:	bf00      	nop
 800295c:	3738      	adds	r7, #56	@ 0x38
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40012c00 	.word	0x40012c00
 8002968:	40021000 	.word	0x40021000
 800296c:	40000400 	.word	0x40000400
 8002970:	20000708 	.word	0x20000708
 8002974:	40020030 	.word	0x40020030
 8002978:	40000800 	.word	0x40000800
 800297c:	40000c00 	.word	0x40000c00
 8002980:	40014400 	.word	0x40014400

08002984 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	@ 0x28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a4:	d128      	bne.n	80029f8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029a6:	4b16      	ldr	r3, [pc, #88]	@ (8002a00 <HAL_TIM_Encoder_MspInit+0x7c>)
 80029a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029aa:	4a15      	ldr	r2, [pc, #84]	@ (8002a00 <HAL_TIM_Encoder_MspInit+0x7c>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029b2:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <HAL_TIM_Encoder_MspInit+0x7c>)
 80029b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	4b10      	ldr	r3, [pc, #64]	@ (8002a00 <HAL_TIM_Encoder_MspInit+0x7c>)
 80029c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002a00 <HAL_TIM_Encoder_MspInit+0x7c>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002a00 <HAL_TIM_Encoder_MspInit+0x7c>)
 80029cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80029d6:	2322      	movs	r3, #34	@ 0x22
 80029d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	2300      	movs	r3, #0
 80029e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029e6:	2301      	movs	r3, #1
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ea:	f107 0314 	add.w	r3, r7, #20
 80029ee:	4619      	mov	r1, r3
 80029f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029f4:	f000 ff12 	bl	800381c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029f8:	bf00      	nop
 80029fa:	3728      	adds	r7, #40	@ 0x28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40021000 	.word	0x40021000

08002a04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	@ 0x28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a23      	ldr	r2, [pc, #140]	@ (8002ab0 <HAL_TIM_MspPostInit+0xac>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d11e      	bne.n	8002a64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a26:	4b23      	ldr	r3, [pc, #140]	@ (8002ab4 <HAL_TIM_MspPostInit+0xb0>)
 8002a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2a:	4a22      	ldr	r2, [pc, #136]	@ (8002ab4 <HAL_TIM_MspPostInit+0xb0>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a32:	4b20      	ldr	r3, [pc, #128]	@ (8002ab4 <HAL_TIM_MspPostInit+0xb0>)
 8002a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002a50:	2306      	movs	r3, #6
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a5e:	f000 fedd 	bl	800381c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a62:	e021      	b.n	8002aa8 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a13      	ldr	r2, [pc, #76]	@ (8002ab8 <HAL_TIM_MspPostInit+0xb4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d11c      	bne.n	8002aa8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6e:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <HAL_TIM_MspPostInit+0xb0>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a72:	4a10      	ldr	r2, [pc, #64]	@ (8002ab4 <HAL_TIM_MspPostInit+0xb0>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <HAL_TIM_MspPostInit+0xb0>)
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a86:	2310      	movs	r3, #16
 8002a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a96:	2302      	movs	r3, #2
 8002a98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9a:	f107 0314 	add.w	r3, r7, #20
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aa4:	f000 feba 	bl	800381c <HAL_GPIO_Init>
}
 8002aa8:	bf00      	nop
 8002aaa:	3728      	adds	r7, #40	@ 0x28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40012c00 	.word	0x40012c00
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40000400 	.word	0x40000400

08002abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b0a0      	sub	sp, #128	@ 0x80
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ad4:	f107 0318 	add.w	r3, r7, #24
 8002ad8:	2254      	movs	r2, #84	@ 0x54
 8002ada:	2100      	movs	r1, #0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f006 fae1 	bl	80090a4 <memset>
  if(huart->Instance==USART1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a80      	ldr	r2, [pc, #512]	@ (8002ce8 <HAL_UART_MspInit+0x22c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d161      	bne.n	8002bb0 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002aec:	2301      	movs	r3, #1
 8002aee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002af4:	f107 0318 	add.w	r3, r7, #24
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 fe23 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b04:	f7ff fe32 	bl	800276c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b08:	4b78      	ldr	r3, [pc, #480]	@ (8002cec <HAL_UART_MspInit+0x230>)
 8002b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b0c:	4a77      	ldr	r2, [pc, #476]	@ (8002cec <HAL_UART_MspInit+0x230>)
 8002b0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b12:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b14:	4b75      	ldr	r3, [pc, #468]	@ (8002cec <HAL_UART_MspInit+0x230>)
 8002b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b20:	4b72      	ldr	r3, [pc, #456]	@ (8002cec <HAL_UART_MspInit+0x230>)
 8002b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b24:	4a71      	ldr	r2, [pc, #452]	@ (8002cec <HAL_UART_MspInit+0x230>)
 8002b26:	f043 0304 	orr.w	r3, r3, #4
 8002b2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b2c:	4b6f      	ldr	r3, [pc, #444]	@ (8002cec <HAL_UART_MspInit+0x230>)
 8002b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b38:	2330      	movs	r3, #48	@ 0x30
 8002b3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b44:	2300      	movs	r3, #0
 8002b46:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b48:	2307      	movs	r3, #7
 8002b4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b4c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002b50:	4619      	mov	r1, r3
 8002b52:	4867      	ldr	r0, [pc, #412]	@ (8002cf0 <HAL_UART_MspInit+0x234>)
 8002b54:	f000 fe62 	bl	800381c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel2;
 8002b58:	4b66      	ldr	r3, [pc, #408]	@ (8002cf4 <HAL_UART_MspInit+0x238>)
 8002b5a:	4a67      	ldr	r2, [pc, #412]	@ (8002cf8 <HAL_UART_MspInit+0x23c>)
 8002b5c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002b5e:	4b65      	ldr	r3, [pc, #404]	@ (8002cf4 <HAL_UART_MspInit+0x238>)
 8002b60:	2218      	movs	r2, #24
 8002b62:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b64:	4b63      	ldr	r3, [pc, #396]	@ (8002cf4 <HAL_UART_MspInit+0x238>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b6a:	4b62      	ldr	r3, [pc, #392]	@ (8002cf4 <HAL_UART_MspInit+0x238>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b70:	4b60      	ldr	r3, [pc, #384]	@ (8002cf4 <HAL_UART_MspInit+0x238>)
 8002b72:	2280      	movs	r2, #128	@ 0x80
 8002b74:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b76:	4b5f      	ldr	r3, [pc, #380]	@ (8002cf4 <HAL_UART_MspInit+0x238>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b7c:	4b5d      	ldr	r3, [pc, #372]	@ (8002cf4 <HAL_UART_MspInit+0x238>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002b82:	4b5c      	ldr	r3, [pc, #368]	@ (8002cf4 <HAL_UART_MspInit+0x238>)
 8002b84:	2220      	movs	r2, #32
 8002b86:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002b88:	4b5a      	ldr	r3, [pc, #360]	@ (8002cf4 <HAL_UART_MspInit+0x238>)
 8002b8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002b90:	4858      	ldr	r0, [pc, #352]	@ (8002cf4 <HAL_UART_MspInit+0x238>)
 8002b92:	f000 fb11 	bl	80031b8 <HAL_DMA_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8002b9c:	f7ff fde6 	bl	800276c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a54      	ldr	r2, [pc, #336]	@ (8002cf4 <HAL_UART_MspInit+0x238>)
 8002ba4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002ba8:	4a52      	ldr	r2, [pc, #328]	@ (8002cf4 <HAL_UART_MspInit+0x238>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bae:	e097      	b.n	8002ce0 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a51      	ldr	r2, [pc, #324]	@ (8002cfc <HAL_UART_MspInit+0x240>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	f040 8092 	bne.w	8002ce0 <HAL_UART_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bc4:	f107 0318 	add.w	r3, r7, #24
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f001 fdbb 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8002bd4:	f7ff fdca 	bl	800276c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bd8:	4b44      	ldr	r3, [pc, #272]	@ (8002cec <HAL_UART_MspInit+0x230>)
 8002bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bdc:	4a43      	ldr	r2, [pc, #268]	@ (8002cec <HAL_UART_MspInit+0x230>)
 8002bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002be4:	4b41      	ldr	r3, [pc, #260]	@ (8002cec <HAL_UART_MspInit+0x230>)
 8002be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf0:	4b3e      	ldr	r3, [pc, #248]	@ (8002cec <HAL_UART_MspInit+0x230>)
 8002bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf4:	4a3d      	ldr	r2, [pc, #244]	@ (8002cec <HAL_UART_MspInit+0x230>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8002cec <HAL_UART_MspInit+0x230>)
 8002bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c08:	230c      	movs	r3, #12
 8002c0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c14:	2300      	movs	r3, #0
 8002c16:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c18:	2307      	movs	r3, #7
 8002c1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002c20:	4619      	mov	r1, r3
 8002c22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c26:	f000 fdf9 	bl	800381c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8002c2a:	4b35      	ldr	r3, [pc, #212]	@ (8002d00 <HAL_UART_MspInit+0x244>)
 8002c2c:	4a35      	ldr	r2, [pc, #212]	@ (8002d04 <HAL_UART_MspInit+0x248>)
 8002c2e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002c30:	4b33      	ldr	r3, [pc, #204]	@ (8002d00 <HAL_UART_MspInit+0x244>)
 8002c32:	221a      	movs	r2, #26
 8002c34:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c36:	4b32      	ldr	r3, [pc, #200]	@ (8002d00 <HAL_UART_MspInit+0x244>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c3c:	4b30      	ldr	r3, [pc, #192]	@ (8002d00 <HAL_UART_MspInit+0x244>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c42:	4b2f      	ldr	r3, [pc, #188]	@ (8002d00 <HAL_UART_MspInit+0x244>)
 8002c44:	2280      	movs	r2, #128	@ 0x80
 8002c46:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c48:	4b2d      	ldr	r3, [pc, #180]	@ (8002d00 <HAL_UART_MspInit+0x244>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002d00 <HAL_UART_MspInit+0x244>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002c54:	4b2a      	ldr	r3, [pc, #168]	@ (8002d00 <HAL_UART_MspInit+0x244>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c5a:	4b29      	ldr	r3, [pc, #164]	@ (8002d00 <HAL_UART_MspInit+0x244>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002c60:	4827      	ldr	r0, [pc, #156]	@ (8002d00 <HAL_UART_MspInit+0x244>)
 8002c62:	f000 faa9 	bl	80031b8 <HAL_DMA_Init>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 8002c6c:	f7ff fd7e 	bl	800276c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a23      	ldr	r2, [pc, #140]	@ (8002d00 <HAL_UART_MspInit+0x244>)
 8002c74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002c78:	4a21      	ldr	r2, [pc, #132]	@ (8002d00 <HAL_UART_MspInit+0x244>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8002c7e:	4b22      	ldr	r3, [pc, #136]	@ (8002d08 <HAL_UART_MspInit+0x24c>)
 8002c80:	4a22      	ldr	r2, [pc, #136]	@ (8002d0c <HAL_UART_MspInit+0x250>)
 8002c82:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002c84:	4b20      	ldr	r3, [pc, #128]	@ (8002d08 <HAL_UART_MspInit+0x24c>)
 8002c86:	221b      	movs	r2, #27
 8002c88:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8002d08 <HAL_UART_MspInit+0x24c>)
 8002c8c:	2210      	movs	r2, #16
 8002c8e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c90:	4b1d      	ldr	r3, [pc, #116]	@ (8002d08 <HAL_UART_MspInit+0x24c>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c96:	4b1c      	ldr	r3, [pc, #112]	@ (8002d08 <HAL_UART_MspInit+0x24c>)
 8002c98:	2280      	movs	r2, #128	@ 0x80
 8002c9a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d08 <HAL_UART_MspInit+0x24c>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ca2:	4b19      	ldr	r3, [pc, #100]	@ (8002d08 <HAL_UART_MspInit+0x24c>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002ca8:	4b17      	ldr	r3, [pc, #92]	@ (8002d08 <HAL_UART_MspInit+0x24c>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cae:	4b16      	ldr	r3, [pc, #88]	@ (8002d08 <HAL_UART_MspInit+0x24c>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002cb4:	4814      	ldr	r0, [pc, #80]	@ (8002d08 <HAL_UART_MspInit+0x24c>)
 8002cb6:	f000 fa7f 	bl	80031b8 <HAL_DMA_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8002cc0:	f7ff fd54 	bl	800276c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a10      	ldr	r2, [pc, #64]	@ (8002d08 <HAL_UART_MspInit+0x24c>)
 8002cc8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002cca:	4a0f      	ldr	r2, [pc, #60]	@ (8002d08 <HAL_UART_MspInit+0x24c>)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	2026      	movs	r0, #38	@ 0x26
 8002cd6:	f000 fa3a 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cda:	2026      	movs	r0, #38	@ 0x26
 8002cdc:	f000 fa51 	bl	8003182 <HAL_NVIC_EnableIRQ>
}
 8002ce0:	bf00      	nop
 8002ce2:	3780      	adds	r7, #128	@ 0x80
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40013800 	.word	0x40013800
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	48000800 	.word	0x48000800
 8002cf4:	20000900 	.word	0x20000900
 8002cf8:	4002041c 	.word	0x4002041c
 8002cfc:	40004400 	.word	0x40004400
 8002d00:	20000960 	.word	0x20000960
 8002d04:	4002001c 	.word	0x4002001c
 8002d08:	200009c0 	.word	0x200009c0
 8002d0c:	40020008 	.word	0x40020008

08002d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d14:	bf00      	nop
 8002d16:	e7fd      	b.n	8002d14 <NMI_Handler+0x4>

08002d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d1c:	bf00      	nop
 8002d1e:	e7fd      	b.n	8002d1c <HardFault_Handler+0x4>

08002d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <MemManage_Handler+0x4>

08002d28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <BusFault_Handler+0x4>

08002d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d34:	bf00      	nop
 8002d36:	e7fd      	b.n	8002d34 <UsageFault_Handler+0x4>

08002d38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d66:	f000 f8f9 	bl	8002f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002d74:	4802      	ldr	r0, [pc, #8]	@ (8002d80 <DMA1_Channel1_IRQHandler+0x10>)
 8002d76:	f000 fc02 	bl	800357e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	200009c0 	.word	0x200009c0

08002d84 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002d88:	4802      	ldr	r0, [pc, #8]	@ (8002d94 <DMA1_Channel2_IRQHandler+0x10>)
 8002d8a:	f000 fbf8 	bl	800357e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000960 	.word	0x20000960

08002d98 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8002d9c:	4802      	ldr	r0, [pc, #8]	@ (8002da8 <DMA1_Channel3_IRQHandler+0x10>)
 8002d9e:	f000 fbee 	bl	800357e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000708 	.word	0x20000708

08002dac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002db0:	2020      	movs	r0, #32
 8002db2:	f000 fecd 	bl	8003b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002dc0:	4803      	ldr	r0, [pc, #12]	@ (8002dd0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002dc2:	f002 fd3f 	bl	8005844 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002dc6:	4803      	ldr	r0, [pc, #12]	@ (8002dd4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002dc8:	f002 fd3c 	bl	8005844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000240 	.word	0x20000240
 8002dd4:	2000063c 	.word	0x2000063c

08002dd8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ddc:	4802      	ldr	r0, [pc, #8]	@ (8002de8 <TIM4_IRQHandler+0x10>)
 8002dde:	f002 fd31 	bl	8005844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200004a4 	.word	0x200004a4

08002dec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002df0:	4802      	ldr	r0, [pc, #8]	@ (8002dfc <USART2_IRQHandler+0x10>)
 8002df2:	f004 fc13 	bl	800761c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000834 	.word	0x20000834

08002e00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002e04:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002e08:	f000 fea2 	bl	8003b50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002e0c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002e10:	f000 fe9e 	bl	8003b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e1c:	4802      	ldr	r0, [pc, #8]	@ (8002e28 <TIM5_IRQHandler+0x10>)
 8002e1e:	f002 fd11 	bl	8005844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000570 	.word	0x20000570

08002e2c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002e30:	4802      	ldr	r0, [pc, #8]	@ (8002e3c <DMA2_Channel2_IRQHandler+0x10>)
 8002e32:	f000 fba4 	bl	800357e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000900 	.word	0x20000900

08002e40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e44:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <SystemInit+0x20>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4a:	4a05      	ldr	r2, [pc, #20]	@ (8002e60 <SystemInit+0x20>)
 8002e4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e64:	480d      	ldr	r0, [pc, #52]	@ (8002e9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e68:	f7ff ffea 	bl	8002e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e6c:	480c      	ldr	r0, [pc, #48]	@ (8002ea0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e6e:	490d      	ldr	r1, [pc, #52]	@ (8002ea4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea8 <LoopForever+0xe>)
  movs r3, #0
 8002e72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002e74:	e002      	b.n	8002e7c <LoopCopyDataInit>

08002e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e7a:	3304      	adds	r3, #4

08002e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e80:	d3f9      	bcc.n	8002e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e82:	4a0a      	ldr	r2, [pc, #40]	@ (8002eac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e84:	4c0a      	ldr	r4, [pc, #40]	@ (8002eb0 <LoopForever+0x16>)
  movs r3, #0
 8002e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e88:	e001      	b.n	8002e8e <LoopFillZerobss>

08002e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e8c:	3204      	adds	r2, #4

08002e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e90:	d3fb      	bcc.n	8002e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e92:	f006 f90f 	bl	80090b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e96:	f7fe fb13 	bl	80014c0 <main>

08002e9a <LoopForever>:

LoopForever:
    b LoopForever
 8002e9a:	e7fe      	b.n	8002e9a <LoopForever>
  ldr   r0, =_estack
 8002e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ea4:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8002ea8:	08009180 	.word	0x08009180
  ldr r2, =_sbss
 8002eac:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8002eb0:	2000114c 	.word	0x2000114c

08002eb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002eb4:	e7fe      	b.n	8002eb4 <ADC1_2_IRQHandler>

08002eb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec0:	2003      	movs	r0, #3
 8002ec2:	f000 f939 	bl	8003138 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	f000 f80e 	bl	8002ee8 <HAL_InitTick>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	71fb      	strb	r3, [r7, #7]
 8002ed6:	e001      	b.n	8002edc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ed8:	f7ff fc4e 	bl	8002778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002edc:	79fb      	ldrb	r3, [r7, #7]

}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002ef4:	4b16      	ldr	r3, [pc, #88]	@ (8002f50 <HAL_InitTick+0x68>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d022      	beq.n	8002f42 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002efc:	4b15      	ldr	r3, [pc, #84]	@ (8002f54 <HAL_InitTick+0x6c>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b13      	ldr	r3, [pc, #76]	@ (8002f50 <HAL_InitTick+0x68>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002f08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 f944 	bl	800319e <HAL_SYSTICK_Config>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10f      	bne.n	8002f3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b0f      	cmp	r3, #15
 8002f20:	d809      	bhi.n	8002f36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f22:	2200      	movs	r2, #0
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2a:	f000 f910 	bl	800314e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f58 <HAL_InitTick+0x70>)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	e007      	b.n	8002f46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
 8002f3a:	e004      	b.n	8002f46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
 8002f40:	e001      	b.n	8002f46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	2000021c 	.word	0x2000021c
 8002f54:	20000214 	.word	0x20000214
 8002f58:	20000218 	.word	0x20000218

08002f5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f60:	4b05      	ldr	r3, [pc, #20]	@ (8002f78 <HAL_IncTick+0x1c>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <HAL_IncTick+0x20>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4413      	add	r3, r2
 8002f6a:	4a03      	ldr	r2, [pc, #12]	@ (8002f78 <HAL_IncTick+0x1c>)
 8002f6c:	6013      	str	r3, [r2, #0]
}
 8002f6e:	bf00      	nop
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	20001148 	.word	0x20001148
 8002f7c:	2000021c 	.word	0x2000021c

08002f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return uwTick;
 8002f84:	4b03      	ldr	r3, [pc, #12]	@ (8002f94 <HAL_GetTick+0x14>)
 8002f86:	681b      	ldr	r3, [r3, #0]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20001148 	.word	0x20001148

08002f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002fdc <__NVIC_SetPriorityGrouping+0x44>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fca:	4a04      	ldr	r2, [pc, #16]	@ (8002fdc <__NVIC_SetPriorityGrouping+0x44>)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	60d3      	str	r3, [r2, #12]
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fe4:	4b04      	ldr	r3, [pc, #16]	@ (8002ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	0a1b      	lsrs	r3, r3, #8
 8002fea:	f003 0307 	and.w	r3, r3, #7
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	2b00      	cmp	r3, #0
 800300c:	db0b      	blt.n	8003026 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	f003 021f 	and.w	r2, r3, #31
 8003014:	4907      	ldr	r1, [pc, #28]	@ (8003034 <__NVIC_EnableIRQ+0x38>)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	2001      	movs	r0, #1
 800301e:	fa00 f202 	lsl.w	r2, r0, r2
 8003022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	e000e100 	.word	0xe000e100

08003038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	6039      	str	r1, [r7, #0]
 8003042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003048:	2b00      	cmp	r3, #0
 800304a:	db0a      	blt.n	8003062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	b2da      	uxtb	r2, r3
 8003050:	490c      	ldr	r1, [pc, #48]	@ (8003084 <__NVIC_SetPriority+0x4c>)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	0112      	lsls	r2, r2, #4
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	440b      	add	r3, r1
 800305c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003060:	e00a      	b.n	8003078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	b2da      	uxtb	r2, r3
 8003066:	4908      	ldr	r1, [pc, #32]	@ (8003088 <__NVIC_SetPriority+0x50>)
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	3b04      	subs	r3, #4
 8003070:	0112      	lsls	r2, r2, #4
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	440b      	add	r3, r1
 8003076:	761a      	strb	r2, [r3, #24]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	e000e100 	.word	0xe000e100
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800308c:	b480      	push	{r7}
 800308e:	b089      	sub	sp, #36	@ 0x24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f1c3 0307 	rsb	r3, r3, #7
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	bf28      	it	cs
 80030aa:	2304      	movcs	r3, #4
 80030ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3304      	adds	r3, #4
 80030b2:	2b06      	cmp	r3, #6
 80030b4:	d902      	bls.n	80030bc <NVIC_EncodePriority+0x30>
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3b03      	subs	r3, #3
 80030ba:	e000      	b.n	80030be <NVIC_EncodePriority+0x32>
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	f04f 32ff 	mov.w	r2, #4294967295
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43da      	mvns	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	401a      	ands	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d4:	f04f 31ff 	mov.w	r1, #4294967295
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	fa01 f303 	lsl.w	r3, r1, r3
 80030de:	43d9      	mvns	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e4:	4313      	orrs	r3, r2
         );
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3724      	adds	r7, #36	@ 0x24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003104:	d301      	bcc.n	800310a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003106:	2301      	movs	r3, #1
 8003108:	e00f      	b.n	800312a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800310a:	4a0a      	ldr	r2, [pc, #40]	@ (8003134 <SysTick_Config+0x40>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3b01      	subs	r3, #1
 8003110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003112:	210f      	movs	r1, #15
 8003114:	f04f 30ff 	mov.w	r0, #4294967295
 8003118:	f7ff ff8e 	bl	8003038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800311c:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <SysTick_Config+0x40>)
 800311e:	2200      	movs	r2, #0
 8003120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003122:	4b04      	ldr	r3, [pc, #16]	@ (8003134 <SysTick_Config+0x40>)
 8003124:	2207      	movs	r2, #7
 8003126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	e000e010 	.word	0xe000e010

08003138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ff29 	bl	8002f98 <__NVIC_SetPriorityGrouping>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b086      	sub	sp, #24
 8003152:	af00      	add	r7, sp, #0
 8003154:	4603      	mov	r3, r0
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800315c:	f7ff ff40 	bl	8002fe0 <__NVIC_GetPriorityGrouping>
 8003160:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	6978      	ldr	r0, [r7, #20]
 8003168:	f7ff ff90 	bl	800308c <NVIC_EncodePriority>
 800316c:	4602      	mov	r2, r0
 800316e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff5f 	bl	8003038 <__NVIC_SetPriority>
}
 800317a:	bf00      	nop
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	4603      	mov	r3, r0
 800318a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800318c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ff33 	bl	8002ffc <__NVIC_EnableIRQ>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ffa4 	bl	80030f4 <SysTick_Config>
 80031ac:	4603      	mov	r3, r0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e08d      	b.n	80032e6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	4b47      	ldr	r3, [pc, #284]	@ (80032f0 <HAL_DMA_Init+0x138>)
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d80f      	bhi.n	80031f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	4b45      	ldr	r3, [pc, #276]	@ (80032f4 <HAL_DMA_Init+0x13c>)
 80031de:	4413      	add	r3, r2
 80031e0:	4a45      	ldr	r2, [pc, #276]	@ (80032f8 <HAL_DMA_Init+0x140>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	091b      	lsrs	r3, r3, #4
 80031e8:	009a      	lsls	r2, r3, #2
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a42      	ldr	r2, [pc, #264]	@ (80032fc <HAL_DMA_Init+0x144>)
 80031f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80031f4:	e00e      	b.n	8003214 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	4b40      	ldr	r3, [pc, #256]	@ (8003300 <HAL_DMA_Init+0x148>)
 80031fe:	4413      	add	r3, r2
 8003200:	4a3d      	ldr	r2, [pc, #244]	@ (80032f8 <HAL_DMA_Init+0x140>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	009a      	lsls	r2, r3, #2
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a3c      	ldr	r2, [pc, #240]	@ (8003304 <HAL_DMA_Init+0x14c>)
 8003212:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800322a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800322e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003238:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003244:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003250:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 fa76 	bl	8003758 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003274:	d102      	bne.n	800327c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003290:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d010      	beq.n	80032bc <HAL_DMA_Init+0x104>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d80c      	bhi.n	80032bc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fa96 	bl	80037d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	e008      	b.n	80032ce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40020407 	.word	0x40020407
 80032f4:	bffdfff8 	.word	0xbffdfff8
 80032f8:	cccccccd 	.word	0xcccccccd
 80032fc:	40020000 	.word	0x40020000
 8003300:	bffdfbf8 	.word	0xbffdfbf8
 8003304:	40020400 	.word	0x40020400

08003308 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_DMA_Start_IT+0x20>
 8003324:	2302      	movs	r3, #2
 8003326:	e066      	b.n	80033f6 <HAL_DMA_Start_IT+0xee>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d155      	bne.n	80033e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0201 	bic.w	r2, r2, #1
 8003358:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f9bb 	bl	80036dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 020e 	orr.w	r2, r2, #14
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	e00f      	b.n	80033a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0204 	bic.w	r2, r2, #4
 800338e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 020a 	orr.w	r2, r2, #10
 800339e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d007      	beq.n	80033be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d007      	beq.n	80033d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0201 	orr.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	e005      	b.n	80033f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80033f0:	2302      	movs	r3, #2
 80033f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80033f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033fe:	b480      	push	{r7}
 8003400:	b085      	sub	sp, #20
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d005      	beq.n	8003422 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2204      	movs	r2, #4
 800341a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
 8003420:	e037      	b.n	8003492 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 020e 	bic.w	r2, r2, #14
 8003430:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800343c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003440:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0201 	bic.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003456:	f003 021f 	and.w	r2, r3, #31
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	2101      	movs	r1, #1
 8003460:	fa01 f202 	lsl.w	r2, r1, r2
 8003464:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800346e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00c      	beq.n	8003492 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003482:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003486:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003490:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d00d      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2204      	movs	r2, #4
 80034cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	e047      	b.n	8003574 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 020e 	bic.w	r2, r2, #14
 80034f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800350e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003512:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003518:	f003 021f 	and.w	r2, r3, #31
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	2101      	movs	r1, #1
 8003522:	fa01 f202 	lsl.w	r2, r1, r2
 8003526:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003530:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00c      	beq.n	8003554 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003544:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003548:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003552:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
    }
  }
  return status;
 8003574:	7bfb      	ldrb	r3, [r7, #15]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	2204      	movs	r2, #4
 80035a0:	409a      	lsls	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d026      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x7a>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d021      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d107      	bne.n	80035d2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0204 	bic.w	r2, r2, #4
 80035d0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d6:	f003 021f 	and.w	r2, r3, #31
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	2104      	movs	r1, #4
 80035e0:	fa01 f202 	lsl.w	r2, r1, r2
 80035e4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d071      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80035f6:	e06c      	b.n	80036d2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fc:	f003 031f 	and.w	r3, r3, #31
 8003600:	2202      	movs	r2, #2
 8003602:	409a      	lsls	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d02e      	beq.n	800366a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d029      	beq.n	800366a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10b      	bne.n	800363c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 020a 	bic.w	r2, r2, #10
 8003632:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003640:	f003 021f 	and.w	r2, r3, #31
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	2102      	movs	r1, #2
 800364a:	fa01 f202 	lsl.w	r2, r1, r2
 800364e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365c:	2b00      	cmp	r3, #0
 800365e:	d038      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003668:	e033      	b.n	80036d2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	2208      	movs	r2, #8
 8003674:	409a      	lsls	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4013      	ands	r3, r2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d02a      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d025      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 020e 	bic.w	r2, r2, #14
 8003696:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369c:	f003 021f 	and.w	r2, r3, #31
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a4:	2101      	movs	r1, #1
 80036a6:	fa01 f202 	lsl.w	r2, r1, r2
 80036aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036d2:	bf00      	nop
 80036d4:	bf00      	nop
}
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d004      	beq.n	8003706 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003704:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370a:	f003 021f 	and.w	r2, r3, #31
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	2101      	movs	r1, #1
 8003714:	fa01 f202 	lsl.w	r2, r1, r2
 8003718:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b10      	cmp	r3, #16
 8003728:	d108      	bne.n	800373c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800373a:	e007      	b.n	800374c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	60da      	str	r2, [r3, #12]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	4b16      	ldr	r3, [pc, #88]	@ (80037c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003768:	429a      	cmp	r2, r3
 800376a:	d802      	bhi.n	8003772 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800376c:	4b15      	ldr	r3, [pc, #84]	@ (80037c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	e001      	b.n	8003776 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003772:	4b15      	ldr	r3, [pc, #84]	@ (80037c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003774:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	3b08      	subs	r3, #8
 8003782:	4a12      	ldr	r2, [pc, #72]	@ (80037cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003790:	089b      	lsrs	r3, r3, #2
 8003792:	009a      	lsls	r2, r3, #2
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4413      	add	r3, r2
 8003798:	461a      	mov	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a0b      	ldr	r2, [pc, #44]	@ (80037d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80037a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	2201      	movs	r2, #1
 80037ac:	409a      	lsls	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80037b2:	bf00      	nop
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40020407 	.word	0x40020407
 80037c4:	40020800 	.word	0x40020800
 80037c8:	40020820 	.word	0x40020820
 80037cc:	cccccccd 	.word	0xcccccccd
 80037d0:	40020880 	.word	0x40020880

080037d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	461a      	mov	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a08      	ldr	r2, [pc, #32]	@ (8003818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80037f6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	2201      	movs	r2, #1
 8003802:	409a      	lsls	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003808:	bf00      	nop
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	1000823f 	.word	0x1000823f
 8003818:	40020940 	.word	0x40020940

0800381c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800382a:	e15a      	b.n	8003ae2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	2101      	movs	r1, #1
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	fa01 f303 	lsl.w	r3, r1, r3
 8003838:	4013      	ands	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 814c 	beq.w	8003adc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b01      	cmp	r3, #1
 800384e:	d005      	beq.n	800385c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003858:	2b02      	cmp	r3, #2
 800385a:	d130      	bne.n	80038be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	2203      	movs	r2, #3
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4013      	ands	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003892:	2201      	movs	r2, #1
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4013      	ands	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	091b      	lsrs	r3, r3, #4
 80038a8:	f003 0201 	and.w	r2, r3, #1
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d017      	beq.n	80038fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	2203      	movs	r2, #3
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d123      	bne.n	800394e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	08da      	lsrs	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3208      	adds	r2, #8
 800390e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	220f      	movs	r2, #15
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43db      	mvns	r3, r3
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4013      	ands	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	08da      	lsrs	r2, r3, #3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3208      	adds	r2, #8
 8003948:	6939      	ldr	r1, [r7, #16]
 800394a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	2203      	movs	r2, #3
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4013      	ands	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 0203 	and.w	r2, r3, #3
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80a6 	beq.w	8003adc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003990:	4b5b      	ldr	r3, [pc, #364]	@ (8003b00 <HAL_GPIO_Init+0x2e4>)
 8003992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003994:	4a5a      	ldr	r2, [pc, #360]	@ (8003b00 <HAL_GPIO_Init+0x2e4>)
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	6613      	str	r3, [r2, #96]	@ 0x60
 800399c:	4b58      	ldr	r3, [pc, #352]	@ (8003b00 <HAL_GPIO_Init+0x2e4>)
 800399e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039a8:	4a56      	ldr	r2, [pc, #344]	@ (8003b04 <HAL_GPIO_Init+0x2e8>)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	089b      	lsrs	r3, r3, #2
 80039ae:	3302      	adds	r3, #2
 80039b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	220f      	movs	r2, #15
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4013      	ands	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80039d2:	d01f      	beq.n	8003a14 <HAL_GPIO_Init+0x1f8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a4c      	ldr	r2, [pc, #304]	@ (8003b08 <HAL_GPIO_Init+0x2ec>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d019      	beq.n	8003a10 <HAL_GPIO_Init+0x1f4>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a4b      	ldr	r2, [pc, #300]	@ (8003b0c <HAL_GPIO_Init+0x2f0>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d013      	beq.n	8003a0c <HAL_GPIO_Init+0x1f0>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a4a      	ldr	r2, [pc, #296]	@ (8003b10 <HAL_GPIO_Init+0x2f4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d00d      	beq.n	8003a08 <HAL_GPIO_Init+0x1ec>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a49      	ldr	r2, [pc, #292]	@ (8003b14 <HAL_GPIO_Init+0x2f8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d007      	beq.n	8003a04 <HAL_GPIO_Init+0x1e8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a48      	ldr	r2, [pc, #288]	@ (8003b18 <HAL_GPIO_Init+0x2fc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d101      	bne.n	8003a00 <HAL_GPIO_Init+0x1e4>
 80039fc:	2305      	movs	r3, #5
 80039fe:	e00a      	b.n	8003a16 <HAL_GPIO_Init+0x1fa>
 8003a00:	2306      	movs	r3, #6
 8003a02:	e008      	b.n	8003a16 <HAL_GPIO_Init+0x1fa>
 8003a04:	2304      	movs	r3, #4
 8003a06:	e006      	b.n	8003a16 <HAL_GPIO_Init+0x1fa>
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e004      	b.n	8003a16 <HAL_GPIO_Init+0x1fa>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e002      	b.n	8003a16 <HAL_GPIO_Init+0x1fa>
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <HAL_GPIO_Init+0x1fa>
 8003a14:	2300      	movs	r3, #0
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	f002 0203 	and.w	r2, r2, #3
 8003a1c:	0092      	lsls	r2, r2, #2
 8003a1e:	4093      	lsls	r3, r2
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a26:	4937      	ldr	r1, [pc, #220]	@ (8003b04 <HAL_GPIO_Init+0x2e8>)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	089b      	lsrs	r3, r3, #2
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a34:	4b39      	ldr	r3, [pc, #228]	@ (8003b1c <HAL_GPIO_Init+0x300>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a58:	4a30      	ldr	r2, [pc, #192]	@ (8003b1c <HAL_GPIO_Init+0x300>)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8003b1c <HAL_GPIO_Init+0x300>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a82:	4a26      	ldr	r2, [pc, #152]	@ (8003b1c <HAL_GPIO_Init+0x300>)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003a88:	4b24      	ldr	r3, [pc, #144]	@ (8003b1c <HAL_GPIO_Init+0x300>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003aac:	4a1b      	ldr	r2, [pc, #108]	@ (8003b1c <HAL_GPIO_Init+0x300>)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b1c <HAL_GPIO_Init+0x300>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	43db      	mvns	r3, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ad6:	4a11      	ldr	r2, [pc, #68]	@ (8003b1c <HAL_GPIO_Init+0x300>)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f47f ae9d 	bne.w	800382c <HAL_GPIO_Init+0x10>
  }
}
 8003af2:	bf00      	nop
 8003af4:	bf00      	nop
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40010000 	.word	0x40010000
 8003b08:	48000400 	.word	0x48000400
 8003b0c:	48000800 	.word	0x48000800
 8003b10:	48000c00 	.word	0x48000c00
 8003b14:	48001000 	.word	0x48001000
 8003b18:	48001400 	.word	0x48001400
 8003b1c:	40010400 	.word	0x40010400

08003b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	807b      	strh	r3, [r7, #2]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b30:	787b      	ldrb	r3, [r7, #1]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b36:	887a      	ldrh	r2, [r7, #2]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b3c:	e002      	b.n	8003b44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b3e:	887a      	ldrh	r2, [r7, #2]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b5a:	4b08      	ldr	r3, [pc, #32]	@ (8003b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d006      	beq.n	8003b74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b66:	4a05      	ldr	r2, [pc, #20]	@ (8003b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b68:	88fb      	ldrh	r3, [r7, #6]
 8003b6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe fd92 	bl	8002698 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40010400 	.word	0x40010400

08003b80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d141      	bne.n	8003c12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b8e:	4b4b      	ldr	r3, [pc, #300]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b9a:	d131      	bne.n	8003c00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b9c:	4b47      	ldr	r3, [pc, #284]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ba2:	4a46      	ldr	r2, [pc, #280]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ba8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bac:	4b43      	ldr	r3, [pc, #268]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bb4:	4a41      	ldr	r2, [pc, #260]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bbc:	4b40      	ldr	r3, [pc, #256]	@ (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2232      	movs	r2, #50	@ 0x32
 8003bc2:	fb02 f303 	mul.w	r3, r2, r3
 8003bc6:	4a3f      	ldr	r2, [pc, #252]	@ (8003cc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bcc:	0c9b      	lsrs	r3, r3, #18
 8003bce:	3301      	adds	r3, #1
 8003bd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bd2:	e002      	b.n	8003bda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bda:	4b38      	ldr	r3, [pc, #224]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be6:	d102      	bne.n	8003bee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f2      	bne.n	8003bd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bee:	4b33      	ldr	r3, [pc, #204]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bfa:	d158      	bne.n	8003cae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e057      	b.n	8003cb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c00:	4b2e      	ldr	r3, [pc, #184]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c06:	4a2d      	ldr	r2, [pc, #180]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003c10:	e04d      	b.n	8003cae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c18:	d141      	bne.n	8003c9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c1a:	4b28      	ldr	r3, [pc, #160]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c26:	d131      	bne.n	8003c8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c28:	4b24      	ldr	r3, [pc, #144]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c2e:	4a23      	ldr	r2, [pc, #140]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c38:	4b20      	ldr	r3, [pc, #128]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c40:	4a1e      	ldr	r2, [pc, #120]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c48:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2232      	movs	r2, #50	@ 0x32
 8003c4e:	fb02 f303 	mul.w	r3, r2, r3
 8003c52:	4a1c      	ldr	r2, [pc, #112]	@ (8003cc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c54:	fba2 2303 	umull	r2, r3, r2, r3
 8003c58:	0c9b      	lsrs	r3, r3, #18
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c5e:	e002      	b.n	8003c66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c66:	4b15      	ldr	r3, [pc, #84]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c72:	d102      	bne.n	8003c7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f2      	bne.n	8003c60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c7a:	4b10      	ldr	r3, [pc, #64]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c86:	d112      	bne.n	8003cae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e011      	b.n	8003cb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c92:	4a0a      	ldr	r2, [pc, #40]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003c9c:	e007      	b.n	8003cae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c9e:	4b07      	ldr	r3, [pc, #28]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ca6:	4a05      	ldr	r2, [pc, #20]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	40007000 	.word	0x40007000
 8003cc0:	20000214 	.word	0x20000214
 8003cc4:	431bde83 	.word	0x431bde83

08003cc8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003ccc:	4b05      	ldr	r3, [pc, #20]	@ (8003ce4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4a04      	ldr	r2, [pc, #16]	@ (8003ce4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003cd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cd6:	6093      	str	r3, [r2, #8]
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40007000 	.word	0x40007000

08003ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e2fe      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d075      	beq.n	8003df2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d06:	4b97      	ldr	r3, [pc, #604]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d10:	4b94      	ldr	r3, [pc, #592]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	2b0c      	cmp	r3, #12
 8003d1e:	d102      	bne.n	8003d26 <HAL_RCC_OscConfig+0x3e>
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d002      	beq.n	8003d2c <HAL_RCC_OscConfig+0x44>
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d10b      	bne.n	8003d44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	4b8d      	ldr	r3, [pc, #564]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d05b      	beq.n	8003df0 <HAL_RCC_OscConfig+0x108>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d157      	bne.n	8003df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e2d9      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d4c:	d106      	bne.n	8003d5c <HAL_RCC_OscConfig+0x74>
 8003d4e:	4b85      	ldr	r3, [pc, #532]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a84      	ldr	r2, [pc, #528]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e01d      	b.n	8003d98 <HAL_RCC_OscConfig+0xb0>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x98>
 8003d66:	4b7f      	ldr	r3, [pc, #508]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b7c      	ldr	r3, [pc, #496]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a7b      	ldr	r2, [pc, #492]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e00b      	b.n	8003d98 <HAL_RCC_OscConfig+0xb0>
 8003d80:	4b78      	ldr	r3, [pc, #480]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a77      	ldr	r2, [pc, #476]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	4b75      	ldr	r3, [pc, #468]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a74      	ldr	r2, [pc, #464]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d013      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7ff f8ee 	bl	8002f80 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da8:	f7ff f8ea 	bl	8002f80 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	@ 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e29e      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dba:	4b6a      	ldr	r3, [pc, #424]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0xc0>
 8003dc6:	e014      	b.n	8003df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7ff f8da 	bl	8002f80 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7ff f8d6 	bl	8002f80 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	@ 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e28a      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003de2:	4b60      	ldr	r3, [pc, #384]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0xe8>
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d075      	beq.n	8003eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dfe:	4b59      	ldr	r3, [pc, #356]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e08:	4b56      	ldr	r3, [pc, #344]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0303 	and.w	r3, r3, #3
 8003e10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	2b0c      	cmp	r3, #12
 8003e16:	d102      	bne.n	8003e1e <HAL_RCC_OscConfig+0x136>
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d002      	beq.n	8003e24 <HAL_RCC_OscConfig+0x13c>
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d11f      	bne.n	8003e64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e24:	4b4f      	ldr	r3, [pc, #316]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_OscConfig+0x154>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e25d      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3c:	4b49      	ldr	r3, [pc, #292]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	061b      	lsls	r3, r3, #24
 8003e4a:	4946      	ldr	r1, [pc, #280]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e50:	4b45      	ldr	r3, [pc, #276]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff f847 	bl	8002ee8 <HAL_InitTick>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d043      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e249      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d023      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e6c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a3c      	ldr	r2, [pc, #240]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7ff f882 	bl	8002f80 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e80:	f7ff f87e 	bl	8002f80 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e232      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e92:	4b34      	ldr	r3, [pc, #208]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9e:	4b31      	ldr	r3, [pc, #196]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	061b      	lsls	r3, r3, #24
 8003eac:	492d      	ldr	r1, [pc, #180]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	604b      	str	r3, [r1, #4]
 8003eb2:	e01a      	b.n	8003eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003eba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7ff f85e 	bl	8002f80 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec8:	f7ff f85a 	bl	8002f80 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e20e      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eda:	4b22      	ldr	r3, [pc, #136]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x1e0>
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ee8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d041      	beq.n	8003f7a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d01c      	beq.n	8003f38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efe:	4b19      	ldr	r3, [pc, #100]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f04:	4a17      	ldr	r2, [pc, #92]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0e:	f7ff f837 	bl	8002f80 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f16:	f7ff f833 	bl	8002f80 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e1e7      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f28:	4b0e      	ldr	r3, [pc, #56]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0ef      	beq.n	8003f16 <HAL_RCC_OscConfig+0x22e>
 8003f36:	e020      	b.n	8003f7a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f38:	4b0a      	ldr	r3, [pc, #40]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f3e:	4a09      	ldr	r2, [pc, #36]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f48:	f7ff f81a 	bl	8002f80 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f4e:	e00d      	b.n	8003f6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f50:	f7ff f816 	bl	8002f80 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d906      	bls.n	8003f6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e1ca      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
 8003f62:	bf00      	nop
 8003f64:	40021000 	.word	0x40021000
 8003f68:	20000218 	.word	0x20000218
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f6c:	4b8c      	ldr	r3, [pc, #560]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8003f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1ea      	bne.n	8003f50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 80a6 	beq.w	80040d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f8c:	4b84      	ldr	r3, [pc, #528]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_OscConfig+0x2b4>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <HAL_RCC_OscConfig+0x2b6>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00d      	beq.n	8003fbe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa2:	4b7f      	ldr	r3, [pc, #508]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa6:	4a7e      	ldr	r2, [pc, #504]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8003fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fae:	4b7c      	ldr	r3, [pc, #496]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fbe:	4b79      	ldr	r3, [pc, #484]	@ (80041a4 <HAL_RCC_OscConfig+0x4bc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d118      	bne.n	8003ffc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fca:	4b76      	ldr	r3, [pc, #472]	@ (80041a4 <HAL_RCC_OscConfig+0x4bc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a75      	ldr	r2, [pc, #468]	@ (80041a4 <HAL_RCC_OscConfig+0x4bc>)
 8003fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd6:	f7fe ffd3 	bl	8002f80 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fde:	f7fe ffcf 	bl	8002f80 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e183      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff0:	4b6c      	ldr	r3, [pc, #432]	@ (80041a4 <HAL_RCC_OscConfig+0x4bc>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d108      	bne.n	8004016 <HAL_RCC_OscConfig+0x32e>
 8004004:	4b66      	ldr	r3, [pc, #408]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400a:	4a65      	ldr	r2, [pc, #404]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004014:	e024      	b.n	8004060 <HAL_RCC_OscConfig+0x378>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b05      	cmp	r3, #5
 800401c:	d110      	bne.n	8004040 <HAL_RCC_OscConfig+0x358>
 800401e:	4b60      	ldr	r3, [pc, #384]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8004020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004024:	4a5e      	ldr	r2, [pc, #376]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8004026:	f043 0304 	orr.w	r3, r3, #4
 800402a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800402e:	4b5c      	ldr	r3, [pc, #368]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004034:	4a5a      	ldr	r2, [pc, #360]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800403e:	e00f      	b.n	8004060 <HAL_RCC_OscConfig+0x378>
 8004040:	4b57      	ldr	r3, [pc, #348]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004046:	4a56      	ldr	r2, [pc, #344]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8004048:	f023 0301 	bic.w	r3, r3, #1
 800404c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004050:	4b53      	ldr	r3, [pc, #332]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004056:	4a52      	ldr	r2, [pc, #328]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8004058:	f023 0304 	bic.w	r3, r3, #4
 800405c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d016      	beq.n	8004096 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004068:	f7fe ff8a 	bl	8002f80 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800406e:	e00a      	b.n	8004086 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004070:	f7fe ff86 	bl	8002f80 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e138      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004086:	4b46      	ldr	r3, [pc, #280]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8004088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0ed      	beq.n	8004070 <HAL_RCC_OscConfig+0x388>
 8004094:	e015      	b.n	80040c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004096:	f7fe ff73 	bl	8002f80 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800409c:	e00a      	b.n	80040b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409e:	f7fe ff6f 	bl	8002f80 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e121      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040b4:	4b3a      	ldr	r3, [pc, #232]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1ed      	bne.n	800409e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040c2:	7ffb      	ldrb	r3, [r7, #31]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d105      	bne.n	80040d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c8:	4b35      	ldr	r3, [pc, #212]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040cc:	4a34      	ldr	r2, [pc, #208]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 80040ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d03c      	beq.n	800415a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d01c      	beq.n	8004122 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040e8:	4b2d      	ldr	r3, [pc, #180]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 80040ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040ee:	4a2c      	ldr	r2, [pc, #176]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f8:	f7fe ff42 	bl	8002f80 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004100:	f7fe ff3e 	bl	8002f80 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e0f2      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004112:	4b23      	ldr	r3, [pc, #140]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8004114:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0ef      	beq.n	8004100 <HAL_RCC_OscConfig+0x418>
 8004120:	e01b      	b.n	800415a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004122:	4b1f      	ldr	r3, [pc, #124]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8004124:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004128:	4a1d      	ldr	r2, [pc, #116]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 800412a:	f023 0301 	bic.w	r3, r3, #1
 800412e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004132:	f7fe ff25 	bl	8002f80 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800413a:	f7fe ff21 	bl	8002f80 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e0d5      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800414c:	4b14      	ldr	r3, [pc, #80]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 800414e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1ef      	bne.n	800413a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 80c9 	beq.w	80042f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004164:	4b0e      	ldr	r3, [pc, #56]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 030c 	and.w	r3, r3, #12
 800416c:	2b0c      	cmp	r3, #12
 800416e:	f000 8083 	beq.w	8004278 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d15e      	bne.n	8004238 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417a:	4b09      	ldr	r3, [pc, #36]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a08      	ldr	r2, [pc, #32]	@ (80041a0 <HAL_RCC_OscConfig+0x4b8>)
 8004180:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fe fefb 	bl	8002f80 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800418c:	e00c      	b.n	80041a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800418e:	f7fe fef7 	bl	8002f80 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d905      	bls.n	80041a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e0ab      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
 80041a0:	40021000 	.word	0x40021000
 80041a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041a8:	4b55      	ldr	r3, [pc, #340]	@ (8004300 <HAL_RCC_OscConfig+0x618>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1ec      	bne.n	800418e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041b4:	4b52      	ldr	r3, [pc, #328]	@ (8004300 <HAL_RCC_OscConfig+0x618>)
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	4b52      	ldr	r3, [pc, #328]	@ (8004304 <HAL_RCC_OscConfig+0x61c>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6a11      	ldr	r1, [r2, #32]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041c4:	3a01      	subs	r2, #1
 80041c6:	0112      	lsls	r2, r2, #4
 80041c8:	4311      	orrs	r1, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80041ce:	0212      	lsls	r2, r2, #8
 80041d0:	4311      	orrs	r1, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80041d6:	0852      	lsrs	r2, r2, #1
 80041d8:	3a01      	subs	r2, #1
 80041da:	0552      	lsls	r2, r2, #21
 80041dc:	4311      	orrs	r1, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80041e2:	0852      	lsrs	r2, r2, #1
 80041e4:	3a01      	subs	r2, #1
 80041e6:	0652      	lsls	r2, r2, #25
 80041e8:	4311      	orrs	r1, r2
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80041ee:	06d2      	lsls	r2, r2, #27
 80041f0:	430a      	orrs	r2, r1
 80041f2:	4943      	ldr	r1, [pc, #268]	@ (8004300 <HAL_RCC_OscConfig+0x618>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f8:	4b41      	ldr	r3, [pc, #260]	@ (8004300 <HAL_RCC_OscConfig+0x618>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a40      	ldr	r2, [pc, #256]	@ (8004300 <HAL_RCC_OscConfig+0x618>)
 80041fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004202:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004204:	4b3e      	ldr	r3, [pc, #248]	@ (8004300 <HAL_RCC_OscConfig+0x618>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4a3d      	ldr	r2, [pc, #244]	@ (8004300 <HAL_RCC_OscConfig+0x618>)
 800420a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800420e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fe feb6 	bl	8002f80 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004218:	f7fe feb2 	bl	8002f80 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e066      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800422a:	4b35      	ldr	r3, [pc, #212]	@ (8004300 <HAL_RCC_OscConfig+0x618>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0x530>
 8004236:	e05e      	b.n	80042f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004238:	4b31      	ldr	r3, [pc, #196]	@ (8004300 <HAL_RCC_OscConfig+0x618>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a30      	ldr	r2, [pc, #192]	@ (8004300 <HAL_RCC_OscConfig+0x618>)
 800423e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fe fe9c 	bl	8002f80 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800424c:	f7fe fe98 	bl	8002f80 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e04c      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800425e:	4b28      	ldr	r3, [pc, #160]	@ (8004300 <HAL_RCC_OscConfig+0x618>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800426a:	4b25      	ldr	r3, [pc, #148]	@ (8004300 <HAL_RCC_OscConfig+0x618>)
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	4924      	ldr	r1, [pc, #144]	@ (8004300 <HAL_RCC_OscConfig+0x618>)
 8004270:	4b25      	ldr	r3, [pc, #148]	@ (8004308 <HAL_RCC_OscConfig+0x620>)
 8004272:	4013      	ands	r3, r2
 8004274:	60cb      	str	r3, [r1, #12]
 8004276:	e03e      	b.n	80042f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e039      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004284:	4b1e      	ldr	r3, [pc, #120]	@ (8004300 <HAL_RCC_OscConfig+0x618>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f003 0203 	and.w	r2, r3, #3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	429a      	cmp	r2, r3
 8004296:	d12c      	bne.n	80042f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a2:	3b01      	subs	r3, #1
 80042a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d123      	bne.n	80042f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d11b      	bne.n	80042f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d113      	bne.n	80042f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d4:	085b      	lsrs	r3, r3, #1
 80042d6:	3b01      	subs	r3, #1
 80042d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042da:	429a      	cmp	r2, r3
 80042dc:	d109      	bne.n	80042f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e8:	085b      	lsrs	r3, r3, #1
 80042ea:	3b01      	subs	r3, #1
 80042ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d001      	beq.n	80042f6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3720      	adds	r7, #32
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40021000 	.word	0x40021000
 8004304:	019f800c 	.word	0x019f800c
 8004308:	feeefffc 	.word	0xfeeefffc

0800430c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e11e      	b.n	8004562 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004324:	4b91      	ldr	r3, [pc, #580]	@ (800456c <HAL_RCC_ClockConfig+0x260>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d910      	bls.n	8004354 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004332:	4b8e      	ldr	r3, [pc, #568]	@ (800456c <HAL_RCC_ClockConfig+0x260>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 020f 	bic.w	r2, r3, #15
 800433a:	498c      	ldr	r1, [pc, #560]	@ (800456c <HAL_RCC_ClockConfig+0x260>)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b8a      	ldr	r3, [pc, #552]	@ (800456c <HAL_RCC_ClockConfig+0x260>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e106      	b.n	8004562 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d073      	beq.n	8004448 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b03      	cmp	r3, #3
 8004366:	d129      	bne.n	80043bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004368:	4b81      	ldr	r3, [pc, #516]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0f4      	b.n	8004562 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004378:	f000 f99e 	bl	80046b8 <RCC_GetSysClockFreqFromPLLSource>
 800437c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4a7c      	ldr	r2, [pc, #496]	@ (8004574 <HAL_RCC_ClockConfig+0x268>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d93f      	bls.n	8004406 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004386:	4b7a      	ldr	r3, [pc, #488]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800439a:	2b00      	cmp	r3, #0
 800439c:	d033      	beq.n	8004406 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d12f      	bne.n	8004406 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043a6:	4b72      	ldr	r3, [pc, #456]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043ae:	4a70      	ldr	r2, [pc, #448]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 80043b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043b6:	2380      	movs	r3, #128	@ 0x80
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	e024      	b.n	8004406 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d107      	bne.n	80043d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043c4:	4b6a      	ldr	r3, [pc, #424]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d109      	bne.n	80043e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0c6      	b.n	8004562 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043d4:	4b66      	ldr	r3, [pc, #408]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0be      	b.n	8004562 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80043e4:	f000 f8ce 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 80043e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4a61      	ldr	r2, [pc, #388]	@ (8004574 <HAL_RCC_ClockConfig+0x268>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d909      	bls.n	8004406 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043f2:	4b5f      	ldr	r3, [pc, #380]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043fa:	4a5d      	ldr	r2, [pc, #372]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 80043fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004400:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004402:	2380      	movs	r3, #128	@ 0x80
 8004404:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004406:	4b5a      	ldr	r3, [pc, #360]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f023 0203 	bic.w	r2, r3, #3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	4957      	ldr	r1, [pc, #348]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004414:	4313      	orrs	r3, r2
 8004416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004418:	f7fe fdb2 	bl	8002f80 <HAL_GetTick>
 800441c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441e:	e00a      	b.n	8004436 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004420:	f7fe fdae 	bl	8002f80 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e095      	b.n	8004562 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004436:	4b4e      	ldr	r3, [pc, #312]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 020c 	and.w	r2, r3, #12
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	429a      	cmp	r2, r3
 8004446:	d1eb      	bne.n	8004420 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d023      	beq.n	800449c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004460:	4b43      	ldr	r3, [pc, #268]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	4a42      	ldr	r2, [pc, #264]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004466:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800446a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b00      	cmp	r3, #0
 8004476:	d007      	beq.n	8004488 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004478:	4b3d      	ldr	r3, [pc, #244]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004480:	4a3b      	ldr	r2, [pc, #236]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004482:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004486:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004488:	4b39      	ldr	r3, [pc, #228]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4936      	ldr	r1, [pc, #216]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004496:	4313      	orrs	r3, r2
 8004498:	608b      	str	r3, [r1, #8]
 800449a:	e008      	b.n	80044ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2b80      	cmp	r3, #128	@ 0x80
 80044a0:	d105      	bne.n	80044ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044a2:	4b33      	ldr	r3, [pc, #204]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	4a32      	ldr	r2, [pc, #200]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 80044a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044ae:	4b2f      	ldr	r3, [pc, #188]	@ (800456c <HAL_RCC_ClockConfig+0x260>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d21d      	bcs.n	80044f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044bc:	4b2b      	ldr	r3, [pc, #172]	@ (800456c <HAL_RCC_ClockConfig+0x260>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 020f 	bic.w	r2, r3, #15
 80044c4:	4929      	ldr	r1, [pc, #164]	@ (800456c <HAL_RCC_ClockConfig+0x260>)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044cc:	f7fe fd58 	bl	8002f80 <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d4:	f7fe fd54 	bl	8002f80 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e03b      	b.n	8004562 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ea:	4b20      	ldr	r3, [pc, #128]	@ (800456c <HAL_RCC_ClockConfig+0x260>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d1ed      	bne.n	80044d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d008      	beq.n	8004516 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004504:	4b1a      	ldr	r3, [pc, #104]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4917      	ldr	r1, [pc, #92]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d009      	beq.n	8004536 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004522:	4b13      	ldr	r3, [pc, #76]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	490f      	ldr	r1, [pc, #60]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004536:	f000 f825 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 800453a:	4602      	mov	r2, r0
 800453c:	4b0c      	ldr	r3, [pc, #48]	@ (8004570 <HAL_RCC_ClockConfig+0x264>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	490c      	ldr	r1, [pc, #48]	@ (8004578 <HAL_RCC_ClockConfig+0x26c>)
 8004548:	5ccb      	ldrb	r3, [r1, r3]
 800454a:	f003 031f 	and.w	r3, r3, #31
 800454e:	fa22 f303 	lsr.w	r3, r2, r3
 8004552:	4a0a      	ldr	r2, [pc, #40]	@ (800457c <HAL_RCC_ClockConfig+0x270>)
 8004554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004556:	4b0a      	ldr	r3, [pc, #40]	@ (8004580 <HAL_RCC_ClockConfig+0x274>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe fcc4 	bl	8002ee8 <HAL_InitTick>
 8004560:	4603      	mov	r3, r0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40022000 	.word	0x40022000
 8004570:	40021000 	.word	0x40021000
 8004574:	04c4b400 	.word	0x04c4b400
 8004578:	08009130 	.word	0x08009130
 800457c:	20000214 	.word	0x20000214
 8004580:	20000218 	.word	0x20000218

08004584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800458a:	4b2c      	ldr	r3, [pc, #176]	@ (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	2b04      	cmp	r3, #4
 8004594:	d102      	bne.n	800459c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004596:	4b2a      	ldr	r3, [pc, #168]	@ (8004640 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	e047      	b.n	800462c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800459c:	4b27      	ldr	r3, [pc, #156]	@ (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 030c 	and.w	r3, r3, #12
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d102      	bne.n	80045ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045a8:	4b26      	ldr	r3, [pc, #152]	@ (8004644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	e03e      	b.n	800462c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045ae:	4b23      	ldr	r3, [pc, #140]	@ (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b0c      	cmp	r3, #12
 80045b8:	d136      	bne.n	8004628 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045ba:	4b20      	ldr	r3, [pc, #128]	@ (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045c4:	4b1d      	ldr	r3, [pc, #116]	@ (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	091b      	lsrs	r3, r3, #4
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	3301      	adds	r3, #1
 80045d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d10c      	bne.n	80045f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e0:	4a16      	ldr	r2, [pc, #88]	@ (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045e2:	68d2      	ldr	r2, [r2, #12]
 80045e4:	0a12      	lsrs	r2, r2, #8
 80045e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045ea:	fb02 f303 	mul.w	r3, r2, r3
 80045ee:	617b      	str	r3, [r7, #20]
      break;
 80045f0:	e00c      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045f2:	4a13      	ldr	r2, [pc, #76]	@ (8004640 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fa:	4a10      	ldr	r2, [pc, #64]	@ (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045fc:	68d2      	ldr	r2, [r2, #12]
 80045fe:	0a12      	lsrs	r2, r2, #8
 8004600:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004604:	fb02 f303 	mul.w	r3, r2, r3
 8004608:	617b      	str	r3, [r7, #20]
      break;
 800460a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800460c:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	0e5b      	lsrs	r3, r3, #25
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	3301      	adds	r3, #1
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	e001      	b.n	800462c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800462c:	693b      	ldr	r3, [r7, #16]
}
 800462e:	4618      	mov	r0, r3
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40021000 	.word	0x40021000
 8004640:	00f42400 	.word	0x00f42400
 8004644:	016e3600 	.word	0x016e3600

08004648 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800464c:	4b03      	ldr	r3, [pc, #12]	@ (800465c <HAL_RCC_GetHCLKFreq+0x14>)
 800464e:	681b      	ldr	r3, [r3, #0]
}
 8004650:	4618      	mov	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	20000214 	.word	0x20000214

08004660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004664:	f7ff fff0 	bl	8004648 <HAL_RCC_GetHCLKFreq>
 8004668:	4602      	mov	r2, r0
 800466a:	4b06      	ldr	r3, [pc, #24]	@ (8004684 <HAL_RCC_GetPCLK1Freq+0x24>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	0a1b      	lsrs	r3, r3, #8
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	4904      	ldr	r1, [pc, #16]	@ (8004688 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004676:	5ccb      	ldrb	r3, [r1, r3]
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004680:	4618      	mov	r0, r3
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40021000 	.word	0x40021000
 8004688:	08009140 	.word	0x08009140

0800468c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004690:	f7ff ffda 	bl	8004648 <HAL_RCC_GetHCLKFreq>
 8004694:	4602      	mov	r2, r0
 8004696:	4b06      	ldr	r3, [pc, #24]	@ (80046b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	0adb      	lsrs	r3, r3, #11
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	4904      	ldr	r1, [pc, #16]	@ (80046b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046a2:	5ccb      	ldrb	r3, [r1, r3]
 80046a4:	f003 031f 	and.w	r3, r3, #31
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40021000 	.word	0x40021000
 80046b4:	08009140 	.word	0x08009140

080046b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046be:	4b1e      	ldr	r3, [pc, #120]	@ (8004738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	3301      	adds	r3, #1
 80046d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d10c      	bne.n	80046f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046dc:	4a17      	ldr	r2, [pc, #92]	@ (800473c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e4:	4a14      	ldr	r2, [pc, #80]	@ (8004738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046e6:	68d2      	ldr	r2, [r2, #12]
 80046e8:	0a12      	lsrs	r2, r2, #8
 80046ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80046ee:	fb02 f303 	mul.w	r3, r2, r3
 80046f2:	617b      	str	r3, [r7, #20]
    break;
 80046f4:	e00c      	b.n	8004710 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046f6:	4a12      	ldr	r2, [pc, #72]	@ (8004740 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004700:	68d2      	ldr	r2, [r2, #12]
 8004702:	0a12      	lsrs	r2, r2, #8
 8004704:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004708:	fb02 f303 	mul.w	r3, r2, r3
 800470c:	617b      	str	r3, [r7, #20]
    break;
 800470e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004710:	4b09      	ldr	r3, [pc, #36]	@ (8004738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	0e5b      	lsrs	r3, r3, #25
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	3301      	adds	r3, #1
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	fbb2 f3f3 	udiv	r3, r2, r3
 8004728:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800472a:	687b      	ldr	r3, [r7, #4]
}
 800472c:	4618      	mov	r0, r3
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	40021000 	.word	0x40021000
 800473c:	016e3600 	.word	0x016e3600
 8004740:	00f42400 	.word	0x00f42400

08004744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800474c:	2300      	movs	r3, #0
 800474e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004750:	2300      	movs	r3, #0
 8004752:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8098 	beq.w	8004892 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004762:	2300      	movs	r3, #0
 8004764:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004766:	4b43      	ldr	r3, [pc, #268]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10d      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004772:	4b40      	ldr	r3, [pc, #256]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004776:	4a3f      	ldr	r2, [pc, #252]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800477c:	6593      	str	r3, [r2, #88]	@ 0x58
 800477e:	4b3d      	ldr	r3, [pc, #244]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478a:	2301      	movs	r3, #1
 800478c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800478e:	4b3a      	ldr	r3, [pc, #232]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a39      	ldr	r2, [pc, #228]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004798:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800479a:	f7fe fbf1 	bl	8002f80 <HAL_GetTick>
 800479e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047a0:	e009      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a2:	f7fe fbed 	bl	8002f80 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d902      	bls.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	74fb      	strb	r3, [r7, #19]
        break;
 80047b4:	e005      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047b6:	4b30      	ldr	r3, [pc, #192]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ef      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80047c2:	7cfb      	ldrb	r3, [r7, #19]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d159      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d01e      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d019      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047e4:	4b23      	ldr	r3, [pc, #140]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047f0:	4b20      	ldr	r3, [pc, #128]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004800:	4b1c      	ldr	r3, [pc, #112]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004806:	4a1b      	ldr	r2, [pc, #108]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800480c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004810:	4a18      	ldr	r2, [pc, #96]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d016      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004822:	f7fe fbad 	bl	8002f80 <HAL_GetTick>
 8004826:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004828:	e00b      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482a:	f7fe fba9 	bl	8002f80 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004838:	4293      	cmp	r3, r2
 800483a:	d902      	bls.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	74fb      	strb	r3, [r7, #19]
            break;
 8004840:	e006      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004842:	4b0c      	ldr	r3, [pc, #48]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0ec      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004850:	7cfb      	ldrb	r3, [r7, #19]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10b      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004856:	4b07      	ldr	r3, [pc, #28]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004864:	4903      	ldr	r1, [pc, #12]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800486c:	e008      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800486e:	7cfb      	ldrb	r3, [r7, #19]
 8004870:	74bb      	strb	r3, [r7, #18]
 8004872:	e005      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004874:	40021000 	.word	0x40021000
 8004878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487c:	7cfb      	ldrb	r3, [r7, #19]
 800487e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004880:	7c7b      	ldrb	r3, [r7, #17]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d105      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004886:	4ba7      	ldr	r3, [pc, #668]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488a:	4aa6      	ldr	r2, [pc, #664]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004890:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800489e:	4ba1      	ldr	r3, [pc, #644]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a4:	f023 0203 	bic.w	r2, r3, #3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	499d      	ldr	r1, [pc, #628]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048c0:	4b98      	ldr	r3, [pc, #608]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c6:	f023 020c 	bic.w	r2, r3, #12
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	4995      	ldr	r1, [pc, #596]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048e2:	4b90      	ldr	r3, [pc, #576]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	498c      	ldr	r1, [pc, #560]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004904:	4b87      	ldr	r3, [pc, #540]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	4984      	ldr	r1, [pc, #528]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004926:	4b7f      	ldr	r3, [pc, #508]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800492c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	497b      	ldr	r1, [pc, #492]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004948:	4b76      	ldr	r3, [pc, #472]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	4973      	ldr	r1, [pc, #460]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800496a:	4b6e      	ldr	r3, [pc, #440]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004970:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	496a      	ldr	r1, [pc, #424]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800498c:	4b65      	ldr	r3, [pc, #404]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004992:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	4962      	ldr	r1, [pc, #392]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049ae:	4b5d      	ldr	r3, [pc, #372]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	4959      	ldr	r1, [pc, #356]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049d0:	4b54      	ldr	r3, [pc, #336]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049d6:	f023 0203 	bic.w	r2, r3, #3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049de:	4951      	ldr	r1, [pc, #324]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049f2:	4b4c      	ldr	r3, [pc, #304]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a00:	4948      	ldr	r1, [pc, #288]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d015      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a14:	4b43      	ldr	r3, [pc, #268]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a22:	4940      	ldr	r1, [pc, #256]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a32:	d105      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a34:	4b3b      	ldr	r3, [pc, #236]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	4a3a      	ldr	r2, [pc, #232]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d015      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a4c:	4b35      	ldr	r3, [pc, #212]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a5a:	4932      	ldr	r1, [pc, #200]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a6a:	d105      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4a2c      	ldr	r2, [pc, #176]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a76:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d015      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a84:	4b27      	ldr	r3, [pc, #156]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a92:	4924      	ldr	r1, [pc, #144]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d015      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004abc:	4b19      	ldr	r3, [pc, #100]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aca:	4916      	ldr	r1, [pc, #88]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ada:	d105      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004adc:	4b11      	ldr	r3, [pc, #68]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	4a10      	ldr	r2, [pc, #64]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ae6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d019      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004af4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004afa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b02:	4908      	ldr	r1, [pc, #32]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b12:	d109      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b14:	4b03      	ldr	r3, [pc, #12]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	4a02      	ldr	r2, [pc, #8]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b1e:	60d3      	str	r3, [r2, #12]
 8004b20:	e002      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004b22:	bf00      	nop
 8004b24:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d015      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b34:	4b29      	ldr	r3, [pc, #164]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b42:	4926      	ldr	r1, [pc, #152]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b52:	d105      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b54:	4b21      	ldr	r3, [pc, #132]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4a20      	ldr	r2, [pc, #128]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b5e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d015      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b72:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b7a:	4918      	ldr	r1, [pc, #96]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b8a:	d105      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b8c:	4b13      	ldr	r3, [pc, #76]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4a12      	ldr	r2, [pc, #72]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b96:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d015      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004baa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb2:	490a      	ldr	r1, [pc, #40]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bc2:	d105      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc4:	4b05      	ldr	r3, [pc, #20]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4a04      	ldr	r2, [pc, #16]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004bd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40021000 	.word	0x40021000

08004be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e054      	b.n	8004c9c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d111      	bne.n	8004c22 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f002 f810 	bl	8006c2c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a23      	ldr	r2, [pc, #140]	@ (8004ca4 <HAL_TIM_Base_Init+0xc4>)
 8004c18:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2202      	movs	r2, #2
 8004c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3304      	adds	r3, #4
 8004c32:	4619      	mov	r1, r3
 8004c34:	4610      	mov	r0, r2
 8004c36:	f001 fb59 	bl	80062ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	080027c1 	.word	0x080027c1

08004ca8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d001      	beq.n	8004cc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e04c      	b.n	8004d5a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a26      	ldr	r2, [pc, #152]	@ (8004d68 <HAL_TIM_Base_Start+0xc0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d022      	beq.n	8004d18 <HAL_TIM_Base_Start+0x70>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cda:	d01d      	beq.n	8004d18 <HAL_TIM_Base_Start+0x70>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a22      	ldr	r2, [pc, #136]	@ (8004d6c <HAL_TIM_Base_Start+0xc4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d018      	beq.n	8004d18 <HAL_TIM_Base_Start+0x70>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a21      	ldr	r2, [pc, #132]	@ (8004d70 <HAL_TIM_Base_Start+0xc8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d013      	beq.n	8004d18 <HAL_TIM_Base_Start+0x70>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d74 <HAL_TIM_Base_Start+0xcc>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00e      	beq.n	8004d18 <HAL_TIM_Base_Start+0x70>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8004d78 <HAL_TIM_Base_Start+0xd0>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d009      	beq.n	8004d18 <HAL_TIM_Base_Start+0x70>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1c      	ldr	r2, [pc, #112]	@ (8004d7c <HAL_TIM_Base_Start+0xd4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d004      	beq.n	8004d18 <HAL_TIM_Base_Start+0x70>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1b      	ldr	r2, [pc, #108]	@ (8004d80 <HAL_TIM_Base_Start+0xd8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d115      	bne.n	8004d44 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	4b19      	ldr	r3, [pc, #100]	@ (8004d84 <HAL_TIM_Base_Start+0xdc>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b06      	cmp	r3, #6
 8004d28:	d015      	beq.n	8004d56 <HAL_TIM_Base_Start+0xae>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d30:	d011      	beq.n	8004d56 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f042 0201 	orr.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d42:	e008      	b.n	8004d56 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	e000      	b.n	8004d58 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40012c00 	.word	0x40012c00
 8004d6c:	40000400 	.word	0x40000400
 8004d70:	40000800 	.word	0x40000800
 8004d74:	40000c00 	.word	0x40000c00
 8004d78:	40013400 	.word	0x40013400
 8004d7c:	40014000 	.word	0x40014000
 8004d80:	40015000 	.word	0x40015000
 8004d84:	00010007 	.word	0x00010007

08004d88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d001      	beq.n	8004da0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e054      	b.n	8004e4a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a26      	ldr	r2, [pc, #152]	@ (8004e58 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d022      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x80>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dca:	d01d      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x80>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a22      	ldr	r2, [pc, #136]	@ (8004e5c <HAL_TIM_Base_Start_IT+0xd4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d018      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x80>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a21      	ldr	r2, [pc, #132]	@ (8004e60 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d013      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x80>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1f      	ldr	r2, [pc, #124]	@ (8004e64 <HAL_TIM_Base_Start_IT+0xdc>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00e      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x80>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1e      	ldr	r2, [pc, #120]	@ (8004e68 <HAL_TIM_Base_Start_IT+0xe0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d009      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x80>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a1c      	ldr	r2, [pc, #112]	@ (8004e6c <HAL_TIM_Base_Start_IT+0xe4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d004      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x80>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a1b      	ldr	r2, [pc, #108]	@ (8004e70 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d115      	bne.n	8004e34 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	4b19      	ldr	r3, [pc, #100]	@ (8004e74 <HAL_TIM_Base_Start_IT+0xec>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b06      	cmp	r3, #6
 8004e18:	d015      	beq.n	8004e46 <HAL_TIM_Base_Start_IT+0xbe>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e20:	d011      	beq.n	8004e46 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0201 	orr.w	r2, r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e32:	e008      	b.n	8004e46 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0201 	orr.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	e000      	b.n	8004e48 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	40000400 	.word	0x40000400
 8004e60:	40000800 	.word	0x40000800
 8004e64:	40000c00 	.word	0x40000c00
 8004e68:	40013400 	.word	0x40013400
 8004e6c:	40014000 	.word	0x40014000
 8004e70:	40015000 	.word	0x40015000
 8004e74:	00010007 	.word	0x00010007

08004e78 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0201 	bic.w	r2, r2, #1
 8004e8e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6a1a      	ldr	r2, [r3, #32]
 8004e96:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10f      	bne.n	8004ec0 <HAL_TIM_Base_Stop_IT+0x48>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6a1a      	ldr	r2, [r3, #32]
 8004ea6:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d107      	bne.n	8004ec0 <HAL_TIM_Base_Stop_IT+0x48>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0201 	bic.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
	...

08004ed8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e054      	b.n	8004f94 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d111      	bne.n	8004f1a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f001 fe94 	bl	8006c2c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d102      	bne.n	8004f12 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a23      	ldr	r2, [pc, #140]	@ (8004f9c <HAL_TIM_PWM_Init+0xc4>)
 8004f10:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	f001 f9dd 	bl	80062ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	08004fa1 	.word	0x08004fa1

08004fa0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d109      	bne.n	8004fd8 <HAL_TIM_PWM_Start+0x24>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	bf14      	ite	ne
 8004fd0:	2301      	movne	r3, #1
 8004fd2:	2300      	moveq	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	e03c      	b.n	8005052 <HAL_TIM_PWM_Start+0x9e>
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d109      	bne.n	8004ff2 <HAL_TIM_PWM_Start+0x3e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	bf14      	ite	ne
 8004fea:	2301      	movne	r3, #1
 8004fec:	2300      	moveq	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	e02f      	b.n	8005052 <HAL_TIM_PWM_Start+0x9e>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d109      	bne.n	800500c <HAL_TIM_PWM_Start+0x58>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b01      	cmp	r3, #1
 8005002:	bf14      	ite	ne
 8005004:	2301      	movne	r3, #1
 8005006:	2300      	moveq	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	e022      	b.n	8005052 <HAL_TIM_PWM_Start+0x9e>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b0c      	cmp	r3, #12
 8005010:	d109      	bne.n	8005026 <HAL_TIM_PWM_Start+0x72>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b01      	cmp	r3, #1
 800501c:	bf14      	ite	ne
 800501e:	2301      	movne	r3, #1
 8005020:	2300      	moveq	r3, #0
 8005022:	b2db      	uxtb	r3, r3
 8005024:	e015      	b.n	8005052 <HAL_TIM_PWM_Start+0x9e>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b10      	cmp	r3, #16
 800502a:	d109      	bne.n	8005040 <HAL_TIM_PWM_Start+0x8c>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	bf14      	ite	ne
 8005038:	2301      	movne	r3, #1
 800503a:	2300      	moveq	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	e008      	b.n	8005052 <HAL_TIM_PWM_Start+0x9e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b01      	cmp	r3, #1
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e0a6      	b.n	80051a8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d104      	bne.n	800506a <HAL_TIM_PWM_Start+0xb6>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005068:	e023      	b.n	80050b2 <HAL_TIM_PWM_Start+0xfe>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b04      	cmp	r3, #4
 800506e:	d104      	bne.n	800507a <HAL_TIM_PWM_Start+0xc6>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005078:	e01b      	b.n	80050b2 <HAL_TIM_PWM_Start+0xfe>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b08      	cmp	r3, #8
 800507e:	d104      	bne.n	800508a <HAL_TIM_PWM_Start+0xd6>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005088:	e013      	b.n	80050b2 <HAL_TIM_PWM_Start+0xfe>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b0c      	cmp	r3, #12
 800508e:	d104      	bne.n	800509a <HAL_TIM_PWM_Start+0xe6>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005098:	e00b      	b.n	80050b2 <HAL_TIM_PWM_Start+0xfe>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b10      	cmp	r3, #16
 800509e:	d104      	bne.n	80050aa <HAL_TIM_PWM_Start+0xf6>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050a8:	e003      	b.n	80050b2 <HAL_TIM_PWM_Start+0xfe>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2201      	movs	r2, #1
 80050b8:	6839      	ldr	r1, [r7, #0]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f001 fd90 	bl	8006be0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a3a      	ldr	r2, [pc, #232]	@ (80051b0 <HAL_TIM_PWM_Start+0x1fc>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d018      	beq.n	80050fc <HAL_TIM_PWM_Start+0x148>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a39      	ldr	r2, [pc, #228]	@ (80051b4 <HAL_TIM_PWM_Start+0x200>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d013      	beq.n	80050fc <HAL_TIM_PWM_Start+0x148>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a37      	ldr	r2, [pc, #220]	@ (80051b8 <HAL_TIM_PWM_Start+0x204>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00e      	beq.n	80050fc <HAL_TIM_PWM_Start+0x148>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a36      	ldr	r2, [pc, #216]	@ (80051bc <HAL_TIM_PWM_Start+0x208>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d009      	beq.n	80050fc <HAL_TIM_PWM_Start+0x148>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a34      	ldr	r2, [pc, #208]	@ (80051c0 <HAL_TIM_PWM_Start+0x20c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d004      	beq.n	80050fc <HAL_TIM_PWM_Start+0x148>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a33      	ldr	r2, [pc, #204]	@ (80051c4 <HAL_TIM_PWM_Start+0x210>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d101      	bne.n	8005100 <HAL_TIM_PWM_Start+0x14c>
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <HAL_TIM_PWM_Start+0x14e>
 8005100:	2300      	movs	r3, #0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d007      	beq.n	8005116 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005114:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a25      	ldr	r2, [pc, #148]	@ (80051b0 <HAL_TIM_PWM_Start+0x1fc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d022      	beq.n	8005166 <HAL_TIM_PWM_Start+0x1b2>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005128:	d01d      	beq.n	8005166 <HAL_TIM_PWM_Start+0x1b2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a26      	ldr	r2, [pc, #152]	@ (80051c8 <HAL_TIM_PWM_Start+0x214>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d018      	beq.n	8005166 <HAL_TIM_PWM_Start+0x1b2>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a24      	ldr	r2, [pc, #144]	@ (80051cc <HAL_TIM_PWM_Start+0x218>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d013      	beq.n	8005166 <HAL_TIM_PWM_Start+0x1b2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a23      	ldr	r2, [pc, #140]	@ (80051d0 <HAL_TIM_PWM_Start+0x21c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00e      	beq.n	8005166 <HAL_TIM_PWM_Start+0x1b2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a19      	ldr	r2, [pc, #100]	@ (80051b4 <HAL_TIM_PWM_Start+0x200>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d009      	beq.n	8005166 <HAL_TIM_PWM_Start+0x1b2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a18      	ldr	r2, [pc, #96]	@ (80051b8 <HAL_TIM_PWM_Start+0x204>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d004      	beq.n	8005166 <HAL_TIM_PWM_Start+0x1b2>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a18      	ldr	r2, [pc, #96]	@ (80051c4 <HAL_TIM_PWM_Start+0x210>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d115      	bne.n	8005192 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	4b19      	ldr	r3, [pc, #100]	@ (80051d4 <HAL_TIM_PWM_Start+0x220>)
 800516e:	4013      	ands	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b06      	cmp	r3, #6
 8005176:	d015      	beq.n	80051a4 <HAL_TIM_PWM_Start+0x1f0>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800517e:	d011      	beq.n	80051a4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005190:	e008      	b.n	80051a4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0201 	orr.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	e000      	b.n	80051a6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40012c00 	.word	0x40012c00
 80051b4:	40013400 	.word	0x40013400
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40014400 	.word	0x40014400
 80051c0:	40014800 	.word	0x40014800
 80051c4:	40015000 	.word	0x40015000
 80051c8:	40000400 	.word	0x40000400
 80051cc:	40000800 	.word	0x40000800
 80051d0:	40000c00 	.word	0x40000c00
 80051d4:	00010007 	.word	0x00010007

080051d8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b0c      	cmp	r3, #12
 80051ea:	d855      	bhi.n	8005298 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80051ec:	a201      	add	r2, pc, #4	@ (adr r2, 80051f4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80051ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f2:	bf00      	nop
 80051f4:	08005229 	.word	0x08005229
 80051f8:	08005299 	.word	0x08005299
 80051fc:	08005299 	.word	0x08005299
 8005200:	08005299 	.word	0x08005299
 8005204:	08005245 	.word	0x08005245
 8005208:	08005299 	.word	0x08005299
 800520c:	08005299 	.word	0x08005299
 8005210:	08005299 	.word	0x08005299
 8005214:	08005261 	.word	0x08005261
 8005218:	08005299 	.word	0x08005299
 800521c:	08005299 	.word	0x08005299
 8005220:	08005299 	.word	0x08005299
 8005224:	0800527d 	.word	0x0800527d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005236:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523c:	4618      	mov	r0, r3
 800523e:	f7fe f937 	bl	80034b0 <HAL_DMA_Abort_IT>
      break;
 8005242:	e02c      	b.n	800529e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005252:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005258:	4618      	mov	r0, r3
 800525a:	f7fe f929 	bl	80034b0 <HAL_DMA_Abort_IT>
      break;
 800525e:	e01e      	b.n	800529e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800526e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005274:	4618      	mov	r0, r3
 8005276:	f7fe f91b 	bl	80034b0 <HAL_DMA_Abort_IT>
      break;
 800527a:	e010      	b.n	800529e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800528a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005290:	4618      	mov	r0, r3
 8005292:	f7fe f90d 	bl	80034b0 <HAL_DMA_Abort_IT>
      break;
 8005296:	e002      	b.n	800529e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	73fb      	strb	r3, [r7, #15]
      break;
 800529c:	bf00      	nop
  }

  if (status == HAL_OK)
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f040 8086 	bne.w	80053b2 <HAL_TIM_PWM_Stop_DMA+0x1da>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2200      	movs	r2, #0
 80052ac:	6839      	ldr	r1, [r7, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f001 fc96 	bl	8006be0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a40      	ldr	r2, [pc, #256]	@ (80053bc <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d018      	beq.n	80052f0 <HAL_TIM_PWM_Stop_DMA+0x118>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a3f      	ldr	r2, [pc, #252]	@ (80053c0 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d013      	beq.n	80052f0 <HAL_TIM_PWM_Stop_DMA+0x118>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a3d      	ldr	r2, [pc, #244]	@ (80053c4 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00e      	beq.n	80052f0 <HAL_TIM_PWM_Stop_DMA+0x118>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a3c      	ldr	r2, [pc, #240]	@ (80053c8 <HAL_TIM_PWM_Stop_DMA+0x1f0>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d009      	beq.n	80052f0 <HAL_TIM_PWM_Stop_DMA+0x118>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a3a      	ldr	r2, [pc, #232]	@ (80053cc <HAL_TIM_PWM_Stop_DMA+0x1f4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d004      	beq.n	80052f0 <HAL_TIM_PWM_Stop_DMA+0x118>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a39      	ldr	r2, [pc, #228]	@ (80053d0 <HAL_TIM_PWM_Stop_DMA+0x1f8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d101      	bne.n	80052f4 <HAL_TIM_PWM_Stop_DMA+0x11c>
 80052f0:	2301      	movs	r3, #1
 80052f2:	e000      	b.n	80052f6 <HAL_TIM_PWM_Stop_DMA+0x11e>
 80052f4:	2300      	movs	r3, #0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d017      	beq.n	800532a <HAL_TIM_PWM_Stop_DMA+0x152>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6a1a      	ldr	r2, [r3, #32]
 8005300:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005304:	4013      	ands	r3, r2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10f      	bne.n	800532a <HAL_TIM_PWM_Stop_DMA+0x152>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6a1a      	ldr	r2, [r3, #32]
 8005310:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005314:	4013      	ands	r3, r2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d107      	bne.n	800532a <HAL_TIM_PWM_Stop_DMA+0x152>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005328:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6a1a      	ldr	r2, [r3, #32]
 8005330:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005334:	4013      	ands	r3, r2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10f      	bne.n	800535a <HAL_TIM_PWM_Stop_DMA+0x182>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6a1a      	ldr	r2, [r3, #32]
 8005340:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005344:	4013      	ands	r3, r2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d107      	bne.n	800535a <HAL_TIM_PWM_Stop_DMA+0x182>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0201 	bic.w	r2, r2, #1
 8005358:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d104      	bne.n	800536a <HAL_TIM_PWM_Stop_DMA+0x192>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005368:	e023      	b.n	80053b2 <HAL_TIM_PWM_Stop_DMA+0x1da>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b04      	cmp	r3, #4
 800536e:	d104      	bne.n	800537a <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005378:	e01b      	b.n	80053b2 <HAL_TIM_PWM_Stop_DMA+0x1da>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b08      	cmp	r3, #8
 800537e:	d104      	bne.n	800538a <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005388:	e013      	b.n	80053b2 <HAL_TIM_PWM_Stop_DMA+0x1da>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b0c      	cmp	r3, #12
 800538e:	d104      	bne.n	800539a <HAL_TIM_PWM_Stop_DMA+0x1c2>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005398:	e00b      	b.n	80053b2 <HAL_TIM_PWM_Stop_DMA+0x1da>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b10      	cmp	r3, #16
 800539e:	d104      	bne.n	80053aa <HAL_TIM_PWM_Stop_DMA+0x1d2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053a8:	e003      	b.n	80053b2 <HAL_TIM_PWM_Stop_DMA+0x1da>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40012c00 	.word	0x40012c00
 80053c0:	40013400 	.word	0x40013400
 80053c4:	40014000 	.word	0x40014000
 80053c8:	40014400 	.word	0x40014400
 80053cc:	40014800 	.word	0x40014800
 80053d0:	40015000 	.word	0x40015000

080053d4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e04c      	b.n	8005482 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d111      	bne.n	8005418 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f001 fc15 	bl	8006c2c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d102      	bne.n	8005410 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a1f      	ldr	r2, [pc, #124]	@ (800548c <HAL_TIM_OnePulse_Init+0xb8>)
 800540e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3304      	adds	r3, #4
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f000 ff5e 	bl	80062ec <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0208 	bic.w	r2, r2, #8
 800543e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6819      	ldr	r1, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	08005491 	.word	0x08005491

08005490 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054cc:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d108      	bne.n	80054e6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054d4:	7bbb      	ldrb	r3, [r7, #14]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d105      	bne.n	80054e6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054da:	7b7b      	ldrb	r3, [r7, #13]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d102      	bne.n	80054e6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054e0:	7b3b      	ldrb	r3, [r7, #12]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d001      	beq.n	80054ea <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e059      	b.n	800559e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2202      	movs	r2, #2
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2202      	movs	r2, #2
 80054f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2202      	movs	r2, #2
 80054fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f042 0202 	orr.w	r2, r2, #2
 8005518:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0204 	orr.w	r2, r2, #4
 8005528:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2201      	movs	r2, #1
 8005530:	2100      	movs	r1, #0
 8005532:	4618      	mov	r0, r3
 8005534:	f001 fb54 	bl	8006be0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2201      	movs	r2, #1
 800553e:	2104      	movs	r1, #4
 8005540:	4618      	mov	r0, r3
 8005542:	f001 fb4d 	bl	8006be0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a17      	ldr	r2, [pc, #92]	@ (80055a8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d018      	beq.n	8005582 <HAL_TIM_OnePulse_Start_IT+0xde>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a15      	ldr	r2, [pc, #84]	@ (80055ac <HAL_TIM_OnePulse_Start_IT+0x108>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d013      	beq.n	8005582 <HAL_TIM_OnePulse_Start_IT+0xde>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a14      	ldr	r2, [pc, #80]	@ (80055b0 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00e      	beq.n	8005582 <HAL_TIM_OnePulse_Start_IT+0xde>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a12      	ldr	r2, [pc, #72]	@ (80055b4 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d009      	beq.n	8005582 <HAL_TIM_OnePulse_Start_IT+0xde>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a11      	ldr	r2, [pc, #68]	@ (80055b8 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d004      	beq.n	8005582 <HAL_TIM_OnePulse_Start_IT+0xde>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a0f      	ldr	r2, [pc, #60]	@ (80055bc <HAL_TIM_OnePulse_Start_IT+0x118>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d101      	bne.n	8005586 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8005582:	2301      	movs	r3, #1
 8005584:	e000      	b.n	8005588 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8005586:	2300      	movs	r3, #0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d007      	beq.n	800559c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800559a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	40012c00 	.word	0x40012c00
 80055ac:	40013400 	.word	0x40013400
 80055b0:	40014000 	.word	0x40014000
 80055b4:	40014400 	.word	0x40014400
 80055b8:	40014800 	.word	0x40014800
 80055bc:	40015000 	.word	0x40015000

080055c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e0a2      	b.n	800571a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d111      	bne.n	8005604 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f001 fb1f 	bl	8006c2c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d102      	bne.n	80055fc <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a4a      	ldr	r2, [pc, #296]	@ (8005724 <HAL_TIM_Encoder_Init+0x164>)
 80055fa:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800561a:	f023 0307 	bic.w	r3, r3, #7
 800561e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3304      	adds	r3, #4
 8005628:	4619      	mov	r1, r3
 800562a:	4610      	mov	r0, r2
 800562c:	f000 fe5e 	bl	80062ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005658:	f023 0303 	bic.w	r3, r3, #3
 800565c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	021b      	lsls	r3, r3, #8
 8005668:	4313      	orrs	r3, r2
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005676:	f023 030c 	bic.w	r3, r3, #12
 800567a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005682:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	021b      	lsls	r3, r3, #8
 8005692:	4313      	orrs	r3, r2
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	011a      	lsls	r2, r3, #4
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	031b      	lsls	r3, r3, #12
 80056a6:	4313      	orrs	r3, r2
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80056b4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80056bc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	4313      	orrs	r3, r2
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	08002985 	.word	0x08002985

08005728 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005738:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005740:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005748:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005750:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d110      	bne.n	800577a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d102      	bne.n	8005764 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800575e:	7b7b      	ldrb	r3, [r7, #13]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d001      	beq.n	8005768 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e069      	b.n	800583c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005778:	e031      	b.n	80057de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b04      	cmp	r3, #4
 800577e:	d110      	bne.n	80057a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005780:	7bbb      	ldrb	r3, [r7, #14]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d102      	bne.n	800578c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005786:	7b3b      	ldrb	r3, [r7, #12]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d001      	beq.n	8005790 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e055      	b.n	800583c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057a0:	e01d      	b.n	80057de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d108      	bne.n	80057ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057a8:	7bbb      	ldrb	r3, [r7, #14]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d105      	bne.n	80057ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057ae:	7b7b      	ldrb	r3, [r7, #13]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d102      	bne.n	80057ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057b4:	7b3b      	ldrb	r3, [r7, #12]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d001      	beq.n	80057be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e03e      	b.n	800583c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2202      	movs	r2, #2
 80057c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2202      	movs	r2, #2
 80057ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2202      	movs	r2, #2
 80057d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2202      	movs	r2, #2
 80057da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <HAL_TIM_Encoder_Start+0xc4>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d008      	beq.n	80057fc <HAL_TIM_Encoder_Start+0xd4>
 80057ea:	e00f      	b.n	800580c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2201      	movs	r2, #1
 80057f2:	2100      	movs	r1, #0
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 f9f3 	bl	8006be0 <TIM_CCxChannelCmd>
      break;
 80057fa:	e016      	b.n	800582a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2201      	movs	r2, #1
 8005802:	2104      	movs	r1, #4
 8005804:	4618      	mov	r0, r3
 8005806:	f001 f9eb 	bl	8006be0 <TIM_CCxChannelCmd>
      break;
 800580a:	e00e      	b.n	800582a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2201      	movs	r2, #1
 8005812:	2100      	movs	r1, #0
 8005814:	4618      	mov	r0, r3
 8005816:	f001 f9e3 	bl	8006be0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2201      	movs	r2, #1
 8005820:	2104      	movs	r1, #4
 8005822:	4618      	mov	r0, r3
 8005824:	f001 f9dc 	bl	8006be0 <TIM_CCxChannelCmd>
      break;
 8005828:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f042 0201 	orr.w	r2, r2, #1
 8005838:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d026      	beq.n	80058b4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d021      	beq.n	80058b4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0202 	mvn.w	r2, #2
 8005878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d005      	beq.n	800589a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	4798      	blx	r3
 8005898:	e009      	b.n	80058ae <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d026      	beq.n	800590c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d021      	beq.n	800590c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0204 	mvn.w	r2, #4
 80058d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	4798      	blx	r3
 80058f0:	e009      	b.n	8005906 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d026      	beq.n	8005964 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d021      	beq.n	8005964 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0208 	mvn.w	r2, #8
 8005928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2204      	movs	r2, #4
 800592e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d005      	beq.n	800594a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	4798      	blx	r3
 8005948:	e009      	b.n	800595e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f003 0310 	and.w	r3, r3, #16
 800596a:	2b00      	cmp	r3, #0
 800596c:	d026      	beq.n	80059bc <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f003 0310 	and.w	r3, r3, #16
 8005974:	2b00      	cmp	r3, #0
 8005976:	d021      	beq.n	80059bc <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f06f 0210 	mvn.w	r2, #16
 8005980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2208      	movs	r2, #8
 8005986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	4798      	blx	r3
 80059a0:	e009      	b.n	80059b6 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00e      	beq.n	80059e4 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d009      	beq.n	80059e4 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f06f 0201 	mvn.w	r2, #1
 80059d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d104      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00e      	beq.n	8005a16 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d009      	beq.n	8005a16 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00e      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d009      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00e      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d009      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00e      	beq.n	8005a8e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d009      	beq.n	8005a8e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f06f 0220 	mvn.w	r2, #32
 8005a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00e      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00e      	beq.n	8005ade <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d009      	beq.n	8005ade <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00e      	beq.n	8005b06 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00e      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d009      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b2e:	bf00      	nop
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b52:	2302      	movs	r3, #2
 8005b54:	e0ff      	b.n	8005d56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b14      	cmp	r3, #20
 8005b62:	f200 80f0 	bhi.w	8005d46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b66:	a201      	add	r2, pc, #4	@ (adr r2, 8005b6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005bc1 	.word	0x08005bc1
 8005b70:	08005d47 	.word	0x08005d47
 8005b74:	08005d47 	.word	0x08005d47
 8005b78:	08005d47 	.word	0x08005d47
 8005b7c:	08005c01 	.word	0x08005c01
 8005b80:	08005d47 	.word	0x08005d47
 8005b84:	08005d47 	.word	0x08005d47
 8005b88:	08005d47 	.word	0x08005d47
 8005b8c:	08005c43 	.word	0x08005c43
 8005b90:	08005d47 	.word	0x08005d47
 8005b94:	08005d47 	.word	0x08005d47
 8005b98:	08005d47 	.word	0x08005d47
 8005b9c:	08005c83 	.word	0x08005c83
 8005ba0:	08005d47 	.word	0x08005d47
 8005ba4:	08005d47 	.word	0x08005d47
 8005ba8:	08005d47 	.word	0x08005d47
 8005bac:	08005cc5 	.word	0x08005cc5
 8005bb0:	08005d47 	.word	0x08005d47
 8005bb4:	08005d47 	.word	0x08005d47
 8005bb8:	08005d47 	.word	0x08005d47
 8005bbc:	08005d05 	.word	0x08005d05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fc44 	bl	8006454 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0208 	orr.w	r2, r2, #8
 8005bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0204 	bic.w	r2, r2, #4
 8005bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6999      	ldr	r1, [r3, #24]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	691a      	ldr	r2, [r3, #16]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	619a      	str	r2, [r3, #24]
      break;
 8005bfe:	e0a5      	b.n	8005d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fcbe 	bl	8006588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6999      	ldr	r1, [r3, #24]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	021a      	lsls	r2, r3, #8
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	619a      	str	r2, [r3, #24]
      break;
 8005c40:	e084      	b.n	8005d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fd31 	bl	80066b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69da      	ldr	r2, [r3, #28]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f042 0208 	orr.w	r2, r2, #8
 8005c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69da      	ldr	r2, [r3, #28]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0204 	bic.w	r2, r2, #4
 8005c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69d9      	ldr	r1, [r3, #28]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	691a      	ldr	r2, [r3, #16]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	61da      	str	r2, [r3, #28]
      break;
 8005c80:	e064      	b.n	8005d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fda3 	bl	80067d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69da      	ldr	r2, [r3, #28]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69da      	ldr	r2, [r3, #28]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69d9      	ldr	r1, [r3, #28]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	021a      	lsls	r2, r3, #8
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	61da      	str	r2, [r3, #28]
      break;
 8005cc2:	e043      	b.n	8005d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fe16 	bl	80068fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0208 	orr.w	r2, r2, #8
 8005cde:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0204 	bic.w	r2, r2, #4
 8005cee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	691a      	ldr	r2, [r3, #16]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005d02:	e023      	b.n	8005d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68b9      	ldr	r1, [r7, #8]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fe60 	bl	80069d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d2e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	021a      	lsls	r2, r3, #8
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005d44:	e002      	b.n	8005d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	75fb      	strb	r3, [r7, #23]
      break;
 8005d4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop

08005d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_TIM_ConfigClockSource+0x1c>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e0f6      	b.n	8005f6a <HAL_TIM_ConfigClockSource+0x20a>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005d9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005da6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a6f      	ldr	r2, [pc, #444]	@ (8005f74 <HAL_TIM_ConfigClockSource+0x214>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	f000 80c1 	beq.w	8005f3e <HAL_TIM_ConfigClockSource+0x1de>
 8005dbc:	4a6d      	ldr	r2, [pc, #436]	@ (8005f74 <HAL_TIM_ConfigClockSource+0x214>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	f200 80c6 	bhi.w	8005f50 <HAL_TIM_ConfigClockSource+0x1f0>
 8005dc4:	4a6c      	ldr	r2, [pc, #432]	@ (8005f78 <HAL_TIM_ConfigClockSource+0x218>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	f000 80b9 	beq.w	8005f3e <HAL_TIM_ConfigClockSource+0x1de>
 8005dcc:	4a6a      	ldr	r2, [pc, #424]	@ (8005f78 <HAL_TIM_ConfigClockSource+0x218>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	f200 80be 	bhi.w	8005f50 <HAL_TIM_ConfigClockSource+0x1f0>
 8005dd4:	4a69      	ldr	r2, [pc, #420]	@ (8005f7c <HAL_TIM_ConfigClockSource+0x21c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	f000 80b1 	beq.w	8005f3e <HAL_TIM_ConfigClockSource+0x1de>
 8005ddc:	4a67      	ldr	r2, [pc, #412]	@ (8005f7c <HAL_TIM_ConfigClockSource+0x21c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	f200 80b6 	bhi.w	8005f50 <HAL_TIM_ConfigClockSource+0x1f0>
 8005de4:	4a66      	ldr	r2, [pc, #408]	@ (8005f80 <HAL_TIM_ConfigClockSource+0x220>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	f000 80a9 	beq.w	8005f3e <HAL_TIM_ConfigClockSource+0x1de>
 8005dec:	4a64      	ldr	r2, [pc, #400]	@ (8005f80 <HAL_TIM_ConfigClockSource+0x220>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	f200 80ae 	bhi.w	8005f50 <HAL_TIM_ConfigClockSource+0x1f0>
 8005df4:	4a63      	ldr	r2, [pc, #396]	@ (8005f84 <HAL_TIM_ConfigClockSource+0x224>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	f000 80a1 	beq.w	8005f3e <HAL_TIM_ConfigClockSource+0x1de>
 8005dfc:	4a61      	ldr	r2, [pc, #388]	@ (8005f84 <HAL_TIM_ConfigClockSource+0x224>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	f200 80a6 	bhi.w	8005f50 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e04:	4a60      	ldr	r2, [pc, #384]	@ (8005f88 <HAL_TIM_ConfigClockSource+0x228>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	f000 8099 	beq.w	8005f3e <HAL_TIM_ConfigClockSource+0x1de>
 8005e0c:	4a5e      	ldr	r2, [pc, #376]	@ (8005f88 <HAL_TIM_ConfigClockSource+0x228>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	f200 809e 	bhi.w	8005f50 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005e18:	f000 8091 	beq.w	8005f3e <HAL_TIM_ConfigClockSource+0x1de>
 8005e1c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005e20:	f200 8096 	bhi.w	8005f50 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e28:	f000 8089 	beq.w	8005f3e <HAL_TIM_ConfigClockSource+0x1de>
 8005e2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e30:	f200 808e 	bhi.w	8005f50 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e38:	d03e      	beq.n	8005eb8 <HAL_TIM_ConfigClockSource+0x158>
 8005e3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e3e:	f200 8087 	bhi.w	8005f50 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e46:	f000 8086 	beq.w	8005f56 <HAL_TIM_ConfigClockSource+0x1f6>
 8005e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e4e:	d87f      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e50:	2b70      	cmp	r3, #112	@ 0x70
 8005e52:	d01a      	beq.n	8005e8a <HAL_TIM_ConfigClockSource+0x12a>
 8005e54:	2b70      	cmp	r3, #112	@ 0x70
 8005e56:	d87b      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e58:	2b60      	cmp	r3, #96	@ 0x60
 8005e5a:	d050      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x19e>
 8005e5c:	2b60      	cmp	r3, #96	@ 0x60
 8005e5e:	d877      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e60:	2b50      	cmp	r3, #80	@ 0x50
 8005e62:	d03c      	beq.n	8005ede <HAL_TIM_ConfigClockSource+0x17e>
 8005e64:	2b50      	cmp	r3, #80	@ 0x50
 8005e66:	d873      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e68:	2b40      	cmp	r3, #64	@ 0x40
 8005e6a:	d058      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0x1be>
 8005e6c:	2b40      	cmp	r3, #64	@ 0x40
 8005e6e:	d86f      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e70:	2b30      	cmp	r3, #48	@ 0x30
 8005e72:	d064      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x1de>
 8005e74:	2b30      	cmp	r3, #48	@ 0x30
 8005e76:	d86b      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e78:	2b20      	cmp	r3, #32
 8005e7a:	d060      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x1de>
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d867      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d05c      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x1de>
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d05a      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x1de>
 8005e88:	e062      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e9a:	f000 fe81 	bl	8006ba0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005eac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	609a      	str	r2, [r3, #8]
      break;
 8005eb6:	e04f      	b.n	8005f58 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ec8:	f000 fe6a 	bl	8006ba0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005eda:	609a      	str	r2, [r3, #8]
      break;
 8005edc:	e03c      	b.n	8005f58 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eea:	461a      	mov	r2, r3
 8005eec:	f000 fddc 	bl	8006aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2150      	movs	r1, #80	@ 0x50
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fe35 	bl	8006b66 <TIM_ITRx_SetConfig>
      break;
 8005efc:	e02c      	b.n	8005f58 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f000 fdfb 	bl	8006b06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2160      	movs	r1, #96	@ 0x60
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fe25 	bl	8006b66 <TIM_ITRx_SetConfig>
      break;
 8005f1c:	e01c      	b.n	8005f58 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f000 fdbc 	bl	8006aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2140      	movs	r1, #64	@ 0x40
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fe15 	bl	8006b66 <TIM_ITRx_SetConfig>
      break;
 8005f3c:	e00c      	b.n	8005f58 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4619      	mov	r1, r3
 8005f48:	4610      	mov	r0, r2
 8005f4a:	f000 fe0c 	bl	8006b66 <TIM_ITRx_SetConfig>
      break;
 8005f4e:	e003      	b.n	8005f58 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	73fb      	strb	r3, [r7, #15]
      break;
 8005f54:	e000      	b.n	8005f58 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	00100070 	.word	0x00100070
 8005f78:	00100060 	.word	0x00100060
 8005f7c:	00100050 	.word	0x00100050
 8005f80:	00100040 	.word	0x00100040
 8005f84:	00100030 	.word	0x00100030
 8005f88:	00100020 	.word	0x00100020

08005f8c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	460b      	mov	r3, r1
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e14a      	b.n	80062de <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b01      	cmp	r3, #1
 8006052:	f040 80dd 	bne.w	8006210 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8006056:	7afb      	ldrb	r3, [r7, #11]
 8006058:	2b1f      	cmp	r3, #31
 800605a:	f200 80d6 	bhi.w	800620a <HAL_TIM_RegisterCallback+0x1de>
 800605e:	a201      	add	r2, pc, #4	@ (adr r2, 8006064 <HAL_TIM_RegisterCallback+0x38>)
 8006060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006064:	080060e5 	.word	0x080060e5
 8006068:	080060ed 	.word	0x080060ed
 800606c:	080060f5 	.word	0x080060f5
 8006070:	080060fd 	.word	0x080060fd
 8006074:	08006105 	.word	0x08006105
 8006078:	0800610d 	.word	0x0800610d
 800607c:	08006115 	.word	0x08006115
 8006080:	0800611d 	.word	0x0800611d
 8006084:	08006125 	.word	0x08006125
 8006088:	0800612d 	.word	0x0800612d
 800608c:	08006135 	.word	0x08006135
 8006090:	0800613d 	.word	0x0800613d
 8006094:	08006145 	.word	0x08006145
 8006098:	0800614d 	.word	0x0800614d
 800609c:	08006157 	.word	0x08006157
 80060a0:	08006161 	.word	0x08006161
 80060a4:	0800616b 	.word	0x0800616b
 80060a8:	08006175 	.word	0x08006175
 80060ac:	0800617f 	.word	0x0800617f
 80060b0:	08006189 	.word	0x08006189
 80060b4:	08006193 	.word	0x08006193
 80060b8:	0800619d 	.word	0x0800619d
 80060bc:	080061a7 	.word	0x080061a7
 80060c0:	080061b1 	.word	0x080061b1
 80060c4:	080061bb 	.word	0x080061bb
 80060c8:	080061c5 	.word	0x080061c5
 80060cc:	080061cf 	.word	0x080061cf
 80060d0:	080061d9 	.word	0x080061d9
 80060d4:	080061e3 	.word	0x080061e3
 80060d8:	080061ed 	.word	0x080061ed
 80060dc:	080061f7 	.word	0x080061f7
 80060e0:	08006201 	.word	0x08006201
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80060ea:	e0f7      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80060f2:	e0f3      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80060fa:	e0ef      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8006102:	e0eb      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800610a:	e0e7      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8006112:	e0e3      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800611a:	e0df      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006122:	e0db      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800612a:	e0d7      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006132:	e0d3      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800613a:	e0cf      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006142:	e0cb      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800614a:	e0c7      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8006154:	e0c2      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800615e:	e0bd      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8006168:	e0b8      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8006172:	e0b3      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800617c:	e0ae      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8006186:	e0a9      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8006190:	e0a4      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800619a:	e09f      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80061a4:	e09a      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80061ae:	e095      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80061b8:	e090      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80061c2:	e08b      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80061cc:	e086      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80061d6:	e081      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80061e0:	e07c      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80061ea:	e077      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80061f4:	e072      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80061fe:	e06d      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8006208:	e068      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	75fb      	strb	r3, [r7, #23]
        break;
 800620e:	e065      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d15d      	bne.n	80062d8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800621c:	7afb      	ldrb	r3, [r7, #11]
 800621e:	2b0d      	cmp	r3, #13
 8006220:	d857      	bhi.n	80062d2 <HAL_TIM_RegisterCallback+0x2a6>
 8006222:	a201      	add	r2, pc, #4	@ (adr r2, 8006228 <HAL_TIM_RegisterCallback+0x1fc>)
 8006224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006228:	08006261 	.word	0x08006261
 800622c:	08006269 	.word	0x08006269
 8006230:	08006271 	.word	0x08006271
 8006234:	08006279 	.word	0x08006279
 8006238:	08006281 	.word	0x08006281
 800623c:	08006289 	.word	0x08006289
 8006240:	08006291 	.word	0x08006291
 8006244:	08006299 	.word	0x08006299
 8006248:	080062a1 	.word	0x080062a1
 800624c:	080062a9 	.word	0x080062a9
 8006250:	080062b1 	.word	0x080062b1
 8006254:	080062b9 	.word	0x080062b9
 8006258:	080062c1 	.word	0x080062c1
 800625c:	080062c9 	.word	0x080062c9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8006266:	e039      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800626e:	e035      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006276:	e031      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800627e:	e02d      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006286:	e029      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800628e:	e025      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006296:	e021      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800629e:	e01d      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80062a6:	e019      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80062ae:	e015      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80062b6:	e011      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80062be:	e00d      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80062c6:	e009      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80062d0:	e004      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	75fb      	strb	r3, [r7, #23]
        break;
 80062d6:	e001      	b.n	80062dc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop

080062ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a4c      	ldr	r2, [pc, #304]	@ (8006430 <TIM_Base_SetConfig+0x144>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d017      	beq.n	8006334 <TIM_Base_SetConfig+0x48>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800630a:	d013      	beq.n	8006334 <TIM_Base_SetConfig+0x48>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a49      	ldr	r2, [pc, #292]	@ (8006434 <TIM_Base_SetConfig+0x148>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d00f      	beq.n	8006334 <TIM_Base_SetConfig+0x48>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a48      	ldr	r2, [pc, #288]	@ (8006438 <TIM_Base_SetConfig+0x14c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d00b      	beq.n	8006334 <TIM_Base_SetConfig+0x48>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a47      	ldr	r2, [pc, #284]	@ (800643c <TIM_Base_SetConfig+0x150>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d007      	beq.n	8006334 <TIM_Base_SetConfig+0x48>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a46      	ldr	r2, [pc, #280]	@ (8006440 <TIM_Base_SetConfig+0x154>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d003      	beq.n	8006334 <TIM_Base_SetConfig+0x48>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a45      	ldr	r2, [pc, #276]	@ (8006444 <TIM_Base_SetConfig+0x158>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d108      	bne.n	8006346 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800633a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a39      	ldr	r2, [pc, #228]	@ (8006430 <TIM_Base_SetConfig+0x144>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d023      	beq.n	8006396 <TIM_Base_SetConfig+0xaa>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006354:	d01f      	beq.n	8006396 <TIM_Base_SetConfig+0xaa>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a36      	ldr	r2, [pc, #216]	@ (8006434 <TIM_Base_SetConfig+0x148>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d01b      	beq.n	8006396 <TIM_Base_SetConfig+0xaa>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a35      	ldr	r2, [pc, #212]	@ (8006438 <TIM_Base_SetConfig+0x14c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d017      	beq.n	8006396 <TIM_Base_SetConfig+0xaa>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a34      	ldr	r2, [pc, #208]	@ (800643c <TIM_Base_SetConfig+0x150>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d013      	beq.n	8006396 <TIM_Base_SetConfig+0xaa>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a33      	ldr	r2, [pc, #204]	@ (8006440 <TIM_Base_SetConfig+0x154>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00f      	beq.n	8006396 <TIM_Base_SetConfig+0xaa>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a33      	ldr	r2, [pc, #204]	@ (8006448 <TIM_Base_SetConfig+0x15c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00b      	beq.n	8006396 <TIM_Base_SetConfig+0xaa>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a32      	ldr	r2, [pc, #200]	@ (800644c <TIM_Base_SetConfig+0x160>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d007      	beq.n	8006396 <TIM_Base_SetConfig+0xaa>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a31      	ldr	r2, [pc, #196]	@ (8006450 <TIM_Base_SetConfig+0x164>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d003      	beq.n	8006396 <TIM_Base_SetConfig+0xaa>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a2c      	ldr	r2, [pc, #176]	@ (8006444 <TIM_Base_SetConfig+0x158>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d108      	bne.n	80063a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800639c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a18      	ldr	r2, [pc, #96]	@ (8006430 <TIM_Base_SetConfig+0x144>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d013      	beq.n	80063fc <TIM_Base_SetConfig+0x110>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006440 <TIM_Base_SetConfig+0x154>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00f      	beq.n	80063fc <TIM_Base_SetConfig+0x110>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a1a      	ldr	r2, [pc, #104]	@ (8006448 <TIM_Base_SetConfig+0x15c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d00b      	beq.n	80063fc <TIM_Base_SetConfig+0x110>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a19      	ldr	r2, [pc, #100]	@ (800644c <TIM_Base_SetConfig+0x160>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d007      	beq.n	80063fc <TIM_Base_SetConfig+0x110>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a18      	ldr	r2, [pc, #96]	@ (8006450 <TIM_Base_SetConfig+0x164>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d003      	beq.n	80063fc <TIM_Base_SetConfig+0x110>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a13      	ldr	r2, [pc, #76]	@ (8006444 <TIM_Base_SetConfig+0x158>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d103      	bne.n	8006404 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	691a      	ldr	r2, [r3, #16]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b01      	cmp	r3, #1
 8006414:	d105      	bne.n	8006422 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f023 0201 	bic.w	r2, r3, #1
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	611a      	str	r2, [r3, #16]
  }
}
 8006422:	bf00      	nop
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	40012c00 	.word	0x40012c00
 8006434:	40000400 	.word	0x40000400
 8006438:	40000800 	.word	0x40000800
 800643c:	40000c00 	.word	0x40000c00
 8006440:	40013400 	.word	0x40013400
 8006444:	40015000 	.word	0x40015000
 8006448:	40014000 	.word	0x40014000
 800644c:	40014400 	.word	0x40014400
 8006450:	40014800 	.word	0x40014800

08006454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	f023 0201 	bic.w	r2, r3, #1
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0303 	bic.w	r3, r3, #3
 800648e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f023 0302 	bic.w	r3, r3, #2
 80064a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a30      	ldr	r2, [pc, #192]	@ (8006570 <TIM_OC1_SetConfig+0x11c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d013      	beq.n	80064dc <TIM_OC1_SetConfig+0x88>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a2f      	ldr	r2, [pc, #188]	@ (8006574 <TIM_OC1_SetConfig+0x120>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00f      	beq.n	80064dc <TIM_OC1_SetConfig+0x88>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a2e      	ldr	r2, [pc, #184]	@ (8006578 <TIM_OC1_SetConfig+0x124>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d00b      	beq.n	80064dc <TIM_OC1_SetConfig+0x88>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a2d      	ldr	r2, [pc, #180]	@ (800657c <TIM_OC1_SetConfig+0x128>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d007      	beq.n	80064dc <TIM_OC1_SetConfig+0x88>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006580 <TIM_OC1_SetConfig+0x12c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d003      	beq.n	80064dc <TIM_OC1_SetConfig+0x88>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a2b      	ldr	r2, [pc, #172]	@ (8006584 <TIM_OC1_SetConfig+0x130>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d10c      	bne.n	80064f6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f023 0308 	bic.w	r3, r3, #8
 80064e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f023 0304 	bic.w	r3, r3, #4
 80064f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006570 <TIM_OC1_SetConfig+0x11c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <TIM_OC1_SetConfig+0xd2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a1c      	ldr	r2, [pc, #112]	@ (8006574 <TIM_OC1_SetConfig+0x120>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00f      	beq.n	8006526 <TIM_OC1_SetConfig+0xd2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a1b      	ldr	r2, [pc, #108]	@ (8006578 <TIM_OC1_SetConfig+0x124>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00b      	beq.n	8006526 <TIM_OC1_SetConfig+0xd2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a1a      	ldr	r2, [pc, #104]	@ (800657c <TIM_OC1_SetConfig+0x128>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d007      	beq.n	8006526 <TIM_OC1_SetConfig+0xd2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a19      	ldr	r2, [pc, #100]	@ (8006580 <TIM_OC1_SetConfig+0x12c>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d003      	beq.n	8006526 <TIM_OC1_SetConfig+0xd2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a18      	ldr	r2, [pc, #96]	@ (8006584 <TIM_OC1_SetConfig+0x130>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d111      	bne.n	800654a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800652c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	4313      	orrs	r3, r2
 800653e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	621a      	str	r2, [r3, #32]
}
 8006564:	bf00      	nop
 8006566:	371c      	adds	r7, #28
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	40012c00 	.word	0x40012c00
 8006574:	40013400 	.word	0x40013400
 8006578:	40014000 	.word	0x40014000
 800657c:	40014400 	.word	0x40014400
 8006580:	40014800 	.word	0x40014800
 8006584:	40015000 	.word	0x40015000

08006588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	f023 0210 	bic.w	r2, r3, #16
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	021b      	lsls	r3, r3, #8
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f023 0320 	bic.w	r3, r3, #32
 80065d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006698 <TIM_OC2_SetConfig+0x110>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d007      	beq.n	80065fc <TIM_OC2_SetConfig+0x74>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a2b      	ldr	r2, [pc, #172]	@ (800669c <TIM_OC2_SetConfig+0x114>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d003      	beq.n	80065fc <TIM_OC2_SetConfig+0x74>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a2a      	ldr	r2, [pc, #168]	@ (80066a0 <TIM_OC2_SetConfig+0x118>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d10d      	bne.n	8006618 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006616:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a1f      	ldr	r2, [pc, #124]	@ (8006698 <TIM_OC2_SetConfig+0x110>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d013      	beq.n	8006648 <TIM_OC2_SetConfig+0xc0>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a1e      	ldr	r2, [pc, #120]	@ (800669c <TIM_OC2_SetConfig+0x114>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00f      	beq.n	8006648 <TIM_OC2_SetConfig+0xc0>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a1e      	ldr	r2, [pc, #120]	@ (80066a4 <TIM_OC2_SetConfig+0x11c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d00b      	beq.n	8006648 <TIM_OC2_SetConfig+0xc0>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a1d      	ldr	r2, [pc, #116]	@ (80066a8 <TIM_OC2_SetConfig+0x120>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d007      	beq.n	8006648 <TIM_OC2_SetConfig+0xc0>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a1c      	ldr	r2, [pc, #112]	@ (80066ac <TIM_OC2_SetConfig+0x124>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d003      	beq.n	8006648 <TIM_OC2_SetConfig+0xc0>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a17      	ldr	r2, [pc, #92]	@ (80066a0 <TIM_OC2_SetConfig+0x118>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d113      	bne.n	8006670 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800664e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006656:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4313      	orrs	r3, r2
 8006662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	4313      	orrs	r3, r2
 800666e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	621a      	str	r2, [r3, #32]
}
 800668a:	bf00      	nop
 800668c:	371c      	adds	r7, #28
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	40012c00 	.word	0x40012c00
 800669c:	40013400 	.word	0x40013400
 80066a0:	40015000 	.word	0x40015000
 80066a4:	40014000 	.word	0x40014000
 80066a8:	40014400 	.word	0x40014400
 80066ac:	40014800 	.word	0x40014800

080066b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0303 	bic.w	r3, r3, #3
 80066ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	021b      	lsls	r3, r3, #8
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a2b      	ldr	r2, [pc, #172]	@ (80067bc <TIM_OC3_SetConfig+0x10c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d007      	beq.n	8006722 <TIM_OC3_SetConfig+0x72>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a2a      	ldr	r2, [pc, #168]	@ (80067c0 <TIM_OC3_SetConfig+0x110>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d003      	beq.n	8006722 <TIM_OC3_SetConfig+0x72>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a29      	ldr	r2, [pc, #164]	@ (80067c4 <TIM_OC3_SetConfig+0x114>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d10d      	bne.n	800673e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006728:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	021b      	lsls	r3, r3, #8
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	4313      	orrs	r3, r2
 8006734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800673c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a1e      	ldr	r2, [pc, #120]	@ (80067bc <TIM_OC3_SetConfig+0x10c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d013      	beq.n	800676e <TIM_OC3_SetConfig+0xbe>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a1d      	ldr	r2, [pc, #116]	@ (80067c0 <TIM_OC3_SetConfig+0x110>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d00f      	beq.n	800676e <TIM_OC3_SetConfig+0xbe>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a1d      	ldr	r2, [pc, #116]	@ (80067c8 <TIM_OC3_SetConfig+0x118>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00b      	beq.n	800676e <TIM_OC3_SetConfig+0xbe>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a1c      	ldr	r2, [pc, #112]	@ (80067cc <TIM_OC3_SetConfig+0x11c>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d007      	beq.n	800676e <TIM_OC3_SetConfig+0xbe>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a1b      	ldr	r2, [pc, #108]	@ (80067d0 <TIM_OC3_SetConfig+0x120>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d003      	beq.n	800676e <TIM_OC3_SetConfig+0xbe>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a16      	ldr	r2, [pc, #88]	@ (80067c4 <TIM_OC3_SetConfig+0x114>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d113      	bne.n	8006796 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800677c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	011b      	lsls	r3, r3, #4
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4313      	orrs	r3, r2
 8006788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	4313      	orrs	r3, r2
 8006794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	621a      	str	r2, [r3, #32]
}
 80067b0:	bf00      	nop
 80067b2:	371c      	adds	r7, #28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	40012c00 	.word	0x40012c00
 80067c0:	40013400 	.word	0x40013400
 80067c4:	40015000 	.word	0x40015000
 80067c8:	40014000 	.word	0x40014000
 80067cc:	40014400 	.word	0x40014400
 80067d0:	40014800 	.word	0x40014800

080067d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006802:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800680e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	021b      	lsls	r3, r3, #8
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006822:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	031b      	lsls	r3, r3, #12
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a2c      	ldr	r2, [pc, #176]	@ (80068e4 <TIM_OC4_SetConfig+0x110>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d007      	beq.n	8006848 <TIM_OC4_SetConfig+0x74>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a2b      	ldr	r2, [pc, #172]	@ (80068e8 <TIM_OC4_SetConfig+0x114>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d003      	beq.n	8006848 <TIM_OC4_SetConfig+0x74>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a2a      	ldr	r2, [pc, #168]	@ (80068ec <TIM_OC4_SetConfig+0x118>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d10d      	bne.n	8006864 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800684e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	031b      	lsls	r3, r3, #12
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	4313      	orrs	r3, r2
 800685a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006862:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a1f      	ldr	r2, [pc, #124]	@ (80068e4 <TIM_OC4_SetConfig+0x110>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d013      	beq.n	8006894 <TIM_OC4_SetConfig+0xc0>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a1e      	ldr	r2, [pc, #120]	@ (80068e8 <TIM_OC4_SetConfig+0x114>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00f      	beq.n	8006894 <TIM_OC4_SetConfig+0xc0>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a1e      	ldr	r2, [pc, #120]	@ (80068f0 <TIM_OC4_SetConfig+0x11c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00b      	beq.n	8006894 <TIM_OC4_SetConfig+0xc0>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a1d      	ldr	r2, [pc, #116]	@ (80068f4 <TIM_OC4_SetConfig+0x120>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d007      	beq.n	8006894 <TIM_OC4_SetConfig+0xc0>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a1c      	ldr	r2, [pc, #112]	@ (80068f8 <TIM_OC4_SetConfig+0x124>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d003      	beq.n	8006894 <TIM_OC4_SetConfig+0xc0>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a17      	ldr	r2, [pc, #92]	@ (80068ec <TIM_OC4_SetConfig+0x118>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d113      	bne.n	80068bc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800689a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068a2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	019b      	lsls	r3, r3, #6
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	019b      	lsls	r3, r3, #6
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	621a      	str	r2, [r3, #32]
}
 80068d6:	bf00      	nop
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40012c00 	.word	0x40012c00
 80068e8:	40013400 	.word	0x40013400
 80068ec:	40015000 	.word	0x40015000
 80068f0:	40014000 	.word	0x40014000
 80068f4:	40014400 	.word	0x40014400
 80068f8:	40014800 	.word	0x40014800

080068fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800692a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800692e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006940:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	041b      	lsls	r3, r3, #16
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4313      	orrs	r3, r2
 800694c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a19      	ldr	r2, [pc, #100]	@ (80069b8 <TIM_OC5_SetConfig+0xbc>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d013      	beq.n	800697e <TIM_OC5_SetConfig+0x82>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a18      	ldr	r2, [pc, #96]	@ (80069bc <TIM_OC5_SetConfig+0xc0>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00f      	beq.n	800697e <TIM_OC5_SetConfig+0x82>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a17      	ldr	r2, [pc, #92]	@ (80069c0 <TIM_OC5_SetConfig+0xc4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00b      	beq.n	800697e <TIM_OC5_SetConfig+0x82>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a16      	ldr	r2, [pc, #88]	@ (80069c4 <TIM_OC5_SetConfig+0xc8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d007      	beq.n	800697e <TIM_OC5_SetConfig+0x82>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a15      	ldr	r2, [pc, #84]	@ (80069c8 <TIM_OC5_SetConfig+0xcc>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d003      	beq.n	800697e <TIM_OC5_SetConfig+0x82>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a14      	ldr	r2, [pc, #80]	@ (80069cc <TIM_OC5_SetConfig+0xd0>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d109      	bne.n	8006992 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006984:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	021b      	lsls	r3, r3, #8
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	4313      	orrs	r3, r2
 8006990:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	621a      	str	r2, [r3, #32]
}
 80069ac:	bf00      	nop
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	40012c00 	.word	0x40012c00
 80069bc:	40013400 	.word	0x40013400
 80069c0:	40014000 	.word	0x40014000
 80069c4:	40014400 	.word	0x40014400
 80069c8:	40014800 	.word	0x40014800
 80069cc:	40015000 	.word	0x40015000

080069d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	021b      	lsls	r3, r3, #8
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	051b      	lsls	r3, r3, #20
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a1a      	ldr	r2, [pc, #104]	@ (8006a90 <TIM_OC6_SetConfig+0xc0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d013      	beq.n	8006a54 <TIM_OC6_SetConfig+0x84>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a19      	ldr	r2, [pc, #100]	@ (8006a94 <TIM_OC6_SetConfig+0xc4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00f      	beq.n	8006a54 <TIM_OC6_SetConfig+0x84>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a18      	ldr	r2, [pc, #96]	@ (8006a98 <TIM_OC6_SetConfig+0xc8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00b      	beq.n	8006a54 <TIM_OC6_SetConfig+0x84>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a17      	ldr	r2, [pc, #92]	@ (8006a9c <TIM_OC6_SetConfig+0xcc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d007      	beq.n	8006a54 <TIM_OC6_SetConfig+0x84>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a16      	ldr	r2, [pc, #88]	@ (8006aa0 <TIM_OC6_SetConfig+0xd0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d003      	beq.n	8006a54 <TIM_OC6_SetConfig+0x84>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a15      	ldr	r2, [pc, #84]	@ (8006aa4 <TIM_OC6_SetConfig+0xd4>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d109      	bne.n	8006a68 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	029b      	lsls	r3, r3, #10
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	621a      	str	r2, [r3, #32]
}
 8006a82:	bf00      	nop
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	40012c00 	.word	0x40012c00
 8006a94:	40013400 	.word	0x40013400
 8006a98:	40014000 	.word	0x40014000
 8006a9c:	40014400 	.word	0x40014400
 8006aa0:	40014800 	.word	0x40014800
 8006aa4:	40015000 	.word	0x40015000

08006aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	f023 0201 	bic.w	r2, r3, #1
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	011b      	lsls	r3, r3, #4
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f023 030a 	bic.w	r3, r3, #10
 8006ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	621a      	str	r2, [r3, #32]
}
 8006afa:	bf00      	nop
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b087      	sub	sp, #28
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	60b9      	str	r1, [r7, #8]
 8006b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	f023 0210 	bic.w	r2, r3, #16
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	031b      	lsls	r3, r3, #12
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	011b      	lsls	r3, r3, #4
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	621a      	str	r2, [r3, #32]
}
 8006b5a:	bf00      	nop
 8006b5c:	371c      	adds	r7, #28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b085      	sub	sp, #20
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006b7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	f043 0307 	orr.w	r3, r3, #7
 8006b8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	609a      	str	r2, [r3, #8]
}
 8006b94:	bf00      	nop
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	021a      	lsls	r2, r3, #8
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	609a      	str	r2, [r3, #8]
}
 8006bd4:	bf00      	nop
 8006bd6:	371c      	adds	r7, #28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f003 031f 	and.w	r3, r3, #31
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a1a      	ldr	r2, [r3, #32]
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	43db      	mvns	r3, r3
 8006c02:	401a      	ands	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6a1a      	ldr	r2, [r3, #32]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f003 031f 	and.w	r3, r3, #31
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	fa01 f303 	lsl.w	r3, r1, r3
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	621a      	str	r2, [r3, #32]
}
 8006c1e:	bf00      	nop
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
	...

08006c2c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a26      	ldr	r2, [pc, #152]	@ (8006cd0 <TIM_ResetCallback+0xa4>)
 8006c38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a25      	ldr	r2, [pc, #148]	@ (8006cd4 <TIM_ResetCallback+0xa8>)
 8006c40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a24      	ldr	r2, [pc, #144]	@ (8006cd8 <TIM_ResetCallback+0xac>)
 8006c48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a23      	ldr	r2, [pc, #140]	@ (8006cdc <TIM_ResetCallback+0xb0>)
 8006c50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a22      	ldr	r2, [pc, #136]	@ (8006ce0 <TIM_ResetCallback+0xb4>)
 8006c58:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a21      	ldr	r2, [pc, #132]	@ (8006ce4 <TIM_ResetCallback+0xb8>)
 8006c60:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a20      	ldr	r2, [pc, #128]	@ (8006ce8 <TIM_ResetCallback+0xbc>)
 8006c68:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8006cec <TIM_ResetCallback+0xc0>)
 8006c70:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a1e      	ldr	r2, [pc, #120]	@ (8006cf0 <TIM_ResetCallback+0xc4>)
 8006c78:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8006cf4 <TIM_ResetCallback+0xc8>)
 8006c80:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a1c      	ldr	r2, [pc, #112]	@ (8006cf8 <TIM_ResetCallback+0xcc>)
 8006c88:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8006cfc <TIM_ResetCallback+0xd0>)
 8006c90:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a1a      	ldr	r2, [pc, #104]	@ (8006d00 <TIM_ResetCallback+0xd4>)
 8006c98:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a19      	ldr	r2, [pc, #100]	@ (8006d04 <TIM_ResetCallback+0xd8>)
 8006ca0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a18      	ldr	r2, [pc, #96]	@ (8006d08 <TIM_ResetCallback+0xdc>)
 8006ca8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a17      	ldr	r2, [pc, #92]	@ (8006d0c <TIM_ResetCallback+0xe0>)
 8006cb0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a16      	ldr	r2, [pc, #88]	@ (8006d10 <TIM_ResetCallback+0xe4>)
 8006cb8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a15      	ldr	r2, [pc, #84]	@ (8006d14 <TIM_ResetCallback+0xe8>)
 8006cc0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	0800271d 	.word	0x0800271d
 8006cd4:	08005f8d 	.word	0x08005f8d
 8006cd8:	08005ff1 	.word	0x08005ff1
 8006cdc:	08006005 	.word	0x08006005
 8006ce0:	08005fb5 	.word	0x08005fb5
 8006ce4:	08005fc9 	.word	0x08005fc9
 8006ce8:	08005fa1 	.word	0x08005fa1
 8006cec:	080026f1 	.word	0x080026f1
 8006cf0:	08005fdd 	.word	0x08005fdd
 8006cf4:	08006019 	.word	0x08006019
 8006cf8:	080071b1 	.word	0x080071b1
 8006cfc:	080071c5 	.word	0x080071c5
 8006d00:	080071d9 	.word	0x080071d9
 8006d04:	080071ed 	.word	0x080071ed
 8006d08:	08007201 	.word	0x08007201
 8006d0c:	08007215 	.word	0x08007215
 8006d10:	08007229 	.word	0x08007229
 8006d14:	0800723d 	.word	0x0800723d

08006d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d101      	bne.n	8006d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e074      	b.n	8006e1a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a34      	ldr	r2, [pc, #208]	@ (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d009      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a33      	ldr	r2, [pc, #204]	@ (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d004      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a31      	ldr	r2, [pc, #196]	@ (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d108      	bne.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a21      	ldr	r2, [pc, #132]	@ (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d022      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006db0:	d01d      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a1f      	ldr	r2, [pc, #124]	@ (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d018      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d013      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a1c      	ldr	r2, [pc, #112]	@ (8006e3c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00e      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a15      	ldr	r2, [pc, #84]	@ (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d009      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a18      	ldr	r2, [pc, #96]	@ (8006e40 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d004      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a11      	ldr	r2, [pc, #68]	@ (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d10c      	bne.n	8006e08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006df4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	40012c00 	.word	0x40012c00
 8006e2c:	40013400 	.word	0x40013400
 8006e30:	40015000 	.word	0x40015000
 8006e34:	40000400 	.word	0x40000400
 8006e38:	40000800 	.word	0x40000800
 8006e3c:	40000c00 	.word	0x40000c00
 8006e40:	40014000 	.word	0x40014000

08006e44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e078      	b.n	8006f52 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	041b      	lsls	r3, r3, #16
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1c      	ldr	r2, [pc, #112]	@ (8006f60 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d009      	beq.n	8006f06 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8006f64 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d004      	beq.n	8006f06 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a19      	ldr	r2, [pc, #100]	@ (8006f68 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d11c      	bne.n	8006f40 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f10:	051b      	lsls	r3, r3, #20
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	40012c00 	.word	0x40012c00
 8006f64:	40013400 	.word	0x40013400
 8006f68:	40015000 	.word	0x40015000

08006f6c <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b08b      	sub	sp, #44	@ 0x2c
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d101      	bne.n	8006f8c <HAL_TIMEx_ConfigBreakInput+0x20>
 8006f88:	2302      	movs	r3, #2
 8006f8a:	e10b      	b.n	80071a4 <HAL_TIMEx_ConfigBreakInput+0x238>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b80      	cmp	r3, #128	@ 0x80
 8006f9a:	f000 8096 	beq.w	80070ca <HAL_TIMEx_ConfigBreakInput+0x15e>
 8006f9e:	2b80      	cmp	r3, #128	@ 0x80
 8006fa0:	f200 809c 	bhi.w	80070dc <HAL_TIMEx_ConfigBreakInput+0x170>
 8006fa4:	2b20      	cmp	r3, #32
 8006fa6:	d849      	bhi.n	800703c <HAL_TIMEx_ConfigBreakInput+0xd0>
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 8097 	beq.w	80070dc <HAL_TIMEx_ConfigBreakInput+0x170>
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	2b1f      	cmp	r3, #31
 8006fb2:	f200 8093 	bhi.w	80070dc <HAL_TIMEx_ConfigBreakInput+0x170>
 8006fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fbc <HAL_TIMEx_ConfigBreakInput+0x50>)
 8006fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbc:	08007043 	.word	0x08007043
 8006fc0:	08007057 	.word	0x08007057
 8006fc4:	080070dd 	.word	0x080070dd
 8006fc8:	0800706b 	.word	0x0800706b
 8006fcc:	080070dd 	.word	0x080070dd
 8006fd0:	080070dd 	.word	0x080070dd
 8006fd4:	080070dd 	.word	0x080070dd
 8006fd8:	0800707f 	.word	0x0800707f
 8006fdc:	080070dd 	.word	0x080070dd
 8006fe0:	080070dd 	.word	0x080070dd
 8006fe4:	080070dd 	.word	0x080070dd
 8006fe8:	080070dd 	.word	0x080070dd
 8006fec:	080070dd 	.word	0x080070dd
 8006ff0:	080070dd 	.word	0x080070dd
 8006ff4:	080070dd 	.word	0x080070dd
 8006ff8:	08007093 	.word	0x08007093
 8006ffc:	080070dd 	.word	0x080070dd
 8007000:	080070dd 	.word	0x080070dd
 8007004:	080070dd 	.word	0x080070dd
 8007008:	080070dd 	.word	0x080070dd
 800700c:	080070dd 	.word	0x080070dd
 8007010:	080070dd 	.word	0x080070dd
 8007014:	080070dd 	.word	0x080070dd
 8007018:	080070dd 	.word	0x080070dd
 800701c:	080070dd 	.word	0x080070dd
 8007020:	080070dd 	.word	0x080070dd
 8007024:	080070dd 	.word	0x080070dd
 8007028:	080070dd 	.word	0x080070dd
 800702c:	080070dd 	.word	0x080070dd
 8007030:	080070dd 	.word	0x080070dd
 8007034:	080070dd 	.word	0x080070dd
 8007038:	080070a7 	.word	0x080070a7
 800703c:	2b40      	cmp	r3, #64	@ 0x40
 800703e:	d03b      	beq.n	80070b8 <HAL_TIMEx_ConfigBreakInput+0x14c>
 8007040:	e04c      	b.n	80070dc <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8007042:	2301      	movs	r3, #1
 8007044:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8007046:	2300      	movs	r3, #0
 8007048:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800704a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800704e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8007050:	2309      	movs	r3, #9
 8007052:	617b      	str	r3, [r7, #20]
      break;
 8007054:	e04b      	b.n	80070ee <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8007056:	2302      	movs	r3, #2
 8007058:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800705a:	2301      	movs	r3, #1
 800705c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800705e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007062:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8007064:	230a      	movs	r3, #10
 8007066:	617b      	str	r3, [r7, #20]
      break;
 8007068:	e041      	b.n	80070ee <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800706a:	2304      	movs	r3, #4
 800706c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800706e:	2302      	movs	r3, #2
 8007070:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8007072:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007076:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8007078:	230b      	movs	r3, #11
 800707a:	617b      	str	r3, [r7, #20]
      break;
 800707c:	e037      	b.n	80070ee <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800707e:	2308      	movs	r3, #8
 8007080:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8007082:	2303      	movs	r3, #3
 8007084:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8007086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800708a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 800708c:	230c      	movs	r3, #12
 800708e:	617b      	str	r3, [r7, #20]
      break;
 8007090:	e02d      	b.n	80070ee <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 8007092:	2310      	movs	r3, #16
 8007094:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8007096:	2304      	movs	r3, #4
 8007098:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 800709a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800709e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 80070a0:	230d      	movs	r3, #13
 80070a2:	617b      	str	r3, [r7, #20]
      break;
 80070a4:	e023      	b.n	80070ee <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 80070a6:	2320      	movs	r3, #32
 80070a8:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 80070aa:	2305      	movs	r3, #5
 80070ac:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80070b2:	2300      	movs	r3, #0
 80070b4:	617b      	str	r3, [r7, #20]
      break;
 80070b6:	e01a      	b.n	80070ee <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 80070b8:	2340      	movs	r3, #64	@ 0x40
 80070ba:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 80070bc:	2306      	movs	r3, #6
 80070be:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	617b      	str	r3, [r7, #20]
      break;
 80070c8:	e011      	b.n	80070ee <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 80070ca:	2380      	movs	r3, #128	@ 0x80
 80070cc:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 80070ce:	2307      	movs	r3, #7
 80070d0:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	617b      	str	r3, [r7, #20]
      break;
 80070da:	e008      	b.n	80070ee <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	617b      	str	r3, [r7, #20]
      break;
 80070ec:	bf00      	nop
    }
  }

  switch (BreakInput)
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d003      	beq.n	80070fc <HAL_TIMEx_ConfigBreakInput+0x190>
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d025      	beq.n	8007146 <HAL_TIMEx_ConfigBreakInput+0x1da>
 80070fa:	e049      	b.n	8007190 <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007102:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	43db      	mvns	r3, r3
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4013      	ands	r3, r2
 800710c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	409a      	lsls	r2, r3
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	4013      	ands	r3, r2
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4313      	orrs	r3, r2
 800711e:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	43db      	mvns	r3, r3
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4013      	ands	r3, r2
 8007128:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689a      	ldr	r2, [r3, #8]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	409a      	lsls	r2, r3
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	4013      	ands	r3, r2
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	4313      	orrs	r3, r2
 800713a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8007144:	e028      	b.n	8007198 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800714c:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	43db      	mvns	r3, r3
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	4013      	ands	r3, r2
 8007156:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	409a      	lsls	r2, r3
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	4013      	ands	r3, r2
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	4313      	orrs	r3, r2
 8007168:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	43db      	mvns	r3, r3
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	4013      	ands	r3, r2
 8007172:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	409a      	lsls	r2, r3
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	4013      	ands	r3, r2
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	4313      	orrs	r3, r2
 8007184:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800718e:	e003      	b.n	8007198 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8007196:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80071a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	372c      	adds	r7, #44	@ 0x2c
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e050      	b.n	8007304 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007268:	2b00      	cmp	r3, #0
 800726a:	d114      	bne.n	8007296 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fdc5 	bl	8007e04 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007280:	2b00      	cmp	r3, #0
 8007282:	d103      	bne.n	800728c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a21      	ldr	r2, [pc, #132]	@ (800730c <HAL_UART_Init+0xbc>)
 8007288:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2224      	movs	r2, #36	@ 0x24
 800729a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0201 	bic.w	r2, r2, #1
 80072ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d002      	beq.n	80072bc <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 f8f2 	bl	80084a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fdf3 	bl	8007ea8 <UART_SetConfig>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d101      	bne.n	80072cc <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e01b      	b.n	8007304 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685a      	ldr	r2, [r3, #4]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689a      	ldr	r2, [r3, #8]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0201 	orr.w	r2, r2, #1
 80072fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 f971 	bl	80085e4 <UART_CheckIdleState>
 8007302:	4603      	mov	r3, r0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	08002abd 	.word	0x08002abd

08007310 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	460b      	mov	r3, r1
 800731a:	607a      	str	r2, [r7, #4]
 800731c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d109      	bne.n	800733c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800732e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e09c      	b.n	8007476 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007342:	2b20      	cmp	r3, #32
 8007344:	d16c      	bne.n	8007420 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8007346:	7afb      	ldrb	r3, [r7, #11]
 8007348:	2b0c      	cmp	r3, #12
 800734a:	d85e      	bhi.n	800740a <HAL_UART_RegisterCallback+0xfa>
 800734c:	a201      	add	r2, pc, #4	@ (adr r2, 8007354 <HAL_UART_RegisterCallback+0x44>)
 800734e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007352:	bf00      	nop
 8007354:	08007389 	.word	0x08007389
 8007358:	08007393 	.word	0x08007393
 800735c:	0800739d 	.word	0x0800739d
 8007360:	080073a7 	.word	0x080073a7
 8007364:	080073b1 	.word	0x080073b1
 8007368:	080073bb 	.word	0x080073bb
 800736c:	080073c5 	.word	0x080073c5
 8007370:	080073cf 	.word	0x080073cf
 8007374:	080073d9 	.word	0x080073d9
 8007378:	080073e3 	.word	0x080073e3
 800737c:	080073ed 	.word	0x080073ed
 8007380:	080073f7 	.word	0x080073f7
 8007384:	08007401 	.word	0x08007401
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007390:	e070      	b.n	8007474 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800739a:	e06b      	b.n	8007474 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80073a4:	e066      	b.n	8007474 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80073ae:	e061      	b.n	8007474 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80073b8:	e05c      	b.n	8007474 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80073c2:	e057      	b.n	8007474 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80073cc:	e052      	b.n	8007474 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80073d6:	e04d      	b.n	8007474 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80073e0:	e048      	b.n	8007474 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80073ea:	e043      	b.n	8007474 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80073f4:	e03e      	b.n	8007474 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80073fe:	e039      	b.n	8007474 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007408:	e034      	b.n	8007474 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007410:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	75fb      	strb	r3, [r7, #23]
        break;
 800741e:	e029      	b.n	8007474 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007426:	2b00      	cmp	r3, #0
 8007428:	d11a      	bne.n	8007460 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800742a:	7afb      	ldrb	r3, [r7, #11]
 800742c:	2b0b      	cmp	r3, #11
 800742e:	d002      	beq.n	8007436 <HAL_UART_RegisterCallback+0x126>
 8007430:	2b0c      	cmp	r3, #12
 8007432:	d005      	beq.n	8007440 <HAL_UART_RegisterCallback+0x130>
 8007434:	e009      	b.n	800744a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800743e:	e019      	b.n	8007474 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007448:	e014      	b.n	8007474 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007450:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	75fb      	strb	r3, [r7, #23]
        break;
 800745e:	e009      	b.n	8007474 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007466:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007474:	7dfb      	ldrb	r3, [r7, #23]
}
 8007476:	4618      	mov	r0, r3
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop

08007484 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b08a      	sub	sp, #40	@ 0x28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	4613      	mov	r3, r2
 8007490:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007498:	2b20      	cmp	r3, #32
 800749a:	d167      	bne.n	800756c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <HAL_UART_Transmit_DMA+0x24>
 80074a2:	88fb      	ldrh	r3, [r7, #6]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e060      	b.n	800756e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	88fa      	ldrh	r2, [r7, #6]
 80074b6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	88fa      	ldrh	r2, [r7, #6]
 80074be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2221      	movs	r2, #33	@ 0x21
 80074ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d028      	beq.n	800752c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074de:	4a26      	ldr	r2, [pc, #152]	@ (8007578 <HAL_UART_Transmit_DMA+0xf4>)
 80074e0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074e6:	4a25      	ldr	r2, [pc, #148]	@ (800757c <HAL_UART_Transmit_DMA+0xf8>)
 80074e8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074ee:	4a24      	ldr	r2, [pc, #144]	@ (8007580 <HAL_UART_Transmit_DMA+0xfc>)
 80074f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074f6:	2200      	movs	r2, #0
 80074f8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007502:	4619      	mov	r1, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3328      	adds	r3, #40	@ 0x28
 800750a:	461a      	mov	r2, r3
 800750c:	88fb      	ldrh	r3, [r7, #6]
 800750e:	f7fb fefb 	bl	8003308 <HAL_DMA_Start_IT>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d009      	beq.n	800752c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2210      	movs	r2, #16
 800751c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2220      	movs	r2, #32
 8007524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e020      	b.n	800756e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2240      	movs	r2, #64	@ 0x40
 8007532:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3308      	adds	r3, #8
 800753a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	613b      	str	r3, [r7, #16]
   return(result);
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800754a:	627b      	str	r3, [r7, #36]	@ 0x24
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3308      	adds	r3, #8
 8007552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007554:	623a      	str	r2, [r7, #32]
 8007556:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	69f9      	ldr	r1, [r7, #28]
 800755a:	6a3a      	ldr	r2, [r7, #32]
 800755c:	e841 2300 	strex	r3, r2, [r1]
 8007560:	61bb      	str	r3, [r7, #24]
   return(result);
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e5      	bne.n	8007534 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	e000      	b.n	800756e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800756c:	2302      	movs	r3, #2
  }
}
 800756e:	4618      	mov	r0, r3
 8007570:	3728      	adds	r7, #40	@ 0x28
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	08008aaf 	.word	0x08008aaf
 800757c:	08008b4d 	.word	0x08008b4d
 8007580:	08008ce7 	.word	0x08008ce7

08007584 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08a      	sub	sp, #40	@ 0x28
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	4613      	mov	r3, r2
 8007590:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007598:	2b20      	cmp	r3, #32
 800759a:	d137      	bne.n	800760c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <HAL_UART_Receive_DMA+0x24>
 80075a2:	88fb      	ldrh	r3, [r7, #6]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e030      	b.n	800760e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a18      	ldr	r2, [pc, #96]	@ (8007618 <HAL_UART_Receive_DMA+0x94>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d01f      	beq.n	80075fc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d018      	beq.n	80075fc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	e853 3f00 	ldrex	r3, [r3]
 80075d6:	613b      	str	r3, [r7, #16]
   return(result);
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075de:	627b      	str	r3, [r7, #36]	@ 0x24
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	461a      	mov	r2, r3
 80075e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e8:	623b      	str	r3, [r7, #32]
 80075ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ec:	69f9      	ldr	r1, [r7, #28]
 80075ee:	6a3a      	ldr	r2, [r7, #32]
 80075f0:	e841 2300 	strex	r3, r2, [r1]
 80075f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1e6      	bne.n	80075ca <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80075fc:	88fb      	ldrh	r3, [r7, #6]
 80075fe:	461a      	mov	r2, r3
 8007600:	68b9      	ldr	r1, [r7, #8]
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f001 f906 	bl	8008814 <UART_Start_Receive_DMA>
 8007608:	4603      	mov	r3, r0
 800760a:	e000      	b.n	800760e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800760c:	2302      	movs	r3, #2
  }
}
 800760e:	4618      	mov	r0, r3
 8007610:	3728      	adds	r7, #40	@ 0x28
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	40008000 	.word	0x40008000

0800761c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b0ba      	sub	sp, #232	@ 0xe8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007642:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007646:	f640 030f 	movw	r3, #2063	@ 0x80f
 800764a:	4013      	ands	r3, r2
 800764c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007654:	2b00      	cmp	r3, #0
 8007656:	d11b      	bne.n	8007690 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800765c:	f003 0320 	and.w	r3, r3, #32
 8007660:	2b00      	cmp	r3, #0
 8007662:	d015      	beq.n	8007690 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007668:	f003 0320 	and.w	r3, r3, #32
 800766c:	2b00      	cmp	r3, #0
 800766e:	d105      	bne.n	800767c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d009      	beq.n	8007690 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 82f3 	beq.w	8007c6c <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	4798      	blx	r3
      }
      return;
 800768e:	e2ed      	b.n	8007c6c <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007690:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 8129 	beq.w	80078ec <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800769a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800769e:	4b90      	ldr	r3, [pc, #576]	@ (80078e0 <HAL_UART_IRQHandler+0x2c4>)
 80076a0:	4013      	ands	r3, r2
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d106      	bne.n	80076b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80076a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80076aa:	4b8e      	ldr	r3, [pc, #568]	@ (80078e4 <HAL_UART_IRQHandler+0x2c8>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 811c 	beq.w	80078ec <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d011      	beq.n	80076e4 <HAL_UART_IRQHandler+0xc8>
 80076c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00b      	beq.n	80076e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2201      	movs	r2, #1
 80076d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076da:	f043 0201 	orr.w	r2, r3, #1
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e8:	f003 0302 	and.w	r3, r3, #2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d011      	beq.n	8007714 <HAL_UART_IRQHandler+0xf8>
 80076f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00b      	beq.n	8007714 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2202      	movs	r2, #2
 8007702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800770a:	f043 0204 	orr.w	r2, r3, #4
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b00      	cmp	r3, #0
 800771e:	d011      	beq.n	8007744 <HAL_UART_IRQHandler+0x128>
 8007720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00b      	beq.n	8007744 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2204      	movs	r2, #4
 8007732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800773a:	f043 0202 	orr.w	r2, r3, #2
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007748:	f003 0308 	and.w	r3, r3, #8
 800774c:	2b00      	cmp	r3, #0
 800774e:	d017      	beq.n	8007780 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007754:	f003 0320 	and.w	r3, r3, #32
 8007758:	2b00      	cmp	r3, #0
 800775a:	d105      	bne.n	8007768 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800775c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007760:	4b5f      	ldr	r3, [pc, #380]	@ (80078e0 <HAL_UART_IRQHandler+0x2c4>)
 8007762:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2208      	movs	r2, #8
 800776e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007776:	f043 0208 	orr.w	r2, r3, #8
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007784:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007788:	2b00      	cmp	r3, #0
 800778a:	d012      	beq.n	80077b2 <HAL_UART_IRQHandler+0x196>
 800778c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007790:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00c      	beq.n	80077b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077a8:	f043 0220 	orr.w	r2, r3, #32
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 8259 	beq.w	8007c70 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d013      	beq.n	80077f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077ce:	f003 0320 	and.w	r3, r3, #32
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d105      	bne.n	80077e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d007      	beq.n	80077f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007806:	2b40      	cmp	r3, #64	@ 0x40
 8007808:	d005      	beq.n	8007816 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800780a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800780e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007812:	2b00      	cmp	r3, #0
 8007814:	d058      	beq.n	80078c8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f001 f8e3 	bl	80089e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007826:	2b40      	cmp	r3, #64	@ 0x40
 8007828:	d148      	bne.n	80078bc <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3308      	adds	r3, #8
 8007830:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007838:	e853 3f00 	ldrex	r3, [r3]
 800783c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007840:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007848:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3308      	adds	r3, #8
 8007852:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007856:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800785a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007862:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800786e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1d9      	bne.n	800782a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800787c:	2b00      	cmp	r3, #0
 800787e:	d017      	beq.n	80078b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007886:	4a18      	ldr	r2, [pc, #96]	@ (80078e8 <HAL_UART_IRQHandler+0x2cc>)
 8007888:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007890:	4618      	mov	r0, r3
 8007892:	f7fb fe0d 	bl	80034b0 <HAL_DMA_Abort_IT>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d01f      	beq.n	80078dc <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80078aa:	4610      	mov	r0, r2
 80078ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ae:	e015      	b.n	80078dc <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ba:	e00f      	b.n	80078dc <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c6:	e009      	b.n	80078dc <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80078da:	e1c9      	b.n	8007c70 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078dc:	bf00      	nop
    return;
 80078de:	e1c7      	b.n	8007c70 <HAL_UART_IRQHandler+0x654>
 80078e0:	10000001 	.word	0x10000001
 80078e4:	04000120 	.word	0x04000120
 80078e8:	08008d6b 	.word	0x08008d6b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	f040 8157 	bne.w	8007ba4 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078fa:	f003 0310 	and.w	r3, r3, #16
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f000 8150 	beq.w	8007ba4 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007908:	f003 0310 	and.w	r3, r3, #16
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 8149 	beq.w	8007ba4 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2210      	movs	r2, #16
 8007918:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007924:	2b40      	cmp	r3, #64	@ 0x40
 8007926:	f040 80bd 	bne.w	8007aa4 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007938:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 8199 	beq.w	8007c74 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007948:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800794c:	429a      	cmp	r2, r3
 800794e:	f080 8191 	bcs.w	8007c74 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007958:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0320 	and.w	r3, r3, #32
 800796a:	2b00      	cmp	r3, #0
 800796c:	f040 8087 	bne.w	8007a7e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800797c:	e853 3f00 	ldrex	r3, [r3]
 8007980:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007984:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800798c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800799a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800799e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80079a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80079aa:	e841 2300 	strex	r3, r2, [r1]
 80079ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80079b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1da      	bne.n	8007970 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3308      	adds	r3, #8
 80079c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079c4:	e853 3f00 	ldrex	r3, [r3]
 80079c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80079ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079cc:	f023 0301 	bic.w	r3, r3, #1
 80079d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3308      	adds	r3, #8
 80079da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80079de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80079e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80079e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80079ea:	e841 2300 	strex	r3, r2, [r1]
 80079ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80079f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1e1      	bne.n	80079ba <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3308      	adds	r3, #8
 80079fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3308      	adds	r3, #8
 8007a16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a22:	e841 2300 	strex	r3, r2, [r1]
 8007a26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e3      	bne.n	80079f6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a44:	e853 3f00 	ldrex	r3, [r3]
 8007a48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a4c:	f023 0310 	bic.w	r3, r3, #16
 8007a50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a66:	e841 2300 	strex	r3, r2, [r1]
 8007a6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1e4      	bne.n	8007a3c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7fb fcc0 	bl	80033fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2202      	movs	r2, #2
 8007a82:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8007a96:	b292      	uxth	r2, r2
 8007a98:	1a8a      	subs	r2, r1, r2
 8007a9a:	b292      	uxth	r2, r2
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007aa2:	e0e7      	b.n	8007c74 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 80d9 	beq.w	8007c78 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8007ac6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 80d4 	beq.w	8007c78 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad8:	e853 3f00 	ldrex	r3, [r3]
 8007adc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ae0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ae4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	461a      	mov	r2, r3
 8007aee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007af2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007af4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007af8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007afa:	e841 2300 	strex	r3, r2, [r1]
 8007afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1e4      	bne.n	8007ad0 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	3308      	adds	r3, #8
 8007b0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	623b      	str	r3, [r7, #32]
   return(result);
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b1c:	f023 0301 	bic.w	r3, r3, #1
 8007b20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3308      	adds	r3, #8
 8007b2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007b2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e1      	bne.n	8007b06 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2220      	movs	r2, #32
 8007b46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 0310 	bic.w	r3, r3, #16
 8007b6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007b78:	61fb      	str	r3, [r7, #28]
 8007b7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7c:	69b9      	ldr	r1, [r7, #24]
 8007b7e:	69fa      	ldr	r2, [r7, #28]
 8007b80:	e841 2300 	strex	r3, r2, [r1]
 8007b84:	617b      	str	r3, [r7, #20]
   return(result);
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e4      	bne.n	8007b56 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007b98:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ba2:	e069      	b.n	8007c78 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ba8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d010      	beq.n	8007bd2 <HAL_UART_IRQHandler+0x5b6>
 8007bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00a      	beq.n	8007bd2 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007bc4:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bd0:	e055      	b.n	8007c7e <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d014      	beq.n	8007c08 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d105      	bne.n	8007bf6 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d008      	beq.n	8007c08 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d03e      	beq.n	8007c7c <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	4798      	blx	r3
    }
    return;
 8007c06:	e039      	b.n	8007c7c <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d009      	beq.n	8007c28 <HAL_UART_IRQHandler+0x60c>
 8007c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d003      	beq.n	8007c28 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 f8ba 	bl	8008d9a <UART_EndTransmit_IT>
    return;
 8007c26:	e02a      	b.n	8007c7e <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00b      	beq.n	8007c4c <HAL_UART_IRQHandler+0x630>
 8007c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d005      	beq.n	8007c4c <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c4a:	e018      	b.n	8007c7e <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d012      	beq.n	8007c7e <HAL_UART_IRQHandler+0x662>
 8007c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	da0e      	bge.n	8007c7e <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c6a:	e008      	b.n	8007c7e <HAL_UART_IRQHandler+0x662>
      return;
 8007c6c:	bf00      	nop
 8007c6e:	e006      	b.n	8007c7e <HAL_UART_IRQHandler+0x662>
    return;
 8007c70:	bf00      	nop
 8007c72:	e004      	b.n	8007c7e <HAL_UART_IRQHandler+0x662>
      return;
 8007c74:	bf00      	nop
 8007c76:	e002      	b.n	8007c7e <HAL_UART_IRQHandler+0x662>
      return;
 8007c78:	bf00      	nop
 8007c7a:	e000      	b.n	8007c7e <HAL_UART_IRQHandler+0x662>
    return;
 8007c7c:	bf00      	nop
  }
}
 8007c7e:	37e8      	adds	r7, #232	@ 0xe8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a09      	ldr	r2, [pc, #36]	@ (8007d70 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d009      	beq.n	8007d64 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	615a      	str	r2, [r3, #20]
  }
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr
 8007d70:	40008000 	.word	0x40008000

08007d74 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a18      	ldr	r2, [pc, #96]	@ (8007de4 <HAL_UART_EnableReceiverTimeout+0x70>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d027      	beq.n	8007dd6 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d8c:	2b20      	cmp	r3, #32
 8007d8e:	d120      	bne.n	8007dd2 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d101      	bne.n	8007d9e <HAL_UART_EnableReceiverTimeout+0x2a>
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	e01c      	b.n	8007dd8 <HAL_UART_EnableReceiverTimeout+0x64>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2224      	movs	r2, #36	@ 0x24
 8007daa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8007dbc:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2220      	movs	r2, #32
 8007dc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	e002      	b.n	8007dd8 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	e000      	b.n	8007dd8 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
  }
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr
 8007de4:	40008000 	.word	0x40008000

08007de8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
	...

08007e04 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8007e78 <UART_InitCallbacksToDefault+0x74>)
 8007e10:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a19      	ldr	r2, [pc, #100]	@ (8007e7c <UART_InitCallbacksToDefault+0x78>)
 8007e18:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a18      	ldr	r2, [pc, #96]	@ (8007e80 <UART_InitCallbacksToDefault+0x7c>)
 8007e20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a17      	ldr	r2, [pc, #92]	@ (8007e84 <UART_InitCallbacksToDefault+0x80>)
 8007e28:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a16      	ldr	r2, [pc, #88]	@ (8007e88 <UART_InitCallbacksToDefault+0x84>)
 8007e30:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a15      	ldr	r2, [pc, #84]	@ (8007e8c <UART_InitCallbacksToDefault+0x88>)
 8007e38:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a14      	ldr	r2, [pc, #80]	@ (8007e90 <UART_InitCallbacksToDefault+0x8c>)
 8007e40:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a13      	ldr	r2, [pc, #76]	@ (8007e94 <UART_InitCallbacksToDefault+0x90>)
 8007e48:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a12      	ldr	r2, [pc, #72]	@ (8007e98 <UART_InitCallbacksToDefault+0x94>)
 8007e50:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a11      	ldr	r2, [pc, #68]	@ (8007e9c <UART_InitCallbacksToDefault+0x98>)
 8007e58:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a10      	ldr	r2, [pc, #64]	@ (8007ea0 <UART_InitCallbacksToDefault+0x9c>)
 8007e60:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a0f      	ldr	r2, [pc, #60]	@ (8007ea4 <UART_InitCallbacksToDefault+0xa0>)
 8007e68:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	08007c99 	.word	0x08007c99
 8007e7c:	08007c85 	.word	0x08007c85
 8007e80:	08007cc1 	.word	0x08007cc1
 8007e84:	08007cad 	.word	0x08007cad
 8007e88:	08007cd5 	.word	0x08007cd5
 8007e8c:	08007ce9 	.word	0x08007ce9
 8007e90:	08007cfd 	.word	0x08007cfd
 8007e94:	08007d11 	.word	0x08007d11
 8007e98:	08008df5 	.word	0x08008df5
 8007e9c:	08008e09 	.word	0x08008e09
 8007ea0:	08008e1d 	.word	0x08008e1d
 8007ea4:	08007d25 	.word	0x08007d25

08007ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007eac:	b08c      	sub	sp, #48	@ 0x30
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	689a      	ldr	r2, [r3, #8]
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	431a      	orrs	r2, r3
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	4baa      	ldr	r3, [pc, #680]	@ (8008180 <UART_SetConfig+0x2d8>)
 8007ed8:	4013      	ands	r3, r2
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ee0:	430b      	orrs	r3, r1
 8007ee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a9f      	ldr	r2, [pc, #636]	@ (8008184 <UART_SetConfig+0x2dc>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d004      	beq.n	8007f14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f10:	4313      	orrs	r3, r2
 8007f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007f1e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	6812      	ldr	r2, [r2, #0]
 8007f26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f28:	430b      	orrs	r3, r1
 8007f2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f32:	f023 010f 	bic.w	r1, r3, #15
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a90      	ldr	r2, [pc, #576]	@ (8008188 <UART_SetConfig+0x2e0>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d125      	bne.n	8007f98 <UART_SetConfig+0xf0>
 8007f4c:	4b8f      	ldr	r3, [pc, #572]	@ (800818c <UART_SetConfig+0x2e4>)
 8007f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f52:	f003 0303 	and.w	r3, r3, #3
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	d81a      	bhi.n	8007f90 <UART_SetConfig+0xe8>
 8007f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f60 <UART_SetConfig+0xb8>)
 8007f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f60:	08007f71 	.word	0x08007f71
 8007f64:	08007f81 	.word	0x08007f81
 8007f68:	08007f79 	.word	0x08007f79
 8007f6c:	08007f89 	.word	0x08007f89
 8007f70:	2301      	movs	r3, #1
 8007f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f76:	e116      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8007f78:	2302      	movs	r3, #2
 8007f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f7e:	e112      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8007f80:	2304      	movs	r3, #4
 8007f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f86:	e10e      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8007f88:	2308      	movs	r3, #8
 8007f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f8e:	e10a      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8007f90:	2310      	movs	r3, #16
 8007f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f96:	e106      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a7c      	ldr	r2, [pc, #496]	@ (8008190 <UART_SetConfig+0x2e8>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d138      	bne.n	8008014 <UART_SetConfig+0x16c>
 8007fa2:	4b7a      	ldr	r3, [pc, #488]	@ (800818c <UART_SetConfig+0x2e4>)
 8007fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fa8:	f003 030c 	and.w	r3, r3, #12
 8007fac:	2b0c      	cmp	r3, #12
 8007fae:	d82d      	bhi.n	800800c <UART_SetConfig+0x164>
 8007fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb8 <UART_SetConfig+0x110>)
 8007fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb6:	bf00      	nop
 8007fb8:	08007fed 	.word	0x08007fed
 8007fbc:	0800800d 	.word	0x0800800d
 8007fc0:	0800800d 	.word	0x0800800d
 8007fc4:	0800800d 	.word	0x0800800d
 8007fc8:	08007ffd 	.word	0x08007ffd
 8007fcc:	0800800d 	.word	0x0800800d
 8007fd0:	0800800d 	.word	0x0800800d
 8007fd4:	0800800d 	.word	0x0800800d
 8007fd8:	08007ff5 	.word	0x08007ff5
 8007fdc:	0800800d 	.word	0x0800800d
 8007fe0:	0800800d 	.word	0x0800800d
 8007fe4:	0800800d 	.word	0x0800800d
 8007fe8:	08008005 	.word	0x08008005
 8007fec:	2300      	movs	r3, #0
 8007fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ff2:	e0d8      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ffa:	e0d4      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8007ffc:	2304      	movs	r3, #4
 8007ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008002:	e0d0      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8008004:	2308      	movs	r3, #8
 8008006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800800a:	e0cc      	b.n	80081a6 <UART_SetConfig+0x2fe>
 800800c:	2310      	movs	r3, #16
 800800e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008012:	e0c8      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a5e      	ldr	r2, [pc, #376]	@ (8008194 <UART_SetConfig+0x2ec>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d125      	bne.n	800806a <UART_SetConfig+0x1c2>
 800801e:	4b5b      	ldr	r3, [pc, #364]	@ (800818c <UART_SetConfig+0x2e4>)
 8008020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008024:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008028:	2b30      	cmp	r3, #48	@ 0x30
 800802a:	d016      	beq.n	800805a <UART_SetConfig+0x1b2>
 800802c:	2b30      	cmp	r3, #48	@ 0x30
 800802e:	d818      	bhi.n	8008062 <UART_SetConfig+0x1ba>
 8008030:	2b20      	cmp	r3, #32
 8008032:	d00a      	beq.n	800804a <UART_SetConfig+0x1a2>
 8008034:	2b20      	cmp	r3, #32
 8008036:	d814      	bhi.n	8008062 <UART_SetConfig+0x1ba>
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <UART_SetConfig+0x19a>
 800803c:	2b10      	cmp	r3, #16
 800803e:	d008      	beq.n	8008052 <UART_SetConfig+0x1aa>
 8008040:	e00f      	b.n	8008062 <UART_SetConfig+0x1ba>
 8008042:	2300      	movs	r3, #0
 8008044:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008048:	e0ad      	b.n	80081a6 <UART_SetConfig+0x2fe>
 800804a:	2302      	movs	r3, #2
 800804c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008050:	e0a9      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8008052:	2304      	movs	r3, #4
 8008054:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008058:	e0a5      	b.n	80081a6 <UART_SetConfig+0x2fe>
 800805a:	2308      	movs	r3, #8
 800805c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008060:	e0a1      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8008062:	2310      	movs	r3, #16
 8008064:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008068:	e09d      	b.n	80081a6 <UART_SetConfig+0x2fe>
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a4a      	ldr	r2, [pc, #296]	@ (8008198 <UART_SetConfig+0x2f0>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d125      	bne.n	80080c0 <UART_SetConfig+0x218>
 8008074:	4b45      	ldr	r3, [pc, #276]	@ (800818c <UART_SetConfig+0x2e4>)
 8008076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800807a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800807e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008080:	d016      	beq.n	80080b0 <UART_SetConfig+0x208>
 8008082:	2bc0      	cmp	r3, #192	@ 0xc0
 8008084:	d818      	bhi.n	80080b8 <UART_SetConfig+0x210>
 8008086:	2b80      	cmp	r3, #128	@ 0x80
 8008088:	d00a      	beq.n	80080a0 <UART_SetConfig+0x1f8>
 800808a:	2b80      	cmp	r3, #128	@ 0x80
 800808c:	d814      	bhi.n	80080b8 <UART_SetConfig+0x210>
 800808e:	2b00      	cmp	r3, #0
 8008090:	d002      	beq.n	8008098 <UART_SetConfig+0x1f0>
 8008092:	2b40      	cmp	r3, #64	@ 0x40
 8008094:	d008      	beq.n	80080a8 <UART_SetConfig+0x200>
 8008096:	e00f      	b.n	80080b8 <UART_SetConfig+0x210>
 8008098:	2300      	movs	r3, #0
 800809a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800809e:	e082      	b.n	80081a6 <UART_SetConfig+0x2fe>
 80080a0:	2302      	movs	r3, #2
 80080a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080a6:	e07e      	b.n	80081a6 <UART_SetConfig+0x2fe>
 80080a8:	2304      	movs	r3, #4
 80080aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ae:	e07a      	b.n	80081a6 <UART_SetConfig+0x2fe>
 80080b0:	2308      	movs	r3, #8
 80080b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080b6:	e076      	b.n	80081a6 <UART_SetConfig+0x2fe>
 80080b8:	2310      	movs	r3, #16
 80080ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080be:	e072      	b.n	80081a6 <UART_SetConfig+0x2fe>
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a35      	ldr	r2, [pc, #212]	@ (800819c <UART_SetConfig+0x2f4>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d12a      	bne.n	8008120 <UART_SetConfig+0x278>
 80080ca:	4b30      	ldr	r3, [pc, #192]	@ (800818c <UART_SetConfig+0x2e4>)
 80080cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080d8:	d01a      	beq.n	8008110 <UART_SetConfig+0x268>
 80080da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080de:	d81b      	bhi.n	8008118 <UART_SetConfig+0x270>
 80080e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080e4:	d00c      	beq.n	8008100 <UART_SetConfig+0x258>
 80080e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080ea:	d815      	bhi.n	8008118 <UART_SetConfig+0x270>
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <UART_SetConfig+0x250>
 80080f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080f4:	d008      	beq.n	8008108 <UART_SetConfig+0x260>
 80080f6:	e00f      	b.n	8008118 <UART_SetConfig+0x270>
 80080f8:	2300      	movs	r3, #0
 80080fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080fe:	e052      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8008100:	2302      	movs	r3, #2
 8008102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008106:	e04e      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8008108:	2304      	movs	r3, #4
 800810a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800810e:	e04a      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8008110:	2308      	movs	r3, #8
 8008112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008116:	e046      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8008118:	2310      	movs	r3, #16
 800811a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800811e:	e042      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a17      	ldr	r2, [pc, #92]	@ (8008184 <UART_SetConfig+0x2dc>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d13a      	bne.n	80081a0 <UART_SetConfig+0x2f8>
 800812a:	4b18      	ldr	r3, [pc, #96]	@ (800818c <UART_SetConfig+0x2e4>)
 800812c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008130:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008134:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008138:	d01a      	beq.n	8008170 <UART_SetConfig+0x2c8>
 800813a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800813e:	d81b      	bhi.n	8008178 <UART_SetConfig+0x2d0>
 8008140:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008144:	d00c      	beq.n	8008160 <UART_SetConfig+0x2b8>
 8008146:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800814a:	d815      	bhi.n	8008178 <UART_SetConfig+0x2d0>
 800814c:	2b00      	cmp	r3, #0
 800814e:	d003      	beq.n	8008158 <UART_SetConfig+0x2b0>
 8008150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008154:	d008      	beq.n	8008168 <UART_SetConfig+0x2c0>
 8008156:	e00f      	b.n	8008178 <UART_SetConfig+0x2d0>
 8008158:	2300      	movs	r3, #0
 800815a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800815e:	e022      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8008160:	2302      	movs	r3, #2
 8008162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008166:	e01e      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8008168:	2304      	movs	r3, #4
 800816a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800816e:	e01a      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8008170:	2308      	movs	r3, #8
 8008172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008176:	e016      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8008178:	2310      	movs	r3, #16
 800817a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800817e:	e012      	b.n	80081a6 <UART_SetConfig+0x2fe>
 8008180:	cfff69f3 	.word	0xcfff69f3
 8008184:	40008000 	.word	0x40008000
 8008188:	40013800 	.word	0x40013800
 800818c:	40021000 	.word	0x40021000
 8008190:	40004400 	.word	0x40004400
 8008194:	40004800 	.word	0x40004800
 8008198:	40004c00 	.word	0x40004c00
 800819c:	40005000 	.word	0x40005000
 80081a0:	2310      	movs	r3, #16
 80081a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4aae      	ldr	r2, [pc, #696]	@ (8008464 <UART_SetConfig+0x5bc>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	f040 8097 	bne.w	80082e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081b6:	2b08      	cmp	r3, #8
 80081b8:	d823      	bhi.n	8008202 <UART_SetConfig+0x35a>
 80081ba:	a201      	add	r2, pc, #4	@ (adr r2, 80081c0 <UART_SetConfig+0x318>)
 80081bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c0:	080081e5 	.word	0x080081e5
 80081c4:	08008203 	.word	0x08008203
 80081c8:	080081ed 	.word	0x080081ed
 80081cc:	08008203 	.word	0x08008203
 80081d0:	080081f3 	.word	0x080081f3
 80081d4:	08008203 	.word	0x08008203
 80081d8:	08008203 	.word	0x08008203
 80081dc:	08008203 	.word	0x08008203
 80081e0:	080081fb 	.word	0x080081fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081e4:	f7fc fa3c 	bl	8004660 <HAL_RCC_GetPCLK1Freq>
 80081e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081ea:	e010      	b.n	800820e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081ec:	4b9e      	ldr	r3, [pc, #632]	@ (8008468 <UART_SetConfig+0x5c0>)
 80081ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081f0:	e00d      	b.n	800820e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081f2:	f7fc f9c7 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 80081f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081f8:	e009      	b.n	800820e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008200:	e005      	b.n	800820e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008202:	2300      	movs	r3, #0
 8008204:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800820c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800820e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 8130 	beq.w	8008476 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800821a:	4a94      	ldr	r2, [pc, #592]	@ (800846c <UART_SetConfig+0x5c4>)
 800821c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008220:	461a      	mov	r2, r3
 8008222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008224:	fbb3 f3f2 	udiv	r3, r3, r2
 8008228:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	4613      	mov	r3, r2
 8008230:	005b      	lsls	r3, r3, #1
 8008232:	4413      	add	r3, r2
 8008234:	69ba      	ldr	r2, [r7, #24]
 8008236:	429a      	cmp	r2, r3
 8008238:	d305      	bcc.n	8008246 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	429a      	cmp	r2, r3
 8008244:	d903      	bls.n	800824e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800824c:	e113      	b.n	8008476 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800824e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008250:	2200      	movs	r2, #0
 8008252:	60bb      	str	r3, [r7, #8]
 8008254:	60fa      	str	r2, [r7, #12]
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825a:	4a84      	ldr	r2, [pc, #528]	@ (800846c <UART_SetConfig+0x5c4>)
 800825c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008260:	b29b      	uxth	r3, r3
 8008262:	2200      	movs	r2, #0
 8008264:	603b      	str	r3, [r7, #0]
 8008266:	607a      	str	r2, [r7, #4]
 8008268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800826c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008270:	f7f8 fc78 	bl	8000b64 <__aeabi_uldivmod>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4610      	mov	r0, r2
 800827a:	4619      	mov	r1, r3
 800827c:	f04f 0200 	mov.w	r2, #0
 8008280:	f04f 0300 	mov.w	r3, #0
 8008284:	020b      	lsls	r3, r1, #8
 8008286:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800828a:	0202      	lsls	r2, r0, #8
 800828c:	6979      	ldr	r1, [r7, #20]
 800828e:	6849      	ldr	r1, [r1, #4]
 8008290:	0849      	lsrs	r1, r1, #1
 8008292:	2000      	movs	r0, #0
 8008294:	460c      	mov	r4, r1
 8008296:	4605      	mov	r5, r0
 8008298:	eb12 0804 	adds.w	r8, r2, r4
 800829c:	eb43 0905 	adc.w	r9, r3, r5
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	469a      	mov	sl, r3
 80082a8:	4693      	mov	fp, r2
 80082aa:	4652      	mov	r2, sl
 80082ac:	465b      	mov	r3, fp
 80082ae:	4640      	mov	r0, r8
 80082b0:	4649      	mov	r1, r9
 80082b2:	f7f8 fc57 	bl	8000b64 <__aeabi_uldivmod>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	4613      	mov	r3, r2
 80082bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082be:	6a3b      	ldr	r3, [r7, #32]
 80082c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082c4:	d308      	bcc.n	80082d8 <UART_SetConfig+0x430>
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082cc:	d204      	bcs.n	80082d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6a3a      	ldr	r2, [r7, #32]
 80082d4:	60da      	str	r2, [r3, #12]
 80082d6:	e0ce      	b.n	8008476 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80082de:	e0ca      	b.n	8008476 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	69db      	ldr	r3, [r3, #28]
 80082e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082e8:	d166      	bne.n	80083b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80082ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80082ee:	2b08      	cmp	r3, #8
 80082f0:	d827      	bhi.n	8008342 <UART_SetConfig+0x49a>
 80082f2:	a201      	add	r2, pc, #4	@ (adr r2, 80082f8 <UART_SetConfig+0x450>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	0800831d 	.word	0x0800831d
 80082fc:	08008325 	.word	0x08008325
 8008300:	0800832d 	.word	0x0800832d
 8008304:	08008343 	.word	0x08008343
 8008308:	08008333 	.word	0x08008333
 800830c:	08008343 	.word	0x08008343
 8008310:	08008343 	.word	0x08008343
 8008314:	08008343 	.word	0x08008343
 8008318:	0800833b 	.word	0x0800833b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800831c:	f7fc f9a0 	bl	8004660 <HAL_RCC_GetPCLK1Freq>
 8008320:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008322:	e014      	b.n	800834e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008324:	f7fc f9b2 	bl	800468c <HAL_RCC_GetPCLK2Freq>
 8008328:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800832a:	e010      	b.n	800834e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800832c:	4b4e      	ldr	r3, [pc, #312]	@ (8008468 <UART_SetConfig+0x5c0>)
 800832e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008330:	e00d      	b.n	800834e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008332:	f7fc f927 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 8008336:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008338:	e009      	b.n	800834e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800833a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800833e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008340:	e005      	b.n	800834e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008342:	2300      	movs	r3, #0
 8008344:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800834c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800834e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 8090 	beq.w	8008476 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835a:	4a44      	ldr	r2, [pc, #272]	@ (800846c <UART_SetConfig+0x5c4>)
 800835c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008360:	461a      	mov	r2, r3
 8008362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008364:	fbb3 f3f2 	udiv	r3, r3, r2
 8008368:	005a      	lsls	r2, r3, #1
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	085b      	lsrs	r3, r3, #1
 8008370:	441a      	add	r2, r3
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	fbb2 f3f3 	udiv	r3, r2, r3
 800837a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800837c:	6a3b      	ldr	r3, [r7, #32]
 800837e:	2b0f      	cmp	r3, #15
 8008380:	d916      	bls.n	80083b0 <UART_SetConfig+0x508>
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008388:	d212      	bcs.n	80083b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	b29b      	uxth	r3, r3
 800838e:	f023 030f 	bic.w	r3, r3, #15
 8008392:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	085b      	lsrs	r3, r3, #1
 8008398:	b29b      	uxth	r3, r3
 800839a:	f003 0307 	and.w	r3, r3, #7
 800839e:	b29a      	uxth	r2, r3
 80083a0:	8bfb      	ldrh	r3, [r7, #30]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	8bfa      	ldrh	r2, [r7, #30]
 80083ac:	60da      	str	r2, [r3, #12]
 80083ae:	e062      	b.n	8008476 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80083b6:	e05e      	b.n	8008476 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d828      	bhi.n	8008412 <UART_SetConfig+0x56a>
 80083c0:	a201      	add	r2, pc, #4	@ (adr r2, 80083c8 <UART_SetConfig+0x520>)
 80083c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c6:	bf00      	nop
 80083c8:	080083ed 	.word	0x080083ed
 80083cc:	080083f5 	.word	0x080083f5
 80083d0:	080083fd 	.word	0x080083fd
 80083d4:	08008413 	.word	0x08008413
 80083d8:	08008403 	.word	0x08008403
 80083dc:	08008413 	.word	0x08008413
 80083e0:	08008413 	.word	0x08008413
 80083e4:	08008413 	.word	0x08008413
 80083e8:	0800840b 	.word	0x0800840b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083ec:	f7fc f938 	bl	8004660 <HAL_RCC_GetPCLK1Freq>
 80083f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083f2:	e014      	b.n	800841e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083f4:	f7fc f94a 	bl	800468c <HAL_RCC_GetPCLK2Freq>
 80083f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083fa:	e010      	b.n	800841e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008468 <UART_SetConfig+0x5c0>)
 80083fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008400:	e00d      	b.n	800841e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008402:	f7fc f8bf 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 8008406:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008408:	e009      	b.n	800841e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800840a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800840e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008410:	e005      	b.n	800841e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008412:	2300      	movs	r3, #0
 8008414:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800841c:	bf00      	nop
    }

    if (pclk != 0U)
 800841e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008420:	2b00      	cmp	r3, #0
 8008422:	d028      	beq.n	8008476 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008428:	4a10      	ldr	r2, [pc, #64]	@ (800846c <UART_SetConfig+0x5c4>)
 800842a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800842e:	461a      	mov	r2, r3
 8008430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008432:	fbb3 f2f2 	udiv	r2, r3, r2
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	085b      	lsrs	r3, r3, #1
 800843c:	441a      	add	r2, r3
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	fbb2 f3f3 	udiv	r3, r2, r3
 8008446:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	2b0f      	cmp	r3, #15
 800844c:	d910      	bls.n	8008470 <UART_SetConfig+0x5c8>
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008454:	d20c      	bcs.n	8008470 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	b29a      	uxth	r2, r3
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	60da      	str	r2, [r3, #12]
 8008460:	e009      	b.n	8008476 <UART_SetConfig+0x5ce>
 8008462:	bf00      	nop
 8008464:	40008000 	.word	0x40008000
 8008468:	00f42400 	.word	0x00f42400
 800846c:	08009148 	.word	0x08009148
      }
      else
      {
        ret = HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2201      	movs	r2, #1
 800847a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2201      	movs	r2, #1
 8008482:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	2200      	movs	r2, #0
 800848a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2200      	movs	r2, #0
 8008490:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008492:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008496:	4618      	mov	r0, r3
 8008498:	3730      	adds	r7, #48	@ 0x30
 800849a:	46bd      	mov	sp, r7
 800849c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080084a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ac:	f003 0308 	and.w	r3, r3, #8
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00a      	beq.n	80084ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f0:	f003 0302 	and.w	r3, r3, #2
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00a      	beq.n	800850e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008512:	f003 0304 	and.w	r3, r3, #4
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	430a      	orrs	r2, r1
 800852e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008534:	f003 0310 	and.w	r3, r3, #16
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00a      	beq.n	8008552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008556:	f003 0320 	and.w	r3, r3, #32
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00a      	beq.n	8008574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	430a      	orrs	r2, r1
 8008572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800857c:	2b00      	cmp	r3, #0
 800857e:	d01a      	beq.n	80085b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	430a      	orrs	r2, r1
 8008594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800859a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800859e:	d10a      	bne.n	80085b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	430a      	orrs	r2, r1
 80085d6:	605a      	str	r2, [r3, #4]
  }
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b098      	sub	sp, #96	@ 0x60
 80085e8:	af02      	add	r7, sp, #8
 80085ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085f4:	f7fa fcc4 	bl	8002f80 <HAL_GetTick>
 80085f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0308 	and.w	r3, r3, #8
 8008604:	2b08      	cmp	r3, #8
 8008606:	d12f      	bne.n	8008668 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008608:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008610:	2200      	movs	r2, #0
 8008612:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f88e 	bl	8008738 <UART_WaitOnFlagUntilTimeout>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d022      	beq.n	8008668 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862a:	e853 3f00 	ldrex	r3, [r3]
 800862e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008636:	653b      	str	r3, [r7, #80]	@ 0x50
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	461a      	mov	r2, r3
 800863e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008640:	647b      	str	r3, [r7, #68]	@ 0x44
 8008642:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008644:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008646:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008648:	e841 2300 	strex	r3, r2, [r1]
 800864c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800864e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1e6      	bne.n	8008622 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2220      	movs	r2, #32
 8008658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e063      	b.n	8008730 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0304 	and.w	r3, r3, #4
 8008672:	2b04      	cmp	r3, #4
 8008674:	d149      	bne.n	800870a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008676:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800867e:	2200      	movs	r2, #0
 8008680:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f857 	bl	8008738 <UART_WaitOnFlagUntilTimeout>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d03c      	beq.n	800870a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008698:	e853 3f00 	ldrex	r3, [r3]
 800869c:	623b      	str	r3, [r7, #32]
   return(result);
 800869e:	6a3b      	ldr	r3, [r7, #32]
 80086a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80086b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086b6:	e841 2300 	strex	r3, r2, [r1]
 80086ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1e6      	bne.n	8008690 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3308      	adds	r3, #8
 80086c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	e853 3f00 	ldrex	r3, [r3]
 80086d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f023 0301 	bic.w	r3, r3, #1
 80086d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3308      	adds	r3, #8
 80086e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086e2:	61fa      	str	r2, [r7, #28]
 80086e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e6:	69b9      	ldr	r1, [r7, #24]
 80086e8:	69fa      	ldr	r2, [r7, #28]
 80086ea:	e841 2300 	strex	r3, r2, [r1]
 80086ee:	617b      	str	r3, [r7, #20]
   return(result);
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1e5      	bne.n	80086c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2220      	movs	r2, #32
 80086fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e012      	b.n	8008730 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2220      	movs	r2, #32
 800870e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2220      	movs	r2, #32
 8008716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3758      	adds	r7, #88	@ 0x58
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	603b      	str	r3, [r7, #0]
 8008744:	4613      	mov	r3, r2
 8008746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008748:	e04f      	b.n	80087ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008750:	d04b      	beq.n	80087ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008752:	f7fa fc15 	bl	8002f80 <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	69ba      	ldr	r2, [r7, #24]
 800875e:	429a      	cmp	r2, r3
 8008760:	d302      	bcc.n	8008768 <UART_WaitOnFlagUntilTimeout+0x30>
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e04e      	b.n	800880a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0304 	and.w	r3, r3, #4
 8008776:	2b00      	cmp	r3, #0
 8008778:	d037      	beq.n	80087ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2b80      	cmp	r3, #128	@ 0x80
 800877e:	d034      	beq.n	80087ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2b40      	cmp	r3, #64	@ 0x40
 8008784:	d031      	beq.n	80087ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	69db      	ldr	r3, [r3, #28]
 800878c:	f003 0308 	and.w	r3, r3, #8
 8008790:	2b08      	cmp	r3, #8
 8008792:	d110      	bne.n	80087b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2208      	movs	r2, #8
 800879a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f000 f920 	bl	80089e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2208      	movs	r2, #8
 80087a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e029      	b.n	800880a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	69db      	ldr	r3, [r3, #28]
 80087bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087c4:	d111      	bne.n	80087ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 f906 	bl	80089e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2220      	movs	r2, #32
 80087da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e00f      	b.n	800880a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	69da      	ldr	r2, [r3, #28]
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	4013      	ands	r3, r2
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	bf0c      	ite	eq
 80087fa:	2301      	moveq	r3, #1
 80087fc:	2300      	movne	r3, #0
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	461a      	mov	r2, r3
 8008802:	79fb      	ldrb	r3, [r7, #7]
 8008804:	429a      	cmp	r2, r3
 8008806:	d0a0      	beq.n	800874a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
	...

08008814 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b096      	sub	sp, #88	@ 0x58
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	4613      	mov	r3, r2
 8008820:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	88fa      	ldrh	r2, [r7, #6]
 800882c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2222      	movs	r2, #34	@ 0x22
 800883c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008846:	2b00      	cmp	r3, #0
 8008848:	d02d      	beq.n	80088a6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008850:	4a40      	ldr	r2, [pc, #256]	@ (8008954 <UART_Start_Receive_DMA+0x140>)
 8008852:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800885a:	4a3f      	ldr	r2, [pc, #252]	@ (8008958 <UART_Start_Receive_DMA+0x144>)
 800885c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008864:	4a3d      	ldr	r2, [pc, #244]	@ (800895c <UART_Start_Receive_DMA+0x148>)
 8008866:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800886e:	2200      	movs	r2, #0
 8008870:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3324      	adds	r3, #36	@ 0x24
 800887e:	4619      	mov	r1, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008884:	461a      	mov	r2, r3
 8008886:	88fb      	ldrh	r3, [r7, #6]
 8008888:	f7fa fd3e 	bl	8003308 <HAL_DMA_Start_IT>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d009      	beq.n	80088a6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2210      	movs	r2, #16
 8008896:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2220      	movs	r2, #32
 800889e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e051      	b.n	800894a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d018      	beq.n	80088e0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088b6:	e853 3f00 	ldrex	r3, [r3]
 80088ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80088bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	461a      	mov	r2, r3
 80088ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088ce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80088d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088d4:	e841 2300 	strex	r3, r2, [r1]
 80088d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80088da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1e6      	bne.n	80088ae <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3308      	adds	r3, #8
 80088e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ea:	e853 3f00 	ldrex	r3, [r3]
 80088ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f2:	f043 0301 	orr.w	r3, r3, #1
 80088f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	3308      	adds	r3, #8
 80088fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008900:	637a      	str	r2, [r7, #52]	@ 0x34
 8008902:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008904:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008906:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008908:	e841 2300 	strex	r3, r2, [r1]
 800890c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800890e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e5      	bne.n	80088e0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3308      	adds	r3, #8
 800891a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	e853 3f00 	ldrex	r3, [r3]
 8008922:	613b      	str	r3, [r7, #16]
   return(result);
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800892a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3308      	adds	r3, #8
 8008932:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008934:	623a      	str	r2, [r7, #32]
 8008936:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008938:	69f9      	ldr	r1, [r7, #28]
 800893a:	6a3a      	ldr	r2, [r7, #32]
 800893c:	e841 2300 	strex	r3, r2, [r1]
 8008940:	61bb      	str	r3, [r7, #24]
   return(result);
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1e5      	bne.n	8008914 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3758      	adds	r7, #88	@ 0x58
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	08008b6d 	.word	0x08008b6d
 8008958:	08008ca1 	.word	0x08008ca1
 800895c:	08008ce7 	.word	0x08008ce7

08008960 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008960:	b480      	push	{r7}
 8008962:	b08f      	sub	sp, #60	@ 0x3c
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	e853 3f00 	ldrex	r3, [r3]
 8008974:	61fb      	str	r3, [r7, #28]
   return(result);
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800897c:	637b      	str	r3, [r7, #52]	@ 0x34
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	461a      	mov	r2, r3
 8008984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008988:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800898c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800898e:	e841 2300 	strex	r3, r2, [r1]
 8008992:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1e6      	bne.n	8008968 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3308      	adds	r3, #8
 80089a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	e853 3f00 	ldrex	r3, [r3]
 80089a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80089b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	3308      	adds	r3, #8
 80089b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089ba:	61ba      	str	r2, [r7, #24]
 80089bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089be:	6979      	ldr	r1, [r7, #20]
 80089c0:	69ba      	ldr	r2, [r7, #24]
 80089c2:	e841 2300 	strex	r3, r2, [r1]
 80089c6:	613b      	str	r3, [r7, #16]
   return(result);
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1e5      	bne.n	800899a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2220      	movs	r2, #32
 80089d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80089d6:	bf00      	nop
 80089d8:	373c      	adds	r7, #60	@ 0x3c
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b095      	sub	sp, #84	@ 0x54
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f2:	e853 3f00 	ldrex	r3, [r3]
 80089f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	461a      	mov	r2, r3
 8008a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a08:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a10:	e841 2300 	strex	r3, r2, [r1]
 8008a14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1e6      	bne.n	80089ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	3308      	adds	r3, #8
 8008a22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a24:	6a3b      	ldr	r3, [r7, #32]
 8008a26:	e853 3f00 	ldrex	r3, [r3]
 8008a2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a32:	f023 0301 	bic.w	r3, r3, #1
 8008a36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	3308      	adds	r3, #8
 8008a3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a48:	e841 2300 	strex	r3, r2, [r1]
 8008a4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1e3      	bne.n	8008a1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d118      	bne.n	8008a8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f023 0310 	bic.w	r3, r3, #16
 8008a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	461a      	mov	r2, r3
 8008a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a7a:	61bb      	str	r3, [r7, #24]
 8008a7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	6979      	ldr	r1, [r7, #20]
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	613b      	str	r3, [r7, #16]
   return(result);
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e6      	bne.n	8008a5c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2220      	movs	r2, #32
 8008a92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008aa2:	bf00      	nop
 8008aa4:	3754      	adds	r7, #84	@ 0x54
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b090      	sub	sp, #64	@ 0x40
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0320 	and.w	r3, r3, #32
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d137      	bne.n	8008b3a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008acc:	2200      	movs	r2, #0
 8008ace:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3308      	adds	r3, #8
 8008ad8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008adc:	e853 3f00 	ldrex	r3, [r3]
 8008ae0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ae2:	6a3b      	ldr	r3, [r7, #32]
 8008ae4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3308      	adds	r3, #8
 8008af0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008af2:	633a      	str	r2, [r7, #48]	@ 0x30
 8008af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008afa:	e841 2300 	strex	r3, r2, [r1]
 8008afe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e5      	bne.n	8008ad2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	e853 3f00 	ldrex	r3, [r3]
 8008b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	461a      	mov	r2, r3
 8008b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b24:	61fb      	str	r3, [r7, #28]
 8008b26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b28:	69b9      	ldr	r1, [r7, #24]
 8008b2a:	69fa      	ldr	r2, [r7, #28]
 8008b2c:	e841 2300 	strex	r3, r2, [r1]
 8008b30:	617b      	str	r3, [r7, #20]
   return(result);
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1e6      	bne.n	8008b06 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b38:	e004      	b.n	8008b44 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8008b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b40:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008b42:	4798      	blx	r3
}
 8008b44:	bf00      	nop
 8008b46:	3740      	adds	r7, #64	@ 0x40
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b58:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b64:	bf00      	nop
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b09c      	sub	sp, #112	@ 0x70
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b78:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 0320 	and.w	r3, r3, #32
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d171      	bne.n	8008c6c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008b88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b98:	e853 3f00 	ldrex	r3, [r3]
 8008b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ba4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ba6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008bb0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008bb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e6      	bne.n	8008b90 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3308      	adds	r3, #8
 8008bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bd4:	f023 0301 	bic.w	r3, r3, #1
 8008bd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8008bda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3308      	adds	r3, #8
 8008be0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008be2:	647a      	str	r2, [r7, #68]	@ 0x44
 8008be4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008be8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bea:	e841 2300 	strex	r3, r2, [r1]
 8008bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1e5      	bne.n	8008bc2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	3308      	adds	r3, #8
 8008bfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c00:	e853 3f00 	ldrex	r3, [r3]
 8008c04:	623b      	str	r3, [r7, #32]
   return(result);
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3308      	adds	r3, #8
 8008c14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008c16:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c1e:	e841 2300 	strex	r3, r2, [r1]
 8008c22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1e5      	bne.n	8008bf6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c2c:	2220      	movs	r2, #32
 8008c2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d118      	bne.n	8008c6c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	e853 3f00 	ldrex	r3, [r3]
 8008c46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f023 0310 	bic.w	r3, r3, #16
 8008c4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	461a      	mov	r2, r3
 8008c56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c58:	61fb      	str	r3, [r7, #28]
 8008c5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5c:	69b9      	ldr	r1, [r7, #24]
 8008c5e:	69fa      	ldr	r2, [r7, #28]
 8008c60:	e841 2300 	strex	r3, r2, [r1]
 8008c64:	617b      	str	r3, [r7, #20]
   return(result);
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1e6      	bne.n	8008c3a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c6e:	2200      	movs	r2, #0
 8008c70:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d109      	bne.n	8008c8e <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8008c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008c80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008c82:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008c86:	4611      	mov	r1, r2
 8008c88:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008c8a:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c8c:	e004      	b.n	8008c98 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8008c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008c96:	4798      	blx	r3
}
 8008c98:	bf00      	nop
 8008c9a:	3770      	adds	r7, #112	@ 0x70
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d10b      	bne.n	8008cd4 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008cc8:	0852      	lsrs	r2, r2, #1
 8008cca:	b292      	uxth	r2, r2
 8008ccc:	4611      	mov	r1, r2
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008cd2:	e004      	b.n	8008cde <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	4798      	blx	r3
}
 8008cde:	bf00      	nop
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b086      	sub	sp, #24
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cfa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d02:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d0e:	2b80      	cmp	r3, #128	@ 0x80
 8008d10:	d109      	bne.n	8008d26 <UART_DMAError+0x40>
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	2b21      	cmp	r3, #33	@ 0x21
 8008d16:	d106      	bne.n	8008d26 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008d20:	6978      	ldr	r0, [r7, #20]
 8008d22:	f7ff fe1d 	bl	8008960 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d30:	2b40      	cmp	r3, #64	@ 0x40
 8008d32:	d109      	bne.n	8008d48 <UART_DMAError+0x62>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b22      	cmp	r3, #34	@ 0x22
 8008d38:	d106      	bne.n	8008d48 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008d42:	6978      	ldr	r0, [r7, #20]
 8008d44:	f7ff fe4d 	bl	80089e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d4e:	f043 0210 	orr.w	r2, r3, #16
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d5e:	6978      	ldr	r0, [r7, #20]
 8008d60:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d62:	bf00      	nop
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d92:	bf00      	nop
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b088      	sub	sp, #32
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	e853 3f00 	ldrex	r3, [r3]
 8008dae:	60bb      	str	r3, [r7, #8]
   return(result);
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008db6:	61fb      	str	r3, [r7, #28]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	61bb      	str	r3, [r7, #24]
 8008dc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	6979      	ldr	r1, [r7, #20]
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	e841 2300 	strex	r3, r2, [r1]
 8008dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e6      	bne.n	8008da2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2220      	movs	r2, #32
 8008dd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dec:	bf00      	nop
 8008dee:	3720      	adds	r7, #32
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008e10:	bf00      	nop
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d101      	bne.n	8008e46 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e42:	2302      	movs	r3, #2
 8008e44:	e027      	b.n	8008e96 <HAL_UARTEx_DisableFifoMode+0x66>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2224      	movs	r2, #36	@ 0x24
 8008e52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f022 0201 	bic.w	r2, r2, #1
 8008e6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008e74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2220      	movs	r2, #32
 8008e88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d101      	bne.n	8008eba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	e02d      	b.n	8008f16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2224      	movs	r2, #36	@ 0x24
 8008ec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f022 0201 	bic.w	r2, r2, #1
 8008ee0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	683a      	ldr	r2, [r7, #0]
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f850 	bl	8008f9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2220      	movs	r2, #32
 8008f08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d101      	bne.n	8008f36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f32:	2302      	movs	r3, #2
 8008f34:	e02d      	b.n	8008f92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2224      	movs	r2, #36	@ 0x24
 8008f42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f022 0201 	bic.w	r2, r2, #1
 8008f5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f812 	bl	8008f9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2220      	movs	r2, #32
 8008f84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
	...

08008f9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d108      	bne.n	8008fbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008fbc:	e031      	b.n	8009022 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fbe:	2308      	movs	r3, #8
 8008fc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fc2:	2308      	movs	r3, #8
 8008fc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	0e5b      	lsrs	r3, r3, #25
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	f003 0307 	and.w	r3, r3, #7
 8008fd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	0f5b      	lsrs	r3, r3, #29
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	f003 0307 	and.w	r3, r3, #7
 8008fe4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	7b3a      	ldrb	r2, [r7, #12]
 8008fea:	4911      	ldr	r1, [pc, #68]	@ (8009030 <UARTEx_SetNbDataToProcess+0x94>)
 8008fec:	5c8a      	ldrb	r2, [r1, r2]
 8008fee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ff2:	7b3a      	ldrb	r2, [r7, #12]
 8008ff4:	490f      	ldr	r1, [pc, #60]	@ (8009034 <UARTEx_SetNbDataToProcess+0x98>)
 8008ff6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ff8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	7b7a      	ldrb	r2, [r7, #13]
 8009008:	4909      	ldr	r1, [pc, #36]	@ (8009030 <UARTEx_SetNbDataToProcess+0x94>)
 800900a:	5c8a      	ldrb	r2, [r1, r2]
 800900c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009010:	7b7a      	ldrb	r2, [r7, #13]
 8009012:	4908      	ldr	r1, [pc, #32]	@ (8009034 <UARTEx_SetNbDataToProcess+0x98>)
 8009014:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009016:	fb93 f3f2 	sdiv	r3, r3, r2
 800901a:	b29a      	uxth	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009022:	bf00      	nop
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	08009160 	.word	0x08009160
 8009034:	08009168 	.word	0x08009168

08009038 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	ed93 7a06 	vldr	s14, [r3, #24]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	edd3 7a07 	vldr	s15, [r3, #28]
 800904e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	edd3 7a08 	vldr	s15, [r3, #32]
 8009058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	edd3 7a06 	vldr	s15, [r3, #24]
 8009068:	eeb1 7a67 	vneg.f32	s14, s15
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	edd3 7a08 	vldr	s15, [r3, #32]
 8009072:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009076:	ee77 7a67 	vsub.f32	s15, s14, s15
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a1a      	ldr	r2, [r3, #32]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d006      	beq.n	800909c <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	330c      	adds	r3, #12
 8009092:	220c      	movs	r2, #12
 8009094:	2100      	movs	r1, #0
 8009096:	4618      	mov	r0, r3
 8009098:	f000 f804 	bl	80090a4 <memset>
  }

}
 800909c:	bf00      	nop
 800909e:	3708      	adds	r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <memset>:
 80090a4:	4402      	add	r2, r0
 80090a6:	4603      	mov	r3, r0
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d100      	bne.n	80090ae <memset+0xa>
 80090ac:	4770      	bx	lr
 80090ae:	f803 1b01 	strb.w	r1, [r3], #1
 80090b2:	e7f9      	b.n	80090a8 <memset+0x4>

080090b4 <__libc_init_array>:
 80090b4:	b570      	push	{r4, r5, r6, lr}
 80090b6:	4d0d      	ldr	r5, [pc, #52]	@ (80090ec <__libc_init_array+0x38>)
 80090b8:	4c0d      	ldr	r4, [pc, #52]	@ (80090f0 <__libc_init_array+0x3c>)
 80090ba:	1b64      	subs	r4, r4, r5
 80090bc:	10a4      	asrs	r4, r4, #2
 80090be:	2600      	movs	r6, #0
 80090c0:	42a6      	cmp	r6, r4
 80090c2:	d109      	bne.n	80090d8 <__libc_init_array+0x24>
 80090c4:	4d0b      	ldr	r5, [pc, #44]	@ (80090f4 <__libc_init_array+0x40>)
 80090c6:	4c0c      	ldr	r4, [pc, #48]	@ (80090f8 <__libc_init_array+0x44>)
 80090c8:	f000 f826 	bl	8009118 <_init>
 80090cc:	1b64      	subs	r4, r4, r5
 80090ce:	10a4      	asrs	r4, r4, #2
 80090d0:	2600      	movs	r6, #0
 80090d2:	42a6      	cmp	r6, r4
 80090d4:	d105      	bne.n	80090e2 <__libc_init_array+0x2e>
 80090d6:	bd70      	pop	{r4, r5, r6, pc}
 80090d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80090dc:	4798      	blx	r3
 80090de:	3601      	adds	r6, #1
 80090e0:	e7ee      	b.n	80090c0 <__libc_init_array+0xc>
 80090e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80090e6:	4798      	blx	r3
 80090e8:	3601      	adds	r6, #1
 80090ea:	e7f2      	b.n	80090d2 <__libc_init_array+0x1e>
 80090ec:	08009178 	.word	0x08009178
 80090f0:	08009178 	.word	0x08009178
 80090f4:	08009178 	.word	0x08009178
 80090f8:	0800917c 	.word	0x0800917c

080090fc <memcpy>:
 80090fc:	440a      	add	r2, r1
 80090fe:	4291      	cmp	r1, r2
 8009100:	f100 33ff 	add.w	r3, r0, #4294967295
 8009104:	d100      	bne.n	8009108 <memcpy+0xc>
 8009106:	4770      	bx	lr
 8009108:	b510      	push	{r4, lr}
 800910a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800910e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009112:	4291      	cmp	r1, r2
 8009114:	d1f9      	bne.n	800910a <memcpy+0xe>
 8009116:	bd10      	pop	{r4, pc}

08009118 <_init>:
 8009118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911a:	bf00      	nop
 800911c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800911e:	bc08      	pop	{r3}
 8009120:	469e      	mov	lr, r3
 8009122:	4770      	bx	lr

08009124 <_fini>:
 8009124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009126:	bf00      	nop
 8009128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800912a:	bc08      	pop	{r3}
 800912c:	469e      	mov	lr, r3
 800912e:	4770      	bx	lr
