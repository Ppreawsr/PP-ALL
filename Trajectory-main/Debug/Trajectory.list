
Trajectory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045a4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800477c  0800477c  0000577c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047bc  080047bc  00006020  2**0
                  CONTENTS
  4 .ARM          00000008  080047bc  080047bc  000057bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047c4  080047c4  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c4  080047c4  000057c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047c8  080047c8  000057c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080047cc  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000020  080047ec  00006020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  080047ec  0000619c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012942  00000000  00000000  00006050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024fd  00000000  00000000  00018992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  0001ae90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9c  00000000  00000000  0001bea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a19  00000000  00000000  0001cb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012cf0  00000000  00000000  0004355d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd2d9  00000000  00000000  0005624d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153526  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000467c  00000000  00000000  0015356c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00157be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004764 	.word	0x08004764

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08004764 	.word	0x08004764

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b78:	f000 b96a 	b.w	8000e50 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14e      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	458c      	cmp	ip, r1
 8000ba4:	4686      	mov	lr, r0
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	d962      	bls.n	8000c72 <__udivmoddi4+0xde>
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f f68c 	uxth.w	r6, ip
 8000bca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bda:	fb04 f106 	mul.w	r1, r4, r6
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bea:	f080 8112 	bcs.w	8000e12 <__udivmoddi4+0x27e>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 810f 	bls.w	8000e12 <__udivmoddi4+0x27e>
 8000bf4:	3c02      	subs	r4, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a59      	subs	r1, r3, r1
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c02:	fb07 1110 	mls	r1, r7, r0, r1
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb00 f606 	mul.w	r6, r0, r6
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x94>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c1a:	f080 80fc 	bcs.w	8000e16 <__udivmoddi4+0x282>
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	f240 80f9 	bls.w	8000e16 <__udivmoddi4+0x282>
 8000c24:	4463      	add	r3, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	1b9b      	subs	r3, r3, r6
 8000c2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c2e:	2100      	movs	r1, #0
 8000c30:	b11d      	cbz	r5, 8000c3a <__udivmoddi4+0xa6>
 8000c32:	40d3      	lsrs	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d905      	bls.n	8000c4e <__udivmoddi4+0xba>
 8000c42:	b10d      	cbz	r5, 8000c48 <__udivmoddi4+0xb4>
 8000c44:	e9c5 0100 	strd	r0, r1, [r5]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e7f5      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c4e:	fab3 f183 	clz	r1, r3
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d146      	bne.n	8000ce4 <__udivmoddi4+0x150>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xcc>
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	f0c0 80f0 	bcc.w	8000e40 <__udivmoddi4+0x2ac>
 8000c60:	1a86      	subs	r6, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d0e6      	beq.n	8000c3a <__udivmoddi4+0xa6>
 8000c6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c70:	e7e3      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	f040 8090 	bne.w	8000d98 <__udivmoddi4+0x204>
 8000c78:	eba1 040c 	sub.w	r4, r1, ip
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	fa1f f78c 	uxth.w	r7, ip
 8000c84:	2101      	movs	r1, #1
 8000c86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c96:	fb07 f006 	mul.w	r0, r7, r6
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x11c>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x11a>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f200 80cd 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000cae:	4626      	mov	r6, r4
 8000cb0:	1a1c      	subs	r4, r3, r0
 8000cb2:	fa1f f38e 	uxth.w	r3, lr
 8000cb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cba:	fb08 4410 	mls	r4, r8, r0, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb00 f707 	mul.w	r7, r0, r7
 8000cc6:	429f      	cmp	r7, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x148>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x146>
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	f200 80b0 	bhi.w	8000e3a <__udivmoddi4+0x2a6>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	1bdb      	subs	r3, r3, r7
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	e7a5      	b.n	8000c30 <__udivmoddi4+0x9c>
 8000ce4:	f1c1 0620 	rsb	r6, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 f706 	lsr.w	r7, r2, r6
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf8:	ea43 030c 	orr.w	r3, r3, ip
 8000cfc:	40f4      	lsrs	r4, r6
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	0c38      	lsrs	r0, r7, #16
 8000d04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d08:	fbb4 fef0 	udiv	lr, r4, r0
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fb00 441e 	mls	r4, r0, lr, r4
 8000d14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d18:	fb0e f90c 	mul.w	r9, lr, ip
 8000d1c:	45a1      	cmp	r9, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x1a6>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d2a:	f080 8084 	bcs.w	8000e36 <__udivmoddi4+0x2a2>
 8000d2e:	45a1      	cmp	r9, r4
 8000d30:	f240 8081 	bls.w	8000e36 <__udivmoddi4+0x2a2>
 8000d34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	eba4 0409 	sub.w	r4, r4, r9
 8000d3e:	fa1f f983 	uxth.w	r9, r3
 8000d42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d46:	fb00 4413 	mls	r4, r0, r3, r4
 8000d4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x1d2>
 8000d56:	193c      	adds	r4, r7, r4
 8000d58:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d5c:	d267      	bcs.n	8000e2e <__udivmoddi4+0x29a>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	d965      	bls.n	8000e2e <__udivmoddi4+0x29a>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	429c      	cmp	r4, r3
 8000d74:	46ce      	mov	lr, r9
 8000d76:	469c      	mov	ip, r3
 8000d78:	d351      	bcc.n	8000e1e <__udivmoddi4+0x28a>
 8000d7a:	d04e      	beq.n	8000e1a <__udivmoddi4+0x286>
 8000d7c:	b155      	cbz	r5, 8000d94 <__udivmoddi4+0x200>
 8000d7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d82:	eb64 040c 	sbc.w	r4, r4, ip
 8000d86:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8a:	40cb      	lsrs	r3, r1
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	40cc      	lsrs	r4, r1
 8000d90:	e9c5 6400 	strd	r6, r4, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	e750      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa24 f303 	lsr.w	r3, r4, r3
 8000da8:	4094      	lsls	r4, r2
 8000daa:	430c      	orrs	r4, r1
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc6:	fb00 f107 	mul.w	r1, r0, r7
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x24c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000dd6:	d22c      	bcs.n	8000e32 <__udivmoddi4+0x29e>
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d92a      	bls.n	8000e32 <__udivmoddi4+0x29e>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df0:	fb01 f307 	mul.w	r3, r1, r7
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x276>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e00:	d213      	bcs.n	8000e2a <__udivmoddi4+0x296>
 8000e02:	42a3      	cmp	r3, r4
 8000e04:	d911      	bls.n	8000e2a <__udivmoddi4+0x296>
 8000e06:	3902      	subs	r1, #2
 8000e08:	4464      	add	r4, ip
 8000e0a:	1ae4      	subs	r4, r4, r3
 8000e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e10:	e739      	b.n	8000c86 <__udivmoddi4+0xf2>
 8000e12:	4604      	mov	r4, r0
 8000e14:	e6f0      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e16:	4608      	mov	r0, r1
 8000e18:	e706      	b.n	8000c28 <__udivmoddi4+0x94>
 8000e1a:	45c8      	cmp	r8, r9
 8000e1c:	d2ae      	bcs.n	8000d7c <__udivmoddi4+0x1e8>
 8000e1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7a8      	b.n	8000d7c <__udivmoddi4+0x1e8>
 8000e2a:	4631      	mov	r1, r6
 8000e2c:	e7ed      	b.n	8000e0a <__udivmoddi4+0x276>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	e799      	b.n	8000d66 <__udivmoddi4+0x1d2>
 8000e32:	4630      	mov	r0, r6
 8000e34:	e7d4      	b.n	8000de0 <__udivmoddi4+0x24c>
 8000e36:	46d6      	mov	lr, sl
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1a6>
 8000e3a:	4463      	add	r3, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e74d      	b.n	8000cdc <__udivmoddi4+0x148>
 8000e40:	4606      	mov	r6, r0
 8000e42:	4623      	mov	r3, r4
 8000e44:	4608      	mov	r0, r1
 8000e46:	e70f      	b.n	8000c68 <__udivmoddi4+0xd4>
 8000e48:	3e02      	subs	r6, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	e730      	b.n	8000cb0 <__udivmoddi4+0x11c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e58:	f000 fc99 	bl	800178e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5c:	f000 f834 	bl	8000ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e60:	f000 f916 	bl	8001090 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000e64:	f000 f87c 	bl	8000f60 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000e68:	f000 f8c4 	bl	8000ff4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  PID.Kp =0.1;
 8000e6c:	4b10      	ldr	r3, [pc, #64]	@ (8000eb0 <main+0x5c>)
 8000e6e:	4a11      	ldr	r2, [pc, #68]	@ (8000eb4 <main+0x60>)
 8000e70:	619a      	str	r2, [r3, #24]
  PID.Ki =0.00001;
 8000e72:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <main+0x5c>)
 8000e74:	4a10      	ldr	r2, [pc, #64]	@ (8000eb8 <main+0x64>)
 8000e76:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.1;
 8000e78:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb0 <main+0x5c>)
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb4 <main+0x60>)
 8000e7c:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000e7e:	2100      	movs	r1, #0
 8000e80:	480b      	ldr	r0, [pc, #44]	@ (8000eb0 <main+0x5c>)
 8000e82:	f003 fc0d 	bl	80046a0 <arm_pid_init_f32>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (Mode == 1)
 8000e86:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <main+0x68>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d1fb      	bne.n	8000e86 <main+0x32>
	  {
		  generate_trapezoidal_velocity_profile(time_op, position_goal);
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <main+0x6c>)
 8000e90:	ed93 7b00 	vldr	d7, [r3]
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <main+0x70>)
 8000e96:	ed93 6b00 	vldr	d6, [r3]
 8000e9a:	eeb0 1a46 	vmov.f32	s2, s12
 8000e9e:	eef0 1a66 	vmov.f32	s3, s13
 8000ea2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ea6:	eef0 0a67 	vmov.f32	s1, s15
 8000eaa:	f000 f95f 	bl	800116c <generate_trapezoidal_velocity_profile>
	  if (Mode == 1)
 8000eae:	e7ea      	b.n	8000e86 <main+0x32>
 8000eb0:	20000170 	.word	0x20000170
 8000eb4:	3dcccccd 	.word	0x3dcccccd
 8000eb8:	3727c5ac 	.word	0x3727c5ac
 8000ebc:	20000168 	.word	0x20000168
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b094      	sub	sp, #80	@ 0x50
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	2238      	movs	r2, #56	@ 0x38
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 fc18 	bl	800470c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 ff82 	bl	8001df4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000efa:	2340      	movs	r3, #64	@ 0x40
 8000efc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efe:	2302      	movs	r3, #2
 8000f00:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f02:	2302      	movs	r3, #2
 8000f04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f06:	2304      	movs	r3, #4
 8000f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f0a:	2355      	movs	r3, #85	@ 0x55
 8000f0c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f16:	2302      	movs	r3, #2
 8000f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1a:	f107 0318 	add.w	r3, r7, #24
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 f81c 	bl	8001f5c <HAL_RCC_OscConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f2a:	f000 fb0d 	bl	8001548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2e:	230f      	movs	r3, #15
 8000f30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f32:	2303      	movs	r3, #3
 8000f34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2104      	movs	r1, #4
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 fb1a 	bl	8002580 <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f52:	f000 faf9 	bl	8001548 <Error_Handler>
  }
}
 8000f56:	bf00      	nop
 8000f58:	3750      	adds	r7, #80	@ 0x50
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f64:	4b21      	ldr	r3, [pc, #132]	@ (8000fec <MX_LPUART1_UART_Init+0x8c>)
 8000f66:	4a22      	ldr	r2, [pc, #136]	@ (8000ff0 <MX_LPUART1_UART_Init+0x90>)
 8000f68:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f6a:	4b20      	ldr	r3, [pc, #128]	@ (8000fec <MX_LPUART1_UART_Init+0x8c>)
 8000f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f70:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f72:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <MX_LPUART1_UART_Init+0x8c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f78:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <MX_LPUART1_UART_Init+0x8c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <MX_LPUART1_UART_Init+0x8c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f84:	4b19      	ldr	r3, [pc, #100]	@ (8000fec <MX_LPUART1_UART_Init+0x8c>)
 8000f86:	220c      	movs	r2, #12
 8000f88:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <MX_LPUART1_UART_Init+0x8c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f90:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <MX_LPUART1_UART_Init+0x8c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <MX_LPUART1_UART_Init+0x8c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f9c:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <MX_LPUART1_UART_Init+0x8c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000fa2:	4812      	ldr	r0, [pc, #72]	@ (8000fec <MX_LPUART1_UART_Init+0x8c>)
 8000fa4:	f002 fd0e 	bl	80039c4 <HAL_UART_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fae:	f000 facb 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	480d      	ldr	r0, [pc, #52]	@ (8000fec <MX_LPUART1_UART_Init+0x8c>)
 8000fb6:	f003 faa9 	bl	800450c <HAL_UARTEx_SetTxFifoThreshold>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000fc0:	f000 fac2 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4809      	ldr	r0, [pc, #36]	@ (8000fec <MX_LPUART1_UART_Init+0x8c>)
 8000fc8:	f003 fade 	bl	8004588 <HAL_UARTEx_SetRxFifoThreshold>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000fd2:	f000 fab9 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	@ (8000fec <MX_LPUART1_UART_Init+0x8c>)
 8000fd8:	f003 fa5f 	bl	800449a <HAL_UARTEx_DisableFifoMode>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000fe2:	f000 fab1 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000003c 	.word	0x2000003c
 8000ff0:	40008000 	.word	0x40008000

08000ff4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <MX_TIM2_Init+0x98>)
 8001014:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001018:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_TIM2_Init+0x98>)
 800101c:	22a9      	movs	r2, #169	@ 0xa9
 800101e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <MX_TIM2_Init+0x98>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001026:	4b19      	ldr	r3, [pc, #100]	@ (800108c <MX_TIM2_Init+0x98>)
 8001028:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800102c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <MX_TIM2_Init+0x98>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b15      	ldr	r3, [pc, #84]	@ (800108c <MX_TIM2_Init+0x98>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800103a:	4814      	ldr	r0, [pc, #80]	@ (800108c <MX_TIM2_Init+0x98>)
 800103c:	f001 ff0a 	bl	8002e54 <HAL_TIM_Base_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001046:	f000 fa7f 	bl	8001548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800104e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4619      	mov	r1, r3
 8001056:	480d      	ldr	r0, [pc, #52]	@ (800108c <MX_TIM2_Init+0x98>)
 8001058:	f002 f94a 	bl	80032f0 <HAL_TIM_ConfigClockSource>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001062:	f000 fa71 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	@ (800108c <MX_TIM2_Init+0x98>)
 8001074:	f002 fbca 	bl	800380c <HAL_TIMEx_MasterConfigSynchronization>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800107e:	f000 fa63 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	3720      	adds	r7, #32
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200000d0 	.word	0x200000d0

08001090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	@ 0x28
 8001094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001164 <MX_GPIO_Init+0xd4>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a2e      	ldr	r2, [pc, #184]	@ (8001164 <MX_GPIO_Init+0xd4>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001164 <MX_GPIO_Init+0xd4>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010be:	4b29      	ldr	r3, [pc, #164]	@ (8001164 <MX_GPIO_Init+0xd4>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a28      	ldr	r2, [pc, #160]	@ (8001164 <MX_GPIO_Init+0xd4>)
 80010c4:	f043 0320 	orr.w	r3, r3, #32
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b26      	ldr	r3, [pc, #152]	@ (8001164 <MX_GPIO_Init+0xd4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0320 	and.w	r3, r3, #32
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b23      	ldr	r3, [pc, #140]	@ (8001164 <MX_GPIO_Init+0xd4>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	4a22      	ldr	r2, [pc, #136]	@ (8001164 <MX_GPIO_Init+0xd4>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e2:	4b20      	ldr	r3, [pc, #128]	@ (8001164 <MX_GPIO_Init+0xd4>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <MX_GPIO_Init+0xd4>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001164 <MX_GPIO_Init+0xd4>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <MX_GPIO_Init+0xd4>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	2120      	movs	r1, #32
 800110a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800110e:	f000 fe41 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001112:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001118:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800111c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	480f      	ldr	r0, [pc, #60]	@ (8001168 <MX_GPIO_Init+0xd8>)
 800112a:	f000 fcb1 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800112e:	2320      	movs	r3, #32
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001148:	f000 fca2 	bl	8001a90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	2028      	movs	r0, #40	@ 0x28
 8001152:	f000 fc68 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001156:	2028      	movs	r0, #40	@ 0x28
 8001158:	f000 fc7f 	bl	8001a5a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	@ 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40021000 	.word	0x40021000
 8001168:	48000800 	.word	0x48000800

0800116c <generate_trapezoidal_velocity_profile>:

/* USER CODE BEGIN 4 */

void generate_trapezoidal_velocity_profile(double t2, double x2) {
 800116c:	b5b0      	push	{r4, r5, r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	ed87 0b02 	vstr	d0, [r7, #8]
 8001176:	ed87 1b00 	vstr	d1, [r7]
  // Total displacement and time interval
	total_displacement = x2 - position_now;
 800117a:	4b29      	ldr	r3, [pc, #164]	@ (8001220 <generate_trapezoidal_velocity_profile+0xb4>)
 800117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001180:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001184:	f7ff f84c 	bl	8000220 <__aeabi_dsub>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4925      	ldr	r1, [pc, #148]	@ (8001224 <generate_trapezoidal_velocity_profile+0xb8>)
 800118e:	e9c1 2300 	strd	r2, r3, [r1]
	total_time = t2;
 8001192:	4925      	ldr	r1, [pc, #148]	@ (8001228 <generate_trapezoidal_velocity_profile+0xbc>)
 8001194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001198:	e9c1 2300 	strd	r2, r3, [r1]

  // Calculate optimal acceleration time (t_acc) - Assume a reasonable value
	t_acc = total_time / 4;  // This is an assumption; you can adjust it
 800119c:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <generate_trapezoidal_velocity_profile+0xbc>)
 800119e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b21      	ldr	r3, [pc, #132]	@ (800122c <generate_trapezoidal_velocity_profile+0xc0>)
 80011a8:	f7ff fb1c 	bl	80007e4 <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	491f      	ldr	r1, [pc, #124]	@ (8001230 <generate_trapezoidal_velocity_profile+0xc4>)
 80011b2:	e9c1 2300 	strd	r2, r3, [r1]

  // Remaining time for constant velocity phase
	t_const = total_time - 2 * t_acc;
 80011b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <generate_trapezoidal_velocity_profile+0xbc>)
 80011b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80011bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001230 <generate_trapezoidal_velocity_profile+0xc4>)
 80011be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	f7ff f82d 	bl	8000224 <__adddf3>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4620      	mov	r0, r4
 80011d0:	4629      	mov	r1, r5
 80011d2:	f7ff f825 	bl	8000220 <__aeabi_dsub>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4916      	ldr	r1, [pc, #88]	@ (8001234 <generate_trapezoidal_velocity_profile+0xc8>)
 80011dc:	e9c1 2300 	strd	r2, r3, [r1]

  // Calculate peak velocity
	Peak = total_displacement / (t_acc + t_const);
 80011e0:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <generate_trapezoidal_velocity_profile+0xb8>)
 80011e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80011e6:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <generate_trapezoidal_velocity_profile+0xc4>)
 80011e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <generate_trapezoidal_velocity_profile+0xc8>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7ff f817 	bl	8000224 <__adddf3>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4620      	mov	r0, r4
 80011fc:	4629      	mov	r1, r5
 80011fe:	f7ff faf1 	bl	80007e4 <__aeabi_ddiv>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	490c      	ldr	r1, [pc, #48]	@ (8001238 <generate_trapezoidal_velocity_profile+0xcc>)
 8001208:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_TIM_Base_Start_IT(&htim2);
 800120c:	480b      	ldr	r0, [pc, #44]	@ (800123c <generate_trapezoidal_velocity_profile+0xd0>)
 800120e:	f001 fe79 	bl	8002f04 <HAL_TIM_Base_Start_IT>

	Mode = 0;
 8001212:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <generate_trapezoidal_velocity_profile+0xd4>)
 8001214:	2200      	movs	r2, #0
 8001216:	801a      	strh	r2, [r3, #0]

  }
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bdb0      	pop	{r4, r5, r7, pc}
 8001220:	20000120 	.word	0x20000120
 8001224:	20000128 	.word	0x20000128
 8001228:	20000130 	.word	0x20000130
 800122c:	40100000 	.word	0x40100000
 8001230:	20000138 	.word	0x20000138
 8001234:	20000140 	.word	0x20000140
 8001238:	20000148 	.word	0x20000148
 800123c:	200000d0 	.word	0x200000d0
 8001240:	20000168 	.word	0x20000168

08001244 <generate_Velocity>:

void generate_Velocity()
{
 8001244:	b5b0      	push	{r4, r5, r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
	t = (time_op) * i / num_points;
 800124a:	4b98      	ldr	r3, [pc, #608]	@ (80014ac <generate_Velocity+0x268>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f7ff f966 	bl	8000524 <__aeabi_ul2d>
 8001258:	4b95      	ldr	r3, [pc, #596]	@ (80014b0 <generate_Velocity+0x26c>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	f7ff f997 	bl	8000590 <__aeabi_dmul>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4614      	mov	r4, r2
 8001268:	461d      	mov	r5, r3
 800126a:	4b92      	ldr	r3, [pc, #584]	@ (80014b4 <generate_Velocity+0x270>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f924 	bl	80004bc <__aeabi_i2d>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4620      	mov	r0, r4
 800127a:	4629      	mov	r1, r5
 800127c:	f7ff fab2 	bl	80007e4 <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	498c      	ldr	r1, [pc, #560]	@ (80014b8 <generate_Velocity+0x274>)
 8001286:	e9c1 2300 	strd	r2, r3, [r1]
		        if (t < t_acc) {
 800128a:	4b8b      	ldr	r3, [pc, #556]	@ (80014b8 <generate_Velocity+0x274>)
 800128c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001290:	4b8a      	ldr	r3, [pc, #552]	@ (80014bc <generate_Velocity+0x278>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	f7ff fbed 	bl	8000a74 <__aeabi_dcmplt>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d01a      	beq.n	80012d6 <generate_Velocity+0x92>
		          velocity = (Peak * (t / t_acc));
 80012a0:	4b85      	ldr	r3, [pc, #532]	@ (80014b8 <generate_Velocity+0x274>)
 80012a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012a6:	4b85      	ldr	r3, [pc, #532]	@ (80014bc <generate_Velocity+0x278>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff fa9a 	bl	80007e4 <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	4b81      	ldr	r3, [pc, #516]	@ (80014c0 <generate_Velocity+0x27c>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f7ff f967 	bl	8000590 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fbfb 	bl	8000ac4 <__aeabi_d2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a7c      	ldr	r2, [pc, #496]	@ (80014c4 <generate_Velocity+0x280>)
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	e04c      	b.n	8001370 <generate_Velocity+0x12c>
		        } else if (t >= t_acc && t <+ t_acc + t_const) {
 80012d6:	4b78      	ldr	r3, [pc, #480]	@ (80014b8 <generate_Velocity+0x274>)
 80012d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012dc:	4b77      	ldr	r3, [pc, #476]	@ (80014bc <generate_Velocity+0x278>)
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	f7ff fbdb 	bl	8000a9c <__aeabi_dcmpge>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d01e      	beq.n	800132a <generate_Velocity+0xe6>
 80012ec:	4b73      	ldr	r3, [pc, #460]	@ (80014bc <generate_Velocity+0x278>)
 80012ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012f2:	4b75      	ldr	r3, [pc, #468]	@ (80014c8 <generate_Velocity+0x284>)
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	f7fe ff94 	bl	8000224 <__adddf3>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	4b6c      	ldr	r3, [pc, #432]	@ (80014b8 <generate_Velocity+0x274>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	f7ff fbd1 	bl	8000ab0 <__aeabi_dcmpgt>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00a      	beq.n	800132a <generate_Velocity+0xe6>
		          velocity = Peak;
 8001314:	4b6a      	ldr	r3, [pc, #424]	@ (80014c0 <generate_Velocity+0x27c>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fbd1 	bl	8000ac4 <__aeabi_d2f>
 8001322:	4603      	mov	r3, r0
 8001324:	4a67      	ldr	r2, [pc, #412]	@ (80014c4 <generate_Velocity+0x280>)
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	e022      	b.n	8001370 <generate_Velocity+0x12c>
		        } else {
		          velocity = (Peak * ((time_op - t) / t_acc));
 800132a:	4b61      	ldr	r3, [pc, #388]	@ (80014b0 <generate_Velocity+0x26c>)
 800132c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001330:	4b61      	ldr	r3, [pc, #388]	@ (80014b8 <generate_Velocity+0x274>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	f7fe ff73 	bl	8000220 <__aeabi_dsub>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	4b5e      	ldr	r3, [pc, #376]	@ (80014bc <generate_Velocity+0x278>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff fa4c 	bl	80007e4 <__aeabi_ddiv>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	4b5a      	ldr	r3, [pc, #360]	@ (80014c0 <generate_Velocity+0x27c>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff f919 	bl	8000590 <__aeabi_dmul>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4610      	mov	r0, r2
 8001364:	4619      	mov	r1, r3
 8001366:	f7ff fbad 	bl	8000ac4 <__aeabi_d2f>
 800136a:	4603      	mov	r3, r0
 800136c:	4a55      	ldr	r2, [pc, #340]	@ (80014c4 <generate_Velocity+0x280>)
 800136e:	6013      	str	r3, [r2, #0]
		        }
		        position += velocity/1000.0;
 8001370:	4b56      	ldr	r3, [pc, #344]	@ (80014cc <generate_Velocity+0x288>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8b3 	bl	80004e0 <__aeabi_f2d>
 800137a:	4604      	mov	r4, r0
 800137c:	460d      	mov	r5, r1
 800137e:	4b51      	ldr	r3, [pc, #324]	@ (80014c4 <generate_Velocity+0x280>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8ac 	bl	80004e0 <__aeabi_f2d>
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b50      	ldr	r3, [pc, #320]	@ (80014d0 <generate_Velocity+0x28c>)
 800138e:	f7ff fa29 	bl	80007e4 <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4620      	mov	r0, r4
 8001398:	4629      	mov	r1, r5
 800139a:	f7fe ff43 	bl	8000224 <__adddf3>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f7ff fb8d 	bl	8000ac4 <__aeabi_d2f>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4a47      	ldr	r2, [pc, #284]	@ (80014cc <generate_Velocity+0x288>)
 80013ae:	6013      	str	r3, [r2, #0]

		        position_now = position;
 80013b0:	4b46      	ldr	r3, [pc, #280]	@ (80014cc <generate_Velocity+0x288>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f893 	bl	80004e0 <__aeabi_f2d>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4945      	ldr	r1, [pc, #276]	@ (80014d4 <generate_Velocity+0x290>)
 80013c0:	e9c1 2300 	strd	r2, r3, [r1]

		        Vfeedback = arm_pid_f32(&PID, position_now - qei);
 80013c4:	4b43      	ldr	r3, [pc, #268]	@ (80014d4 <generate_Velocity+0x290>)
 80013c6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80013ca:	4b43      	ldr	r3, [pc, #268]	@ (80014d8 <generate_Velocity+0x294>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f886 	bl	80004e0 <__aeabi_f2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4620      	mov	r0, r4
 80013da:	4629      	mov	r1, r5
 80013dc:	f7fe ff20 	bl	8000220 <__aeabi_dsub>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fb6c 	bl	8000ac4 <__aeabi_d2f>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a3b      	ldr	r2, [pc, #236]	@ (80014dc <generate_Velocity+0x298>)
 80013f0:	60fa      	str	r2, [r7, #12]
 80013f2:	60bb      	str	r3, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	ed93 7a00 	vldr	s14, [r3]
 80013fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80013fe:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	edd3 6a01 	vldr	s13, [r3, #4]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	edd3 7a03 	vldr	s15, [r3, #12]
 800140e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001412:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	edd3 6a02 	vldr	s13, [r3, #8]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001426:	ee37 7a27 	vadd.f32	s14, s14, s15
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001434:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a24      	ldr	r2, [pc, #144]	@ (80014e0 <generate_Velocity+0x29c>)
 8001450:	6013      	str	r3, [r2, #0]



//		        qei = PlantSimulation(Vfeeback);

		        if ( i >= time_op*1000)
 8001452:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <generate_Velocity+0x268>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff f862 	bl	8000524 <__aeabi_ul2d>
 8001460:	4604      	mov	r4, r0
 8001462:	460d      	mov	r5, r1
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <generate_Velocity+0x26c>)
 8001466:	e9d3 0100 	ldrd	r0, r1, [r3]
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <generate_Velocity+0x28c>)
 8001470:	f7ff f88e 	bl	8000590 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4620      	mov	r0, r4
 800147a:	4629      	mov	r1, r5
 800147c:	f7ff fb0e 	bl	8000a9c <__aeabi_dcmpge>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d100      	bne.n	8001488 <generate_Velocity+0x244>
		        {
		        	__HAL_TIM_SET_COUNTER(&htim2, 0);
		        	HAL_TIM_Base_Stop_IT(&htim2);
		        	i = 0;
		        }
}
 8001486:	e00d      	b.n	80014a4 <generate_Velocity+0x260>
		        	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001488:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <generate_Velocity+0x2a0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2200      	movs	r2, #0
 800148e:	625a      	str	r2, [r3, #36]	@ 0x24
		        	HAL_TIM_Base_Stop_IT(&htim2);
 8001490:	4814      	ldr	r0, [pc, #80]	@ (80014e4 <generate_Velocity+0x2a0>)
 8001492:	f001 fdaf 	bl	8002ff4 <HAL_TIM_Base_Stop_IT>
		        	i = 0;
 8001496:	4905      	ldr	r1, [pc, #20]	@ (80014ac <generate_Velocity+0x268>)
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bdb0      	pop	{r4, r5, r7, pc}
 80014ac:	20000150 	.word	0x20000150
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000010 	.word	0x20000010
 80014b8:	20000158 	.word	0x20000158
 80014bc:	20000138 	.word	0x20000138
 80014c0:	20000148 	.word	0x20000148
 80014c4:	20000160 	.word	0x20000160
 80014c8:	20000140 	.word	0x20000140
 80014cc:	20000164 	.word	0x20000164
 80014d0:	408f4000 	.word	0x408f4000
 80014d4:	20000120 	.word	0x20000120
 80014d8:	20000194 	.word	0x20000194
 80014dc:	20000170 	.word	0x20000170
 80014e0:	2000016c 	.word	0x2000016c
 80014e4:	200000d0 	.word	0x200000d0

080014e8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
if(GPIO_Pin == GPIO_PIN_13)
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014f8:	d102      	bne.n	8001500 <HAL_GPIO_EXTI_Callback+0x18>
{
	Mode = 1;
 80014fa:	4b04      	ldr	r3, [pc, #16]	@ (800150c <HAL_GPIO_EXTI_Callback+0x24>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	801a      	strh	r2, [r3, #0]
}
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	20000168 	.word	0x20000168

08001510 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
if(htim == &htim2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a09      	ldr	r2, [pc, #36]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d10a      	bne.n	8001536 <HAL_TIM_PeriodElapsedCallback+0x26>
{
	i+=1;
 8001520:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	1c54      	adds	r4, r2, #1
 8001528:	f143 0500 	adc.w	r5, r3, #0
 800152c:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800152e:	e9c3 4500 	strd	r4, r5, [r3]
	generate_Velocity();
 8001532:	f7ff fe87 	bl	8001244 <generate_Velocity>

}
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bdb0      	pop	{r4, r5, r7, pc}
 800153e:	bf00      	nop
 8001540:	200000d0 	.word	0x200000d0
 8001544:	20000150 	.word	0x20000150

08001548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800154c:	b672      	cpsid	i
}
 800154e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <Error_Handler+0x8>

08001554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <HAL_MspInit+0x44>)
 800155c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800155e:	4a0e      	ldr	r2, [pc, #56]	@ (8001598 <HAL_MspInit+0x44>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6613      	str	r3, [r2, #96]	@ 0x60
 8001566:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <HAL_MspInit+0x44>)
 8001568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <HAL_MspInit+0x44>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001576:	4a08      	ldr	r2, [pc, #32]	@ (8001598 <HAL_MspInit+0x44>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800157c:	6593      	str	r3, [r2, #88]	@ 0x58
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_MspInit+0x44>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800158a:	f000 fcd7 	bl	8001f3c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000

0800159c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b09e      	sub	sp, #120	@ 0x78
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	2254      	movs	r2, #84	@ 0x54
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f003 f8a5 	bl	800470c <memset>
  if(huart->Instance==LPUART1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001644 <HAL_UART_MspInit+0xa8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d136      	bne.n	800163a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80015cc:	2320      	movs	r3, #32
 80015ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	4618      	mov	r0, r3
 80015da:	f001 f9ed 	bl	80029b8 <HAL_RCCEx_PeriphCLKConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015e4:	f7ff ffb0 	bl	8001548 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80015e8:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <HAL_UART_MspInit+0xac>)
 80015ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ec:	4a16      	ldr	r2, [pc, #88]	@ (8001648 <HAL_UART_MspInit+0xac>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80015f4:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <HAL_UART_MspInit+0xac>)
 80015f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001600:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <HAL_UART_MspInit+0xac>)
 8001602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001604:	4a10      	ldr	r2, [pc, #64]	@ (8001648 <HAL_UART_MspInit+0xac>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800160c:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <HAL_UART_MspInit+0xac>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001618:	230c      	movs	r3, #12
 800161a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001628:	230c      	movs	r3, #12
 800162a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001630:	4619      	mov	r1, r3
 8001632:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001636:	f000 fa2b 	bl	8001a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800163a:	bf00      	nop
 800163c:	3778      	adds	r7, #120	@ 0x78
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40008000 	.word	0x40008000
 8001648:	40021000 	.word	0x40021000

0800164c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800165c:	d113      	bne.n	8001686 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800165e:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <HAL_TIM_Base_MspInit+0x44>)
 8001660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001662:	4a0b      	ldr	r2, [pc, #44]	@ (8001690 <HAL_TIM_Base_MspInit+0x44>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6593      	str	r3, [r2, #88]	@ 0x58
 800166a:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <HAL_TIM_Base_MspInit+0x44>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	201c      	movs	r0, #28
 800167c:	f000 f9d3 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001680:	201c      	movs	r0, #28
 8001682:	f000 f9ea 	bl	8001a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <NMI_Handler+0x4>

0800169c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <HardFault_Handler+0x4>

080016a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <MemManage_Handler+0x4>

080016ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <UsageFault_Handler+0x4>

080016bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ea:	f000 f8a3 	bl	8001834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016f8:	4802      	ldr	r0, [pc, #8]	@ (8001704 <TIM2_IRQHandler+0x10>)
 80016fa:	f001 fcaa 	bl	8003052 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200000d0 	.word	0x200000d0

08001708 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800170c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001710:	f000 fb58 	bl	8001dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}

08001718 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <SystemInit+0x20>)
 800171e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001722:	4a05      	ldr	r2, [pc, #20]	@ (8001738 <SystemInit+0x20>)
 8001724:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001728:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800173c:	480d      	ldr	r0, [pc, #52]	@ (8001774 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800173e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001740:	f7ff ffea 	bl	8001718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001744:	480c      	ldr	r0, [pc, #48]	@ (8001778 <LoopForever+0x6>)
  ldr r1, =_edata
 8001746:	490d      	ldr	r1, [pc, #52]	@ (800177c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001748:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <LoopForever+0xe>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <LoopForever+0x12>)
  ldr r4, =_ebss
 800175c:	4c0a      	ldr	r4, [pc, #40]	@ (8001788 <LoopForever+0x16>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176a:	f002 ffd7 	bl	800471c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800176e:	f7ff fb71 	bl	8000e54 <main>

08001772 <LoopForever>:

LoopForever:
    b LoopForever
 8001772:	e7fe      	b.n	8001772 <LoopForever>
  ldr   r0, =_estack
 8001774:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800177c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001780:	080047cc 	.word	0x080047cc
  ldr r2, =_sbss
 8001784:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001788:	2000019c 	.word	0x2000019c

0800178c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800178c:	e7fe      	b.n	800178c <ADC1_2_IRQHandler>

0800178e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 f939 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 f80e 	bl	80017c0 <HAL_InitTick>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	71fb      	strb	r3, [r7, #7]
 80017ae:	e001      	b.n	80017b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017b0:	f7ff fed0 	bl	8001554 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017b4:	79fb      	ldrb	r3, [r7, #7]

}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017cc:	4b16      	ldr	r3, [pc, #88]	@ (8001828 <HAL_InitTick+0x68>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d022      	beq.n	800181a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017d4:	4b15      	ldr	r3, [pc, #84]	@ (800182c <HAL_InitTick+0x6c>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <HAL_InitTick+0x68>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 f944 	bl	8001a76 <HAL_SYSTICK_Config>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10f      	bne.n	8001814 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b0f      	cmp	r3, #15
 80017f8:	d809      	bhi.n	800180e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fa:	2200      	movs	r2, #0
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001802:	f000 f910 	bl	8001a26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001806:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <HAL_InitTick+0x70>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	e007      	b.n	800181e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	73fb      	strb	r3, [r7, #15]
 8001812:	e004      	b.n	800181e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	e001      	b.n	800181e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2000001c 	.word	0x2000001c
 800182c:	20000014 	.word	0x20000014
 8001830:	20000018 	.word	0x20000018

08001834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <HAL_IncTick+0x1c>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <HAL_IncTick+0x20>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4413      	add	r3, r2
 8001842:	4a03      	ldr	r2, [pc, #12]	@ (8001850 <HAL_IncTick+0x1c>)
 8001844:	6013      	str	r3, [r2, #0]
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	20000198 	.word	0x20000198
 8001854:	2000001c 	.word	0x2000001c

08001858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return uwTick;
 800185c:	4b03      	ldr	r3, [pc, #12]	@ (800186c <HAL_GetTick+0x14>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000198 	.word	0x20000198

08001870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001880:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001898:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800189c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a2:	4a04      	ldr	r2, [pc, #16]	@ (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	60d3      	str	r3, [r2, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018bc:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <__NVIC_GetPriorityGrouping+0x18>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	f003 0307 	and.w	r3, r3, #7
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	db0b      	blt.n	80018fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	4907      	ldr	r1, [pc, #28]	@ (800190c <__NVIC_EnableIRQ+0x38>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	2001      	movs	r0, #1
 80018f6:	fa00 f202 	lsl.w	r2, r0, r2
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000e100 	.word	0xe000e100

08001910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	@ (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	@ (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	@ 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
         );
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	@ 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019f0:	f7ff ff8e 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff29 	bl	8001870 <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a34:	f7ff ff40 	bl	80018b8 <__NVIC_GetPriorityGrouping>
 8001a38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	6978      	ldr	r0, [r7, #20]
 8001a40:	f7ff ff90 	bl	8001964 <NVIC_EncodePriority>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff5f 	bl	8001910 <__NVIC_SetPriority>
}
 8001a52:	bf00      	nop
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff33 	bl	80018d4 <__NVIC_EnableIRQ>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ffa4 	bl	80019cc <SysTick_Config>
 8001a84:	4603      	mov	r3, r0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a9e:	e15a      	b.n	8001d56 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aac:	4013      	ands	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 814c 	beq.w	8001d50 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d005      	beq.n	8001ad0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d130      	bne.n	8001b32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b06:	2201      	movs	r2, #1
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	091b      	lsrs	r3, r3, #4
 8001b1c:	f003 0201 	and.w	r2, r3, #1
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d017      	beq.n	8001b6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d123      	bne.n	8001bc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	08da      	lsrs	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3208      	adds	r2, #8
 8001b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	220f      	movs	r2, #15
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	08da      	lsrs	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3208      	adds	r2, #8
 8001bbc:	6939      	ldr	r1, [r7, #16]
 8001bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	2203      	movs	r2, #3
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0203 	and.w	r2, r3, #3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 80a6 	beq.w	8001d50 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c04:	4b5b      	ldr	r3, [pc, #364]	@ (8001d74 <HAL_GPIO_Init+0x2e4>)
 8001c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c08:	4a5a      	ldr	r2, [pc, #360]	@ (8001d74 <HAL_GPIO_Init+0x2e4>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c10:	4b58      	ldr	r3, [pc, #352]	@ (8001d74 <HAL_GPIO_Init+0x2e4>)
 8001c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1c:	4a56      	ldr	r2, [pc, #344]	@ (8001d78 <HAL_GPIO_Init+0x2e8>)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	220f      	movs	r2, #15
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c46:	d01f      	beq.n	8001c88 <HAL_GPIO_Init+0x1f8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a4c      	ldr	r2, [pc, #304]	@ (8001d7c <HAL_GPIO_Init+0x2ec>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d019      	beq.n	8001c84 <HAL_GPIO_Init+0x1f4>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a4b      	ldr	r2, [pc, #300]	@ (8001d80 <HAL_GPIO_Init+0x2f0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d013      	beq.n	8001c80 <HAL_GPIO_Init+0x1f0>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a4a      	ldr	r2, [pc, #296]	@ (8001d84 <HAL_GPIO_Init+0x2f4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d00d      	beq.n	8001c7c <HAL_GPIO_Init+0x1ec>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a49      	ldr	r2, [pc, #292]	@ (8001d88 <HAL_GPIO_Init+0x2f8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d007      	beq.n	8001c78 <HAL_GPIO_Init+0x1e8>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a48      	ldr	r2, [pc, #288]	@ (8001d8c <HAL_GPIO_Init+0x2fc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d101      	bne.n	8001c74 <HAL_GPIO_Init+0x1e4>
 8001c70:	2305      	movs	r3, #5
 8001c72:	e00a      	b.n	8001c8a <HAL_GPIO_Init+0x1fa>
 8001c74:	2306      	movs	r3, #6
 8001c76:	e008      	b.n	8001c8a <HAL_GPIO_Init+0x1fa>
 8001c78:	2304      	movs	r3, #4
 8001c7a:	e006      	b.n	8001c8a <HAL_GPIO_Init+0x1fa>
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e004      	b.n	8001c8a <HAL_GPIO_Init+0x1fa>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e002      	b.n	8001c8a <HAL_GPIO_Init+0x1fa>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <HAL_GPIO_Init+0x1fa>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	f002 0203 	and.w	r2, r2, #3
 8001c90:	0092      	lsls	r2, r2, #2
 8001c92:	4093      	lsls	r3, r2
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c9a:	4937      	ldr	r1, [pc, #220]	@ (8001d78 <HAL_GPIO_Init+0x2e8>)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ca8:	4b39      	ldr	r3, [pc, #228]	@ (8001d90 <HAL_GPIO_Init+0x300>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ccc:	4a30      	ldr	r2, [pc, #192]	@ (8001d90 <HAL_GPIO_Init+0x300>)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d90 <HAL_GPIO_Init+0x300>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cf6:	4a26      	ldr	r2, [pc, #152]	@ (8001d90 <HAL_GPIO_Init+0x300>)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001cfc:	4b24      	ldr	r3, [pc, #144]	@ (8001d90 <HAL_GPIO_Init+0x300>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d20:	4a1b      	ldr	r2, [pc, #108]	@ (8001d90 <HAL_GPIO_Init+0x300>)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d26:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <HAL_GPIO_Init+0x300>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d4a:	4a11      	ldr	r2, [pc, #68]	@ (8001d90 <HAL_GPIO_Init+0x300>)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3301      	adds	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f47f ae9d 	bne.w	8001aa0 <HAL_GPIO_Init+0x10>
  }
}
 8001d66:	bf00      	nop
 8001d68:	bf00      	nop
 8001d6a:	371c      	adds	r7, #28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	48000400 	.word	0x48000400
 8001d80:	48000800 	.word	0x48000800
 8001d84:	48000c00 	.word	0x48000c00
 8001d88:	48001000 	.word	0x48001000
 8001d8c:	48001400 	.word	0x48001400
 8001d90:	40010400 	.word	0x40010400

08001d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001db0:	e002      	b.n	8001db8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001db2:	887a      	ldrh	r2, [r7, #2]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dce:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d006      	beq.n	8001de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dda:	4a05      	ldr	r2, [pc, #20]	@ (8001df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fb80 	bl	80014e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40010400 	.word	0x40010400

08001df4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d141      	bne.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e02:	4b4b      	ldr	r3, [pc, #300]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e0e:	d131      	bne.n	8001e74 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e10:	4b47      	ldr	r3, [pc, #284]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e16:	4a46      	ldr	r2, [pc, #280]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e20:	4b43      	ldr	r3, [pc, #268]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e28:	4a41      	ldr	r2, [pc, #260]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e30:	4b40      	ldr	r3, [pc, #256]	@ (8001f34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2232      	movs	r2, #50	@ 0x32
 8001e36:	fb02 f303 	mul.w	r3, r2, r3
 8001e3a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e40:	0c9b      	lsrs	r3, r3, #18
 8001e42:	3301      	adds	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e46:	e002      	b.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e4e:	4b38      	ldr	r3, [pc, #224]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e5a:	d102      	bne.n	8001e62 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f2      	bne.n	8001e48 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e62:	4b33      	ldr	r3, [pc, #204]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e6e:	d158      	bne.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e057      	b.n	8001f24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e74:	4b2e      	ldr	r3, [pc, #184]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e7a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e84:	e04d      	b.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e8c:	d141      	bne.n	8001f12 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e8e:	4b28      	ldr	r3, [pc, #160]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e9a:	d131      	bne.n	8001f00 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e9c:	4b24      	ldr	r3, [pc, #144]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ea2:	4a23      	ldr	r2, [pc, #140]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ea8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eac:	4b20      	ldr	r3, [pc, #128]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001eb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2232      	movs	r2, #50	@ 0x32
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ecc:	0c9b      	lsrs	r3, r3, #18
 8001ece:	3301      	adds	r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ed2:	e002      	b.n	8001eda <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ee6:	d102      	bne.n	8001eee <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f2      	bne.n	8001ed4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eee:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001efa:	d112      	bne.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e011      	b.n	8001f24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f00:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f06:	4a0a      	ldr	r2, [pc, #40]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f10:	e007      	b.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f12:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f1a:	4a05      	ldr	r2, [pc, #20]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f20:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	40007000 	.word	0x40007000
 8001f34:	20000014 	.word	0x20000014
 8001f38:	431bde83 	.word	0x431bde83

08001f3c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f40:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a04      	ldr	r2, [pc, #16]	@ (8001f58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f4a:	6093      	str	r3, [r2, #8]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40007000 	.word	0x40007000

08001f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e2fe      	b.n	800256c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d075      	beq.n	8002066 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7a:	4b97      	ldr	r3, [pc, #604]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f84:	4b94      	ldr	r3, [pc, #592]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	2b0c      	cmp	r3, #12
 8001f92:	d102      	bne.n	8001f9a <HAL_RCC_OscConfig+0x3e>
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d002      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x44>
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	4b8d      	ldr	r3, [pc, #564]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d05b      	beq.n	8002064 <HAL_RCC_OscConfig+0x108>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d157      	bne.n	8002064 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e2d9      	b.n	800256c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fc0:	d106      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x74>
 8001fc2:	4b85      	ldr	r3, [pc, #532]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a84      	ldr	r2, [pc, #528]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e01d      	b.n	800200c <HAL_RCC_OscConfig+0xb0>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x98>
 8001fda:	4b7f      	ldr	r3, [pc, #508]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a7e      	ldr	r2, [pc, #504]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8001fe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a7b      	ldr	r2, [pc, #492]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8001fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e00b      	b.n	800200c <HAL_RCC_OscConfig+0xb0>
 8001ff4:	4b78      	ldr	r3, [pc, #480]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a77      	ldr	r2, [pc, #476]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8001ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b75      	ldr	r3, [pc, #468]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a74      	ldr	r2, [pc, #464]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8002006:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800200a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d013      	beq.n	800203c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7ff fc20 	bl	8001858 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800201c:	f7ff fc1c 	bl	8001858 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b64      	cmp	r3, #100	@ 0x64
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e29e      	b.n	800256c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800202e:	4b6a      	ldr	r3, [pc, #424]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0xc0>
 800203a:	e014      	b.n	8002066 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7ff fc0c 	bl	8001858 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002044:	f7ff fc08 	bl	8001858 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	@ 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e28a      	b.n	800256c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002056:	4b60      	ldr	r3, [pc, #384]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0xe8>
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d075      	beq.n	800215e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002072:	4b59      	ldr	r3, [pc, #356]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800207c:	4b56      	ldr	r3, [pc, #344]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	2b0c      	cmp	r3, #12
 800208a:	d102      	bne.n	8002092 <HAL_RCC_OscConfig+0x136>
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d002      	beq.n	8002098 <HAL_RCC_OscConfig+0x13c>
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b04      	cmp	r3, #4
 8002096:	d11f      	bne.n	80020d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002098:	4b4f      	ldr	r3, [pc, #316]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_OscConfig+0x154>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e25d      	b.n	800256c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b0:	4b49      	ldr	r3, [pc, #292]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	061b      	lsls	r3, r3, #24
 80020be:	4946      	ldr	r1, [pc, #280]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020c4:	4b45      	ldr	r3, [pc, #276]	@ (80021dc <HAL_RCC_OscConfig+0x280>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fb79 	bl	80017c0 <HAL_InitTick>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d043      	beq.n	800215c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e249      	b.n	800256c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d023      	beq.n	8002128 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e0:	4b3d      	ldr	r3, [pc, #244]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a3c      	ldr	r2, [pc, #240]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 80020e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7ff fbb4 	bl	8001858 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f4:	f7ff fbb0 	bl	8001858 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e232      	b.n	800256c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002106:	4b34      	ldr	r3, [pc, #208]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002112:	4b31      	ldr	r3, [pc, #196]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	061b      	lsls	r3, r3, #24
 8002120:	492d      	ldr	r1, [pc, #180]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8002122:	4313      	orrs	r3, r2
 8002124:	604b      	str	r3, [r1, #4]
 8002126:	e01a      	b.n	800215e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002128:	4b2b      	ldr	r3, [pc, #172]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a2a      	ldr	r2, [pc, #168]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 800212e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7ff fb90 	bl	8001858 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213c:	f7ff fb8c 	bl	8001858 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e20e      	b.n	800256c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800214e:	4b22      	ldr	r3, [pc, #136]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x1e0>
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800215c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d041      	beq.n	80021ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d01c      	beq.n	80021ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002172:	4b19      	ldr	r3, [pc, #100]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8002174:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002178:	4a17      	ldr	r2, [pc, #92]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002182:	f7ff fb69 	bl	8001858 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218a:	f7ff fb65 	bl	8001858 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e1e7      	b.n	800256c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800219c:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 800219e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0ef      	beq.n	800218a <HAL_RCC_OscConfig+0x22e>
 80021aa:	e020      	b.n	80021ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ac:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 80021ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021b2:	4a09      	ldr	r2, [pc, #36]	@ (80021d8 <HAL_RCC_OscConfig+0x27c>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021bc:	f7ff fb4c 	bl	8001858 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021c2:	e00d      	b.n	80021e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c4:	f7ff fb48 	bl	8001858 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d906      	bls.n	80021e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e1ca      	b.n	800256c <HAL_RCC_OscConfig+0x610>
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021e0:	4b8c      	ldr	r3, [pc, #560]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 80021e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1ea      	bne.n	80021c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 80a6 	beq.w	8002348 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fc:	2300      	movs	r3, #0
 80021fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002200:	4b84      	ldr	r3, [pc, #528]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_RCC_OscConfig+0x2b4>
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <HAL_RCC_OscConfig+0x2b6>
 8002210:	2300      	movs	r3, #0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00d      	beq.n	8002232 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	4b7f      	ldr	r3, [pc, #508]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221a:	4a7e      	ldr	r2, [pc, #504]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002220:	6593      	str	r3, [r2, #88]	@ 0x58
 8002222:	4b7c      	ldr	r3, [pc, #496]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 8002224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800222e:	2301      	movs	r3, #1
 8002230:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002232:	4b79      	ldr	r3, [pc, #484]	@ (8002418 <HAL_RCC_OscConfig+0x4bc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d118      	bne.n	8002270 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800223e:	4b76      	ldr	r3, [pc, #472]	@ (8002418 <HAL_RCC_OscConfig+0x4bc>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a75      	ldr	r2, [pc, #468]	@ (8002418 <HAL_RCC_OscConfig+0x4bc>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224a:	f7ff fb05 	bl	8001858 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002252:	f7ff fb01 	bl	8001858 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e183      	b.n	800256c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002264:	4b6c      	ldr	r3, [pc, #432]	@ (8002418 <HAL_RCC_OscConfig+0x4bc>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d108      	bne.n	800228a <HAL_RCC_OscConfig+0x32e>
 8002278:	4b66      	ldr	r3, [pc, #408]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800227e:	4a65      	ldr	r2, [pc, #404]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002288:	e024      	b.n	80022d4 <HAL_RCC_OscConfig+0x378>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b05      	cmp	r3, #5
 8002290:	d110      	bne.n	80022b4 <HAL_RCC_OscConfig+0x358>
 8002292:	4b60      	ldr	r3, [pc, #384]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 8002294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002298:	4a5e      	ldr	r2, [pc, #376]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a8:	4a5a      	ldr	r2, [pc, #360]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022b2:	e00f      	b.n	80022d4 <HAL_RCC_OscConfig+0x378>
 80022b4:	4b57      	ldr	r3, [pc, #348]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ba:	4a56      	ldr	r2, [pc, #344]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 80022bc:	f023 0301 	bic.w	r3, r3, #1
 80022c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022c4:	4b53      	ldr	r3, [pc, #332]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 80022c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ca:	4a52      	ldr	r2, [pc, #328]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 80022cc:	f023 0304 	bic.w	r3, r3, #4
 80022d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d016      	beq.n	800230a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022dc:	f7ff fabc 	bl	8001858 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e4:	f7ff fab8 	bl	8001858 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e138      	b.n	800256c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022fa:	4b46      	ldr	r3, [pc, #280]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ed      	beq.n	80022e4 <HAL_RCC_OscConfig+0x388>
 8002308:	e015      	b.n	8002336 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230a:	f7ff faa5 	bl	8001858 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002310:	e00a      	b.n	8002328 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002312:	f7ff faa1 	bl	8001858 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002320:	4293      	cmp	r3, r2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e121      	b.n	800256c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002328:	4b3a      	ldr	r3, [pc, #232]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 800232a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1ed      	bne.n	8002312 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002336:	7ffb      	ldrb	r3, [r7, #31]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d105      	bne.n	8002348 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233c:	4b35      	ldr	r3, [pc, #212]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002340:	4a34      	ldr	r2, [pc, #208]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 8002342:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002346:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d03c      	beq.n	80023ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01c      	beq.n	8002396 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800235c:	4b2d      	ldr	r3, [pc, #180]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 800235e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002362:	4a2c      	ldr	r2, [pc, #176]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236c:	f7ff fa74 	bl	8001858 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002374:	f7ff fa70 	bl	8001858 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e0f2      	b.n	800256c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002386:	4b23      	ldr	r3, [pc, #140]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 8002388:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0ef      	beq.n	8002374 <HAL_RCC_OscConfig+0x418>
 8002394:	e01b      	b.n	80023ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002396:	4b1f      	ldr	r3, [pc, #124]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 8002398:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800239c:	4a1d      	ldr	r2, [pc, #116]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 800239e:	f023 0301 	bic.w	r3, r3, #1
 80023a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7ff fa57 	bl	8001858 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ae:	f7ff fa53 	bl	8001858 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0d5      	b.n	800256c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023c0:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 80023c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1ef      	bne.n	80023ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 80c9 	beq.w	800256a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b0c      	cmp	r3, #12
 80023e2:	f000 8083 	beq.w	80024ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d15e      	bne.n	80024ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a08      	ldr	r2, [pc, #32]	@ (8002414 <HAL_RCC_OscConfig+0x4b8>)
 80023f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fa:	f7ff fa2d 	bl	8001858 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002400:	e00c      	b.n	800241c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002402:	f7ff fa29 	bl	8001858 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d905      	bls.n	800241c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e0ab      	b.n	800256c <HAL_RCC_OscConfig+0x610>
 8002414:	40021000 	.word	0x40021000
 8002418:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800241c:	4b55      	ldr	r3, [pc, #340]	@ (8002574 <HAL_RCC_OscConfig+0x618>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1ec      	bne.n	8002402 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002428:	4b52      	ldr	r3, [pc, #328]	@ (8002574 <HAL_RCC_OscConfig+0x618>)
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	4b52      	ldr	r3, [pc, #328]	@ (8002578 <HAL_RCC_OscConfig+0x61c>)
 800242e:	4013      	ands	r3, r2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6a11      	ldr	r1, [r2, #32]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002438:	3a01      	subs	r2, #1
 800243a:	0112      	lsls	r2, r2, #4
 800243c:	4311      	orrs	r1, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002442:	0212      	lsls	r2, r2, #8
 8002444:	4311      	orrs	r1, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800244a:	0852      	lsrs	r2, r2, #1
 800244c:	3a01      	subs	r2, #1
 800244e:	0552      	lsls	r2, r2, #21
 8002450:	4311      	orrs	r1, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002456:	0852      	lsrs	r2, r2, #1
 8002458:	3a01      	subs	r2, #1
 800245a:	0652      	lsls	r2, r2, #25
 800245c:	4311      	orrs	r1, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002462:	06d2      	lsls	r2, r2, #27
 8002464:	430a      	orrs	r2, r1
 8002466:	4943      	ldr	r1, [pc, #268]	@ (8002574 <HAL_RCC_OscConfig+0x618>)
 8002468:	4313      	orrs	r3, r2
 800246a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800246c:	4b41      	ldr	r3, [pc, #260]	@ (8002574 <HAL_RCC_OscConfig+0x618>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a40      	ldr	r2, [pc, #256]	@ (8002574 <HAL_RCC_OscConfig+0x618>)
 8002472:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002476:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002478:	4b3e      	ldr	r3, [pc, #248]	@ (8002574 <HAL_RCC_OscConfig+0x618>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4a3d      	ldr	r2, [pc, #244]	@ (8002574 <HAL_RCC_OscConfig+0x618>)
 800247e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002482:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7ff f9e8 	bl	8001858 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248c:	f7ff f9e4 	bl	8001858 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e066      	b.n	800256c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249e:	4b35      	ldr	r3, [pc, #212]	@ (8002574 <HAL_RCC_OscConfig+0x618>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x530>
 80024aa:	e05e      	b.n	800256a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ac:	4b31      	ldr	r3, [pc, #196]	@ (8002574 <HAL_RCC_OscConfig+0x618>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a30      	ldr	r2, [pc, #192]	@ (8002574 <HAL_RCC_OscConfig+0x618>)
 80024b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7ff f9ce 	bl	8001858 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c0:	f7ff f9ca 	bl	8001858 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e04c      	b.n	800256c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d2:	4b28      	ldr	r3, [pc, #160]	@ (8002574 <HAL_RCC_OscConfig+0x618>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80024de:	4b25      	ldr	r3, [pc, #148]	@ (8002574 <HAL_RCC_OscConfig+0x618>)
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	4924      	ldr	r1, [pc, #144]	@ (8002574 <HAL_RCC_OscConfig+0x618>)
 80024e4:	4b25      	ldr	r3, [pc, #148]	@ (800257c <HAL_RCC_OscConfig+0x620>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	60cb      	str	r3, [r1, #12]
 80024ea:	e03e      	b.n	800256a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e039      	b.n	800256c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80024f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002574 <HAL_RCC_OscConfig+0x618>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f003 0203 	and.w	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	429a      	cmp	r2, r3
 800250a:	d12c      	bne.n	8002566 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002516:	3b01      	subs	r3, #1
 8002518:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251a:	429a      	cmp	r2, r3
 800251c:	d123      	bne.n	8002566 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002528:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d11b      	bne.n	8002566 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002538:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800253a:	429a      	cmp	r2, r3
 800253c:	d113      	bne.n	8002566 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002548:	085b      	lsrs	r3, r3, #1
 800254a:	3b01      	subs	r3, #1
 800254c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d109      	bne.n	8002566 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800255c:	085b      	lsrs	r3, r3, #1
 800255e:	3b01      	subs	r3, #1
 8002560:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002562:	429a      	cmp	r2, r3
 8002564:	d001      	beq.n	800256a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3720      	adds	r7, #32
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000
 8002578:	019f800c 	.word	0x019f800c
 800257c:	feeefffc 	.word	0xfeeefffc

08002580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e11e      	b.n	80027d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002598:	4b91      	ldr	r3, [pc, #580]	@ (80027e0 <HAL_RCC_ClockConfig+0x260>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d910      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b8e      	ldr	r3, [pc, #568]	@ (80027e0 <HAL_RCC_ClockConfig+0x260>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 020f 	bic.w	r2, r3, #15
 80025ae:	498c      	ldr	r1, [pc, #560]	@ (80027e0 <HAL_RCC_ClockConfig+0x260>)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b8a      	ldr	r3, [pc, #552]	@ (80027e0 <HAL_RCC_ClockConfig+0x260>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e106      	b.n	80027d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d073      	beq.n	80026bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d129      	bne.n	8002630 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025dc:	4b81      	ldr	r3, [pc, #516]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0f4      	b.n	80027d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80025ec:	f000 f99e 	bl	800292c <RCC_GetSysClockFreqFromPLLSource>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4a7c      	ldr	r2, [pc, #496]	@ (80027e8 <HAL_RCC_ClockConfig+0x268>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d93f      	bls.n	800267a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025fa:	4b7a      	ldr	r3, [pc, #488]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800260e:	2b00      	cmp	r3, #0
 8002610:	d033      	beq.n	800267a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002616:	2b00      	cmp	r3, #0
 8002618:	d12f      	bne.n	800267a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800261a:	4b72      	ldr	r3, [pc, #456]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002622:	4a70      	ldr	r2, [pc, #448]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 8002624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002628:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800262a:	2380      	movs	r3, #128	@ 0x80
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	e024      	b.n	800267a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d107      	bne.n	8002648 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002638:	4b6a      	ldr	r3, [pc, #424]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0c6      	b.n	80027d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002648:	4b66      	ldr	r3, [pc, #408]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0be      	b.n	80027d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002658:	f000 f8ce 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 800265c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4a61      	ldr	r2, [pc, #388]	@ (80027e8 <HAL_RCC_ClockConfig+0x268>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d909      	bls.n	800267a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002666:	4b5f      	ldr	r3, [pc, #380]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800266e:	4a5d      	ldr	r2, [pc, #372]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 8002670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002674:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002676:	2380      	movs	r3, #128	@ 0x80
 8002678:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800267a:	4b5a      	ldr	r3, [pc, #360]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f023 0203 	bic.w	r2, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4957      	ldr	r1, [pc, #348]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 8002688:	4313      	orrs	r3, r2
 800268a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800268c:	f7ff f8e4 	bl	8001858 <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	e00a      	b.n	80026aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002694:	f7ff f8e0 	bl	8001858 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e095      	b.n	80027d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	4b4e      	ldr	r3, [pc, #312]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 020c 	and.w	r2, r3, #12
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d1eb      	bne.n	8002694 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d023      	beq.n	8002710 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d4:	4b43      	ldr	r3, [pc, #268]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4a42      	ldr	r2, [pc, #264]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 80026da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d007      	beq.n	80026fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80026ec:	4b3d      	ldr	r3, [pc, #244]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80026f4:	4a3b      	ldr	r2, [pc, #236]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 80026f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026fc:	4b39      	ldr	r3, [pc, #228]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	4936      	ldr	r1, [pc, #216]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
 800270e:	e008      	b.n	8002722 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	2b80      	cmp	r3, #128	@ 0x80
 8002714:	d105      	bne.n	8002722 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002716:	4b33      	ldr	r3, [pc, #204]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	4a32      	ldr	r2, [pc, #200]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 800271c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002720:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002722:	4b2f      	ldr	r3, [pc, #188]	@ (80027e0 <HAL_RCC_ClockConfig+0x260>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d21d      	bcs.n	800276c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002730:	4b2b      	ldr	r3, [pc, #172]	@ (80027e0 <HAL_RCC_ClockConfig+0x260>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f023 020f 	bic.w	r2, r3, #15
 8002738:	4929      	ldr	r1, [pc, #164]	@ (80027e0 <HAL_RCC_ClockConfig+0x260>)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	4313      	orrs	r3, r2
 800273e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002740:	f7ff f88a 	bl	8001858 <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	e00a      	b.n	800275e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002748:	f7ff f886 	bl	8001858 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e03b      	b.n	80027d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b20      	ldr	r3, [pc, #128]	@ (80027e0 <HAL_RCC_ClockConfig+0x260>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d1ed      	bne.n	8002748 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002778:	4b1a      	ldr	r3, [pc, #104]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4917      	ldr	r1, [pc, #92]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 8002786:	4313      	orrs	r3, r2
 8002788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002796:	4b13      	ldr	r3, [pc, #76]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	490f      	ldr	r1, [pc, #60]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027aa:	f000 f825 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 80027ae:	4602      	mov	r2, r0
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <HAL_RCC_ClockConfig+0x264>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	490c      	ldr	r1, [pc, #48]	@ (80027ec <HAL_RCC_ClockConfig+0x26c>)
 80027bc:	5ccb      	ldrb	r3, [r1, r3]
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	fa22 f303 	lsr.w	r3, r2, r3
 80027c6:	4a0a      	ldr	r2, [pc, #40]	@ (80027f0 <HAL_RCC_ClockConfig+0x270>)
 80027c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027ca:	4b0a      	ldr	r3, [pc, #40]	@ (80027f4 <HAL_RCC_ClockConfig+0x274>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fff6 	bl	80017c0 <HAL_InitTick>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40022000 	.word	0x40022000
 80027e4:	40021000 	.word	0x40021000
 80027e8:	04c4b400 	.word	0x04c4b400
 80027ec:	0800477c 	.word	0x0800477c
 80027f0:	20000014 	.word	0x20000014
 80027f4:	20000018 	.word	0x20000018

080027f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027fe:	4b2c      	ldr	r3, [pc, #176]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b04      	cmp	r3, #4
 8002808:	d102      	bne.n	8002810 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800280a:	4b2a      	ldr	r3, [pc, #168]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	e047      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002810:	4b27      	ldr	r3, [pc, #156]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 030c 	and.w	r3, r3, #12
 8002818:	2b08      	cmp	r3, #8
 800281a:	d102      	bne.n	8002822 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800281c:	4b26      	ldr	r3, [pc, #152]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	e03e      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002822:	4b23      	ldr	r3, [pc, #140]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b0c      	cmp	r3, #12
 800282c:	d136      	bne.n	800289c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800282e:	4b20      	ldr	r3, [pc, #128]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002838:	4b1d      	ldr	r3, [pc, #116]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	3301      	adds	r3, #1
 8002844:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2b03      	cmp	r3, #3
 800284a:	d10c      	bne.n	8002866 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800284c:	4a1a      	ldr	r2, [pc, #104]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	fbb2 f3f3 	udiv	r3, r2, r3
 8002854:	4a16      	ldr	r2, [pc, #88]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002856:	68d2      	ldr	r2, [r2, #12]
 8002858:	0a12      	lsrs	r2, r2, #8
 800285a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800285e:	fb02 f303 	mul.w	r3, r2, r3
 8002862:	617b      	str	r3, [r7, #20]
      break;
 8002864:	e00c      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002866:	4a13      	ldr	r2, [pc, #76]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	fbb2 f3f3 	udiv	r3, r2, r3
 800286e:	4a10      	ldr	r2, [pc, #64]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002870:	68d2      	ldr	r2, [r2, #12]
 8002872:	0a12      	lsrs	r2, r2, #8
 8002874:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002878:	fb02 f303 	mul.w	r3, r2, r3
 800287c:	617b      	str	r3, [r7, #20]
      break;
 800287e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002880:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0e5b      	lsrs	r3, r3, #25
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	3301      	adds	r3, #1
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	fbb2 f3f3 	udiv	r3, r2, r3
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	e001      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028a0:	693b      	ldr	r3, [r7, #16]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
 80028b4:	00f42400 	.word	0x00f42400
 80028b8:	016e3600 	.word	0x016e3600

080028bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c0:	4b03      	ldr	r3, [pc, #12]	@ (80028d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000014 	.word	0x20000014

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028d8:	f7ff fff0 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b06      	ldr	r3, [pc, #24]	@ (80028f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4904      	ldr	r1, [pc, #16]	@ (80028fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40021000 	.word	0x40021000
 80028fc:	0800478c 	.word	0x0800478c

08002900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002904:	f7ff ffda 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <HAL_RCC_GetPCLK2Freq+0x24>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0adb      	lsrs	r3, r3, #11
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4904      	ldr	r1, [pc, #16]	@ (8002928 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	0800478c 	.word	0x0800478c

0800292c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002932:	4b1e      	ldr	r3, [pc, #120]	@ (80029ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800293c:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	3301      	adds	r3, #1
 8002948:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d10c      	bne.n	800296a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002950:	4a17      	ldr	r2, [pc, #92]	@ (80029b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	fbb2 f3f3 	udiv	r3, r2, r3
 8002958:	4a14      	ldr	r2, [pc, #80]	@ (80029ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800295a:	68d2      	ldr	r2, [r2, #12]
 800295c:	0a12      	lsrs	r2, r2, #8
 800295e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002962:	fb02 f303 	mul.w	r3, r2, r3
 8002966:	617b      	str	r3, [r7, #20]
    break;
 8002968:	e00c      	b.n	8002984 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800296a:	4a12      	ldr	r2, [pc, #72]	@ (80029b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002972:	4a0e      	ldr	r2, [pc, #56]	@ (80029ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002974:	68d2      	ldr	r2, [r2, #12]
 8002976:	0a12      	lsrs	r2, r2, #8
 8002978:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800297c:	fb02 f303 	mul.w	r3, r2, r3
 8002980:	617b      	str	r3, [r7, #20]
    break;
 8002982:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002984:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	0e5b      	lsrs	r3, r3, #25
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	3301      	adds	r3, #1
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	fbb2 f3f3 	udiv	r3, r2, r3
 800299c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800299e:	687b      	ldr	r3, [r7, #4]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	371c      	adds	r7, #28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	40021000 	.word	0x40021000
 80029b0:	016e3600 	.word	0x016e3600
 80029b4:	00f42400 	.word	0x00f42400

080029b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029c0:	2300      	movs	r3, #0
 80029c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029c4:	2300      	movs	r3, #0
 80029c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 8098 	beq.w	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d6:	2300      	movs	r3, #0
 80029d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029da:	4b43      	ldr	r3, [pc, #268]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10d      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	4b40      	ldr	r3, [pc, #256]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ea:	4a3f      	ldr	r2, [pc, #252]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029f2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fe:	2301      	movs	r3, #1
 8002a00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a02:	4b3a      	ldr	r3, [pc, #232]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a39      	ldr	r2, [pc, #228]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a0e:	f7fe ff23 	bl	8001858 <HAL_GetTick>
 8002a12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a14:	e009      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a16:	f7fe ff1f 	bl	8001858 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d902      	bls.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	74fb      	strb	r3, [r7, #19]
        break;
 8002a28:	e005      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a2a:	4b30      	ldr	r3, [pc, #192]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0ef      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a36:	7cfb      	ldrb	r3, [r7, #19]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d159      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d01e      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d019      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a58:	4b23      	ldr	r3, [pc, #140]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a64:	4b20      	ldr	r3, [pc, #128]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a74:	4b1c      	ldr	r3, [pc, #112]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a84:	4a18      	ldr	r2, [pc, #96]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d016      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7fe fedf 	bl	8001858 <HAL_GetTick>
 8002a9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a9c:	e00b      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9e:	f7fe fedb 	bl	8001858 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d902      	bls.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ab4:	e006      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0ec      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10b      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aca:	4b07      	ldr	r3, [pc, #28]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad8:	4903      	ldr	r1, [pc, #12]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ae0:	e008      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ae2:	7cfb      	ldrb	r3, [r7, #19]
 8002ae4:	74bb      	strb	r3, [r7, #18]
 8002ae6:	e005      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002af4:	7c7b      	ldrb	r3, [r7, #17]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d105      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afa:	4ba7      	ldr	r3, [pc, #668]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afe:	4aa6      	ldr	r2, [pc, #664]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b04:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b12:	4ba1      	ldr	r3, [pc, #644]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b18:	f023 0203 	bic.w	r2, r3, #3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	499d      	ldr	r1, [pc, #628]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b34:	4b98      	ldr	r3, [pc, #608]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3a:	f023 020c 	bic.w	r2, r3, #12
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	4995      	ldr	r1, [pc, #596]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b56:	4b90      	ldr	r3, [pc, #576]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	498c      	ldr	r1, [pc, #560]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b78:	4b87      	ldr	r3, [pc, #540]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	4984      	ldr	r1, [pc, #528]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b9a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	497b      	ldr	r1, [pc, #492]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bbc:	4b76      	ldr	r3, [pc, #472]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	4973      	ldr	r1, [pc, #460]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bde:	4b6e      	ldr	r3, [pc, #440]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	496a      	ldr	r1, [pc, #424]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c00:	4b65      	ldr	r3, [pc, #404]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	4962      	ldr	r1, [pc, #392]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c22:	4b5d      	ldr	r3, [pc, #372]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	4959      	ldr	r1, [pc, #356]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c44:	4b54      	ldr	r3, [pc, #336]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c4a:	f023 0203 	bic.w	r2, r3, #3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c52:	4951      	ldr	r1, [pc, #324]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c66:	4b4c      	ldr	r3, [pc, #304]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	4948      	ldr	r1, [pc, #288]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d015      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c88:	4b43      	ldr	r3, [pc, #268]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c96:	4940      	ldr	r1, [pc, #256]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ca6:	d105      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4a3a      	ldr	r2, [pc, #232]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cb2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d015      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cc0:	4b35      	ldr	r3, [pc, #212]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cce:	4932      	ldr	r1, [pc, #200]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cde:	d105      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d015      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002cf8:	4b27      	ldr	r3, [pc, #156]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d06:	4924      	ldr	r1, [pc, #144]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d16:	d105      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d18:	4b1f      	ldr	r3, [pc, #124]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d22:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d015      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d30:	4b19      	ldr	r3, [pc, #100]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3e:	4916      	ldr	r1, [pc, #88]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d4e:	d105      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d50:	4b11      	ldr	r3, [pc, #68]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a10      	ldr	r2, [pc, #64]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d5a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d019      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d68:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	4908      	ldr	r1, [pc, #32]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d86:	d109      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d88:	4b03      	ldr	r3, [pc, #12]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a02      	ldr	r2, [pc, #8]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d92:	60d3      	str	r3, [r2, #12]
 8002d94:	e002      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d015      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002da8:	4b29      	ldr	r3, [pc, #164]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db6:	4926      	ldr	r1, [pc, #152]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dc6:	d105      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002dc8:	4b21      	ldr	r3, [pc, #132]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4a20      	ldr	r2, [pc, #128]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d015      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002de0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dee:	4918      	ldr	r1, [pc, #96]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dfe:	d105      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e00:	4b13      	ldr	r3, [pc, #76]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4a12      	ldr	r2, [pc, #72]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e0a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d015      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e18:	4b0d      	ldr	r3, [pc, #52]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e26:	490a      	ldr	r1, [pc, #40]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e36:	d105      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e38:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a04      	ldr	r2, [pc, #16]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e42:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e44:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000

08002e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e049      	b.n	8002efa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fe fbe6 	bl	800164c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f000 fb6a 	bl	800356c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d001      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e054      	b.n	8002fc6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a26      	ldr	r2, [pc, #152]	@ (8002fd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d022      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x80>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f46:	d01d      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x80>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a22      	ldr	r2, [pc, #136]	@ (8002fd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d018      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x80>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a21      	ldr	r2, [pc, #132]	@ (8002fdc <HAL_TIM_Base_Start_IT+0xd8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d013      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x80>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00e      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x80>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe4 <HAL_TIM_Base_Start_IT+0xe0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d009      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x80>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d004      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x80>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8002fec <HAL_TIM_Base_Start_IT+0xe8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d115      	bne.n	8002fb0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	4b19      	ldr	r3, [pc, #100]	@ (8002ff0 <HAL_TIM_Base_Start_IT+0xec>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b06      	cmp	r3, #6
 8002f94:	d015      	beq.n	8002fc2 <HAL_TIM_Base_Start_IT+0xbe>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f9c:	d011      	beq.n	8002fc2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fae:	e008      	b.n	8002fc2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	e000      	b.n	8002fc4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40012c00 	.word	0x40012c00
 8002fd8:	40000400 	.word	0x40000400
 8002fdc:	40000800 	.word	0x40000800
 8002fe0:	40000c00 	.word	0x40000c00
 8002fe4:	40013400 	.word	0x40013400
 8002fe8:	40014000 	.word	0x40014000
 8002fec:	40015000 	.word	0x40015000
 8002ff0:	00010007 	.word	0x00010007

08002ff4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6a1a      	ldr	r2, [r3, #32]
 8003012:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10f      	bne.n	800303c <HAL_TIM_Base_Stop_IT+0x48>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6a1a      	ldr	r2, [r3, #32]
 8003022:	f244 4344 	movw	r3, #17476	@ 0x4444
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d107      	bne.n	800303c <HAL_TIM_Base_Stop_IT+0x48>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d020      	beq.n	80030b6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d01b      	beq.n	80030b6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f06f 0202 	mvn.w	r2, #2
 8003086:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fa47 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 80030a2:	e005      	b.n	80030b0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 fa39 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fa4a 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d020      	beq.n	8003102 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d01b      	beq.n	8003102 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f06f 0204 	mvn.w	r2, #4
 80030d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fa21 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 80030ee:	e005      	b.n	80030fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fa13 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fa24 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d020      	beq.n	800314e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d01b      	beq.n	800314e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f06f 0208 	mvn.w	r2, #8
 800311e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2204      	movs	r2, #4
 8003124:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f9fb 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 800313a:	e005      	b.n	8003148 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f9ed 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f9fe 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b00      	cmp	r3, #0
 8003156:	d020      	beq.n	800319a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b00      	cmp	r3, #0
 8003160:	d01b      	beq.n	800319a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f06f 0210 	mvn.w	r2, #16
 800316a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2208      	movs	r2, #8
 8003170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f9d5 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 8003186:	e005      	b.n	8003194 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f9c7 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f9d8 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00c      	beq.n	80031be <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d007      	beq.n	80031be <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f06f 0201 	mvn.w	r2, #1
 80031b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7fe f9a9 	bl	8001510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d104      	bne.n	80031d2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00c      	beq.n	80031ec <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d007      	beq.n	80031ec <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80031e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fbb0 	bl	800394c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00c      	beq.n	8003210 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d007      	beq.n	8003210 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fba8 	bl	8003960 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00c      	beq.n	8003234 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003220:	2b00      	cmp	r3, #0
 8003222:	d007      	beq.n	8003234 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800322c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f992 	bl	8003558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00c      	beq.n	8003258 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d007      	beq.n	8003258 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0220 	mvn.w	r2, #32
 8003250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fb70 	bl	8003938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00c      	beq.n	800327c <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fb7c 	bl	8003974 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00c      	beq.n	80032a0 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fb74 	bl	8003988 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00c      	beq.n	80032c4 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80032bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fb6c 	bl	800399c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00c      	beq.n	80032e8 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d007      	beq.n	80032e8 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80032e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fb64 	bl	80039b0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_TIM_ConfigClockSource+0x1c>
 8003308:	2302      	movs	r3, #2
 800330a:	e0f6      	b.n	80034fa <HAL_TIM_ConfigClockSource+0x20a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800332a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800332e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a6f      	ldr	r2, [pc, #444]	@ (8003504 <HAL_TIM_ConfigClockSource+0x214>)
 8003346:	4293      	cmp	r3, r2
 8003348:	f000 80c1 	beq.w	80034ce <HAL_TIM_ConfigClockSource+0x1de>
 800334c:	4a6d      	ldr	r2, [pc, #436]	@ (8003504 <HAL_TIM_ConfigClockSource+0x214>)
 800334e:	4293      	cmp	r3, r2
 8003350:	f200 80c6 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003354:	4a6c      	ldr	r2, [pc, #432]	@ (8003508 <HAL_TIM_ConfigClockSource+0x218>)
 8003356:	4293      	cmp	r3, r2
 8003358:	f000 80b9 	beq.w	80034ce <HAL_TIM_ConfigClockSource+0x1de>
 800335c:	4a6a      	ldr	r2, [pc, #424]	@ (8003508 <HAL_TIM_ConfigClockSource+0x218>)
 800335e:	4293      	cmp	r3, r2
 8003360:	f200 80be 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003364:	4a69      	ldr	r2, [pc, #420]	@ (800350c <HAL_TIM_ConfigClockSource+0x21c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	f000 80b1 	beq.w	80034ce <HAL_TIM_ConfigClockSource+0x1de>
 800336c:	4a67      	ldr	r2, [pc, #412]	@ (800350c <HAL_TIM_ConfigClockSource+0x21c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	f200 80b6 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003374:	4a66      	ldr	r2, [pc, #408]	@ (8003510 <HAL_TIM_ConfigClockSource+0x220>)
 8003376:	4293      	cmp	r3, r2
 8003378:	f000 80a9 	beq.w	80034ce <HAL_TIM_ConfigClockSource+0x1de>
 800337c:	4a64      	ldr	r2, [pc, #400]	@ (8003510 <HAL_TIM_ConfigClockSource+0x220>)
 800337e:	4293      	cmp	r3, r2
 8003380:	f200 80ae 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003384:	4a63      	ldr	r2, [pc, #396]	@ (8003514 <HAL_TIM_ConfigClockSource+0x224>)
 8003386:	4293      	cmp	r3, r2
 8003388:	f000 80a1 	beq.w	80034ce <HAL_TIM_ConfigClockSource+0x1de>
 800338c:	4a61      	ldr	r2, [pc, #388]	@ (8003514 <HAL_TIM_ConfigClockSource+0x224>)
 800338e:	4293      	cmp	r3, r2
 8003390:	f200 80a6 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003394:	4a60      	ldr	r2, [pc, #384]	@ (8003518 <HAL_TIM_ConfigClockSource+0x228>)
 8003396:	4293      	cmp	r3, r2
 8003398:	f000 8099 	beq.w	80034ce <HAL_TIM_ConfigClockSource+0x1de>
 800339c:	4a5e      	ldr	r2, [pc, #376]	@ (8003518 <HAL_TIM_ConfigClockSource+0x228>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	f200 809e 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80033a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80033a8:	f000 8091 	beq.w	80034ce <HAL_TIM_ConfigClockSource+0x1de>
 80033ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80033b0:	f200 8096 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80033b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033b8:	f000 8089 	beq.w	80034ce <HAL_TIM_ConfigClockSource+0x1de>
 80033bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033c0:	f200 808e 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80033c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033c8:	d03e      	beq.n	8003448 <HAL_TIM_ConfigClockSource+0x158>
 80033ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033ce:	f200 8087 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80033d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033d6:	f000 8086 	beq.w	80034e6 <HAL_TIM_ConfigClockSource+0x1f6>
 80033da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033de:	d87f      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80033e0:	2b70      	cmp	r3, #112	@ 0x70
 80033e2:	d01a      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x12a>
 80033e4:	2b70      	cmp	r3, #112	@ 0x70
 80033e6:	d87b      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80033e8:	2b60      	cmp	r3, #96	@ 0x60
 80033ea:	d050      	beq.n	800348e <HAL_TIM_ConfigClockSource+0x19e>
 80033ec:	2b60      	cmp	r3, #96	@ 0x60
 80033ee:	d877      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80033f0:	2b50      	cmp	r3, #80	@ 0x50
 80033f2:	d03c      	beq.n	800346e <HAL_TIM_ConfigClockSource+0x17e>
 80033f4:	2b50      	cmp	r3, #80	@ 0x50
 80033f6:	d873      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80033f8:	2b40      	cmp	r3, #64	@ 0x40
 80033fa:	d058      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0x1be>
 80033fc:	2b40      	cmp	r3, #64	@ 0x40
 80033fe:	d86f      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003400:	2b30      	cmp	r3, #48	@ 0x30
 8003402:	d064      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x1de>
 8003404:	2b30      	cmp	r3, #48	@ 0x30
 8003406:	d86b      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003408:	2b20      	cmp	r3, #32
 800340a:	d060      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x1de>
 800340c:	2b20      	cmp	r3, #32
 800340e:	d867      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d05c      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x1de>
 8003414:	2b10      	cmp	r3, #16
 8003416:	d05a      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x1de>
 8003418:	e062      	b.n	80034e0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800342a:	f000 f9cf 	bl	80037cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800343c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	609a      	str	r2, [r3, #8]
      break;
 8003446:	e04f      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003458:	f000 f9b8 	bl	80037cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800346a:	609a      	str	r2, [r3, #8]
      break;
 800346c:	e03c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800347a:	461a      	mov	r2, r3
 800347c:	f000 f92a 	bl	80036d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2150      	movs	r1, #80	@ 0x50
 8003486:	4618      	mov	r0, r3
 8003488:	f000 f983 	bl	8003792 <TIM_ITRx_SetConfig>
      break;
 800348c:	e02c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800349a:	461a      	mov	r2, r3
 800349c:	f000 f949 	bl	8003732 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2160      	movs	r1, #96	@ 0x60
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f973 	bl	8003792 <TIM_ITRx_SetConfig>
      break;
 80034ac:	e01c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ba:	461a      	mov	r2, r3
 80034bc:	f000 f90a 	bl	80036d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2140      	movs	r1, #64	@ 0x40
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f963 	bl	8003792 <TIM_ITRx_SetConfig>
      break;
 80034cc:	e00c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4619      	mov	r1, r3
 80034d8:	4610      	mov	r0, r2
 80034da:	f000 f95a 	bl	8003792 <TIM_ITRx_SetConfig>
      break;
 80034de:	e003      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      break;
 80034e4:	e000      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80034e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	00100070 	.word	0x00100070
 8003508:	00100060 	.word	0x00100060
 800350c:	00100050 	.word	0x00100050
 8003510:	00100040 	.word	0x00100040
 8003514:	00100030 	.word	0x00100030
 8003518:	00100020 	.word	0x00100020

0800351c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a4c      	ldr	r2, [pc, #304]	@ (80036b0 <TIM_Base_SetConfig+0x144>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d017      	beq.n	80035b4 <TIM_Base_SetConfig+0x48>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800358a:	d013      	beq.n	80035b4 <TIM_Base_SetConfig+0x48>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a49      	ldr	r2, [pc, #292]	@ (80036b4 <TIM_Base_SetConfig+0x148>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00f      	beq.n	80035b4 <TIM_Base_SetConfig+0x48>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a48      	ldr	r2, [pc, #288]	@ (80036b8 <TIM_Base_SetConfig+0x14c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00b      	beq.n	80035b4 <TIM_Base_SetConfig+0x48>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a47      	ldr	r2, [pc, #284]	@ (80036bc <TIM_Base_SetConfig+0x150>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d007      	beq.n	80035b4 <TIM_Base_SetConfig+0x48>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a46      	ldr	r2, [pc, #280]	@ (80036c0 <TIM_Base_SetConfig+0x154>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d003      	beq.n	80035b4 <TIM_Base_SetConfig+0x48>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a45      	ldr	r2, [pc, #276]	@ (80036c4 <TIM_Base_SetConfig+0x158>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d108      	bne.n	80035c6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a39      	ldr	r2, [pc, #228]	@ (80036b0 <TIM_Base_SetConfig+0x144>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d023      	beq.n	8003616 <TIM_Base_SetConfig+0xaa>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d4:	d01f      	beq.n	8003616 <TIM_Base_SetConfig+0xaa>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a36      	ldr	r2, [pc, #216]	@ (80036b4 <TIM_Base_SetConfig+0x148>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01b      	beq.n	8003616 <TIM_Base_SetConfig+0xaa>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a35      	ldr	r2, [pc, #212]	@ (80036b8 <TIM_Base_SetConfig+0x14c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d017      	beq.n	8003616 <TIM_Base_SetConfig+0xaa>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a34      	ldr	r2, [pc, #208]	@ (80036bc <TIM_Base_SetConfig+0x150>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <TIM_Base_SetConfig+0xaa>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a33      	ldr	r2, [pc, #204]	@ (80036c0 <TIM_Base_SetConfig+0x154>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00f      	beq.n	8003616 <TIM_Base_SetConfig+0xaa>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a33      	ldr	r2, [pc, #204]	@ (80036c8 <TIM_Base_SetConfig+0x15c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00b      	beq.n	8003616 <TIM_Base_SetConfig+0xaa>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a32      	ldr	r2, [pc, #200]	@ (80036cc <TIM_Base_SetConfig+0x160>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d007      	beq.n	8003616 <TIM_Base_SetConfig+0xaa>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a31      	ldr	r2, [pc, #196]	@ (80036d0 <TIM_Base_SetConfig+0x164>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d003      	beq.n	8003616 <TIM_Base_SetConfig+0xaa>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a2c      	ldr	r2, [pc, #176]	@ (80036c4 <TIM_Base_SetConfig+0x158>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d108      	bne.n	8003628 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800361c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a18      	ldr	r2, [pc, #96]	@ (80036b0 <TIM_Base_SetConfig+0x144>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d013      	beq.n	800367c <TIM_Base_SetConfig+0x110>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a1a      	ldr	r2, [pc, #104]	@ (80036c0 <TIM_Base_SetConfig+0x154>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00f      	beq.n	800367c <TIM_Base_SetConfig+0x110>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a1a      	ldr	r2, [pc, #104]	@ (80036c8 <TIM_Base_SetConfig+0x15c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00b      	beq.n	800367c <TIM_Base_SetConfig+0x110>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a19      	ldr	r2, [pc, #100]	@ (80036cc <TIM_Base_SetConfig+0x160>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d007      	beq.n	800367c <TIM_Base_SetConfig+0x110>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a18      	ldr	r2, [pc, #96]	@ (80036d0 <TIM_Base_SetConfig+0x164>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d003      	beq.n	800367c <TIM_Base_SetConfig+0x110>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a13      	ldr	r2, [pc, #76]	@ (80036c4 <TIM_Base_SetConfig+0x158>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d103      	bne.n	8003684 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b01      	cmp	r3, #1
 8003694:	d105      	bne.n	80036a2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f023 0201 	bic.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	611a      	str	r2, [r3, #16]
  }
}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40012c00 	.word	0x40012c00
 80036b4:	40000400 	.word	0x40000400
 80036b8:	40000800 	.word	0x40000800
 80036bc:	40000c00 	.word	0x40000c00
 80036c0:	40013400 	.word	0x40013400
 80036c4:	40015000 	.word	0x40015000
 80036c8:	40014000 	.word	0x40014000
 80036cc:	40014400 	.word	0x40014400
 80036d0:	40014800 	.word	0x40014800

080036d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f023 0201 	bic.w	r2, r3, #1
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4313      	orrs	r3, r2
 8003708:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f023 030a 	bic.w	r3, r3, #10
 8003710:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	621a      	str	r2, [r3, #32]
}
 8003726:	bf00      	nop
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003732:	b480      	push	{r7}
 8003734:	b087      	sub	sp, #28
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	f023 0210 	bic.w	r2, r3, #16
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800375c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	031b      	lsls	r3, r3, #12
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800376e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	621a      	str	r2, [r3, #32]
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003792:	b480      	push	{r7}
 8003794:	b085      	sub	sp, #20
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80037a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f043 0307 	orr.w	r3, r3, #7
 80037b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	609a      	str	r2, [r3, #8]
}
 80037c0:	bf00      	nop
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	021a      	lsls	r2, r3, #8
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	609a      	str	r2, [r3, #8]
}
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003820:	2302      	movs	r3, #2
 8003822:	e074      	b.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a34      	ldr	r2, [pc, #208]	@ (800391c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d009      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a33      	ldr	r2, [pc, #204]	@ (8003920 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d004      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a31      	ldr	r2, [pc, #196]	@ (8003924 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d108      	bne.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003868:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800387a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800387e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a21      	ldr	r2, [pc, #132]	@ (800391c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d022      	beq.n	80038e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a4:	d01d      	beq.n	80038e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003928 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d018      	beq.n	80038e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a1d      	ldr	r2, [pc, #116]	@ (800392c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a1c      	ldr	r2, [pc, #112]	@ (8003930 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00e      	beq.n	80038e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a15      	ldr	r2, [pc, #84]	@ (8003920 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d009      	beq.n	80038e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a18      	ldr	r2, [pc, #96]	@ (8003934 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d004      	beq.n	80038e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a11      	ldr	r2, [pc, #68]	@ (8003924 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d10c      	bne.n	80038fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40012c00 	.word	0x40012c00
 8003920:	40013400 	.word	0x40013400
 8003924:	40015000 	.word	0x40015000
 8003928:	40000400 	.word	0x40000400
 800392c:	40000800 	.word	0x40000800
 8003930:	40000c00 	.word	0x40000c00
 8003934:	40014000 	.word	0x40014000

08003938 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e042      	b.n	8003a5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d106      	bne.n	80039ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7fd fdd7 	bl	800159c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2224      	movs	r2, #36	@ 0x24
 80039f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fb24 	bl	800405c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f825 	bl	8003a64 <UART_SetConfig>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e01b      	b.n	8003a5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fba3 	bl	80041a0 <UART_CheckIdleState>
 8003a5a:	4603      	mov	r3, r0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a68:	b08c      	sub	sp, #48	@ 0x30
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	4baa      	ldr	r3, [pc, #680]	@ (8003d3c <UART_SetConfig+0x2d8>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a9f      	ldr	r2, [pc, #636]	@ (8003d40 <UART_SetConfig+0x2dc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d004      	beq.n	8003ad0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003acc:	4313      	orrs	r3, r2
 8003ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003ada:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aee:	f023 010f 	bic.w	r1, r3, #15
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a90      	ldr	r2, [pc, #576]	@ (8003d44 <UART_SetConfig+0x2e0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d125      	bne.n	8003b54 <UART_SetConfig+0xf0>
 8003b08:	4b8f      	ldr	r3, [pc, #572]	@ (8003d48 <UART_SetConfig+0x2e4>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d81a      	bhi.n	8003b4c <UART_SetConfig+0xe8>
 8003b16:	a201      	add	r2, pc, #4	@ (adr r2, 8003b1c <UART_SetConfig+0xb8>)
 8003b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1c:	08003b2d 	.word	0x08003b2d
 8003b20:	08003b3d 	.word	0x08003b3d
 8003b24:	08003b35 	.word	0x08003b35
 8003b28:	08003b45 	.word	0x08003b45
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b32:	e116      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003b34:	2302      	movs	r3, #2
 8003b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b3a:	e112      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b42:	e10e      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003b44:	2308      	movs	r3, #8
 8003b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b4a:	e10a      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003b4c:	2310      	movs	r3, #16
 8003b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b52:	e106      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a7c      	ldr	r2, [pc, #496]	@ (8003d4c <UART_SetConfig+0x2e8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d138      	bne.n	8003bd0 <UART_SetConfig+0x16c>
 8003b5e:	4b7a      	ldr	r3, [pc, #488]	@ (8003d48 <UART_SetConfig+0x2e4>)
 8003b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b64:	f003 030c 	and.w	r3, r3, #12
 8003b68:	2b0c      	cmp	r3, #12
 8003b6a:	d82d      	bhi.n	8003bc8 <UART_SetConfig+0x164>
 8003b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b74 <UART_SetConfig+0x110>)
 8003b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b72:	bf00      	nop
 8003b74:	08003ba9 	.word	0x08003ba9
 8003b78:	08003bc9 	.word	0x08003bc9
 8003b7c:	08003bc9 	.word	0x08003bc9
 8003b80:	08003bc9 	.word	0x08003bc9
 8003b84:	08003bb9 	.word	0x08003bb9
 8003b88:	08003bc9 	.word	0x08003bc9
 8003b8c:	08003bc9 	.word	0x08003bc9
 8003b90:	08003bc9 	.word	0x08003bc9
 8003b94:	08003bb1 	.word	0x08003bb1
 8003b98:	08003bc9 	.word	0x08003bc9
 8003b9c:	08003bc9 	.word	0x08003bc9
 8003ba0:	08003bc9 	.word	0x08003bc9
 8003ba4:	08003bc1 	.word	0x08003bc1
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bae:	e0d8      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bb6:	e0d4      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003bb8:	2304      	movs	r3, #4
 8003bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bbe:	e0d0      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003bc0:	2308      	movs	r3, #8
 8003bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bc6:	e0cc      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003bc8:	2310      	movs	r3, #16
 8003bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bce:	e0c8      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a5e      	ldr	r2, [pc, #376]	@ (8003d50 <UART_SetConfig+0x2ec>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d125      	bne.n	8003c26 <UART_SetConfig+0x1c2>
 8003bda:	4b5b      	ldr	r3, [pc, #364]	@ (8003d48 <UART_SetConfig+0x2e4>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003be4:	2b30      	cmp	r3, #48	@ 0x30
 8003be6:	d016      	beq.n	8003c16 <UART_SetConfig+0x1b2>
 8003be8:	2b30      	cmp	r3, #48	@ 0x30
 8003bea:	d818      	bhi.n	8003c1e <UART_SetConfig+0x1ba>
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d00a      	beq.n	8003c06 <UART_SetConfig+0x1a2>
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d814      	bhi.n	8003c1e <UART_SetConfig+0x1ba>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <UART_SetConfig+0x19a>
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d008      	beq.n	8003c0e <UART_SetConfig+0x1aa>
 8003bfc:	e00f      	b.n	8003c1e <UART_SetConfig+0x1ba>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c04:	e0ad      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003c06:	2302      	movs	r3, #2
 8003c08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c0c:	e0a9      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003c0e:	2304      	movs	r3, #4
 8003c10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c14:	e0a5      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003c16:	2308      	movs	r3, #8
 8003c18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c1c:	e0a1      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003c1e:	2310      	movs	r3, #16
 8003c20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c24:	e09d      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a4a      	ldr	r2, [pc, #296]	@ (8003d54 <UART_SetConfig+0x2f0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d125      	bne.n	8003c7c <UART_SetConfig+0x218>
 8003c30:	4b45      	ldr	r3, [pc, #276]	@ (8003d48 <UART_SetConfig+0x2e4>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c3c:	d016      	beq.n	8003c6c <UART_SetConfig+0x208>
 8003c3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c40:	d818      	bhi.n	8003c74 <UART_SetConfig+0x210>
 8003c42:	2b80      	cmp	r3, #128	@ 0x80
 8003c44:	d00a      	beq.n	8003c5c <UART_SetConfig+0x1f8>
 8003c46:	2b80      	cmp	r3, #128	@ 0x80
 8003c48:	d814      	bhi.n	8003c74 <UART_SetConfig+0x210>
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <UART_SetConfig+0x1f0>
 8003c4e:	2b40      	cmp	r3, #64	@ 0x40
 8003c50:	d008      	beq.n	8003c64 <UART_SetConfig+0x200>
 8003c52:	e00f      	b.n	8003c74 <UART_SetConfig+0x210>
 8003c54:	2300      	movs	r3, #0
 8003c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c5a:	e082      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c62:	e07e      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003c64:	2304      	movs	r3, #4
 8003c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c6a:	e07a      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003c6c:	2308      	movs	r3, #8
 8003c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c72:	e076      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003c74:	2310      	movs	r3, #16
 8003c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c7a:	e072      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a35      	ldr	r2, [pc, #212]	@ (8003d58 <UART_SetConfig+0x2f4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d12a      	bne.n	8003cdc <UART_SetConfig+0x278>
 8003c86:	4b30      	ldr	r3, [pc, #192]	@ (8003d48 <UART_SetConfig+0x2e4>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c94:	d01a      	beq.n	8003ccc <UART_SetConfig+0x268>
 8003c96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c9a:	d81b      	bhi.n	8003cd4 <UART_SetConfig+0x270>
 8003c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ca0:	d00c      	beq.n	8003cbc <UART_SetConfig+0x258>
 8003ca2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ca6:	d815      	bhi.n	8003cd4 <UART_SetConfig+0x270>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <UART_SetConfig+0x250>
 8003cac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cb0:	d008      	beq.n	8003cc4 <UART_SetConfig+0x260>
 8003cb2:	e00f      	b.n	8003cd4 <UART_SetConfig+0x270>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cba:	e052      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cc2:	e04e      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cca:	e04a      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003ccc:	2308      	movs	r3, #8
 8003cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cd2:	e046      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cda:	e042      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a17      	ldr	r2, [pc, #92]	@ (8003d40 <UART_SetConfig+0x2dc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d13a      	bne.n	8003d5c <UART_SetConfig+0x2f8>
 8003ce6:	4b18      	ldr	r3, [pc, #96]	@ (8003d48 <UART_SetConfig+0x2e4>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003cf0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cf4:	d01a      	beq.n	8003d2c <UART_SetConfig+0x2c8>
 8003cf6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cfa:	d81b      	bhi.n	8003d34 <UART_SetConfig+0x2d0>
 8003cfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d00:	d00c      	beq.n	8003d1c <UART_SetConfig+0x2b8>
 8003d02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d06:	d815      	bhi.n	8003d34 <UART_SetConfig+0x2d0>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <UART_SetConfig+0x2b0>
 8003d0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d10:	d008      	beq.n	8003d24 <UART_SetConfig+0x2c0>
 8003d12:	e00f      	b.n	8003d34 <UART_SetConfig+0x2d0>
 8003d14:	2300      	movs	r3, #0
 8003d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d1a:	e022      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d22:	e01e      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003d24:	2304      	movs	r3, #4
 8003d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d2a:	e01a      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d32:	e016      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003d34:	2310      	movs	r3, #16
 8003d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d3a:	e012      	b.n	8003d62 <UART_SetConfig+0x2fe>
 8003d3c:	cfff69f3 	.word	0xcfff69f3
 8003d40:	40008000 	.word	0x40008000
 8003d44:	40013800 	.word	0x40013800
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	40004400 	.word	0x40004400
 8003d50:	40004800 	.word	0x40004800
 8003d54:	40004c00 	.word	0x40004c00
 8003d58:	40005000 	.word	0x40005000
 8003d5c:	2310      	movs	r3, #16
 8003d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4aae      	ldr	r2, [pc, #696]	@ (8004020 <UART_SetConfig+0x5bc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	f040 8097 	bne.w	8003e9c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d823      	bhi.n	8003dbe <UART_SetConfig+0x35a>
 8003d76:	a201      	add	r2, pc, #4	@ (adr r2, 8003d7c <UART_SetConfig+0x318>)
 8003d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7c:	08003da1 	.word	0x08003da1
 8003d80:	08003dbf 	.word	0x08003dbf
 8003d84:	08003da9 	.word	0x08003da9
 8003d88:	08003dbf 	.word	0x08003dbf
 8003d8c:	08003daf 	.word	0x08003daf
 8003d90:	08003dbf 	.word	0x08003dbf
 8003d94:	08003dbf 	.word	0x08003dbf
 8003d98:	08003dbf 	.word	0x08003dbf
 8003d9c:	08003db7 	.word	0x08003db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da0:	f7fe fd98 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8003da4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003da6:	e010      	b.n	8003dca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003da8:	4b9e      	ldr	r3, [pc, #632]	@ (8004024 <UART_SetConfig+0x5c0>)
 8003daa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003dac:	e00d      	b.n	8003dca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dae:	f7fe fd23 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 8003db2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003db4:	e009      	b.n	8003dca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003db6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003dbc:	e005      	b.n	8003dca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003dc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8130 	beq.w	8004032 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd6:	4a94      	ldr	r2, [pc, #592]	@ (8004028 <UART_SetConfig+0x5c4>)
 8003dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	4413      	add	r3, r2
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d305      	bcc.n	8003e02 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d903      	bls.n	8003e0a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e08:	e113      	b.n	8004032 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	60bb      	str	r3, [r7, #8]
 8003e10:	60fa      	str	r2, [r7, #12]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e16:	4a84      	ldr	r2, [pc, #528]	@ (8004028 <UART_SetConfig+0x5c4>)
 8003e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2200      	movs	r2, #0
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e2c:	f7fc fe9a 	bl	8000b64 <__aeabi_uldivmod>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4610      	mov	r0, r2
 8003e36:	4619      	mov	r1, r3
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	020b      	lsls	r3, r1, #8
 8003e42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e46:	0202      	lsls	r2, r0, #8
 8003e48:	6979      	ldr	r1, [r7, #20]
 8003e4a:	6849      	ldr	r1, [r1, #4]
 8003e4c:	0849      	lsrs	r1, r1, #1
 8003e4e:	2000      	movs	r0, #0
 8003e50:	460c      	mov	r4, r1
 8003e52:	4605      	mov	r5, r0
 8003e54:	eb12 0804 	adds.w	r8, r2, r4
 8003e58:	eb43 0905 	adc.w	r9, r3, r5
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	469a      	mov	sl, r3
 8003e64:	4693      	mov	fp, r2
 8003e66:	4652      	mov	r2, sl
 8003e68:	465b      	mov	r3, fp
 8003e6a:	4640      	mov	r0, r8
 8003e6c:	4649      	mov	r1, r9
 8003e6e:	f7fc fe79 	bl	8000b64 <__aeabi_uldivmod>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4613      	mov	r3, r2
 8003e78:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e80:	d308      	bcc.n	8003e94 <UART_SetConfig+0x430>
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e88:	d204      	bcs.n	8003e94 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6a3a      	ldr	r2, [r7, #32]
 8003e90:	60da      	str	r2, [r3, #12]
 8003e92:	e0ce      	b.n	8004032 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e9a:	e0ca      	b.n	8004032 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea4:	d166      	bne.n	8003f74 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003ea6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003eaa:	2b08      	cmp	r3, #8
 8003eac:	d827      	bhi.n	8003efe <UART_SetConfig+0x49a>
 8003eae:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb4 <UART_SetConfig+0x450>)
 8003eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb4:	08003ed9 	.word	0x08003ed9
 8003eb8:	08003ee1 	.word	0x08003ee1
 8003ebc:	08003ee9 	.word	0x08003ee9
 8003ec0:	08003eff 	.word	0x08003eff
 8003ec4:	08003eef 	.word	0x08003eef
 8003ec8:	08003eff 	.word	0x08003eff
 8003ecc:	08003eff 	.word	0x08003eff
 8003ed0:	08003eff 	.word	0x08003eff
 8003ed4:	08003ef7 	.word	0x08003ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ed8:	f7fe fcfc 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8003edc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ede:	e014      	b.n	8003f0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ee0:	f7fe fd0e 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 8003ee4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ee6:	e010      	b.n	8003f0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ee8:	4b4e      	ldr	r3, [pc, #312]	@ (8004024 <UART_SetConfig+0x5c0>)
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003eec:	e00d      	b.n	8003f0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eee:	f7fe fc83 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 8003ef2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ef4:	e009      	b.n	8003f0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003efc:	e005      	b.n	8003f0a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8090 	beq.w	8004032 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f16:	4a44      	ldr	r2, [pc, #272]	@ (8004028 <UART_SetConfig+0x5c4>)
 8003f18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f20:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f24:	005a      	lsls	r2, r3, #1
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	085b      	lsrs	r3, r3, #1
 8003f2c:	441a      	add	r2, r3
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	2b0f      	cmp	r3, #15
 8003f3c:	d916      	bls.n	8003f6c <UART_SetConfig+0x508>
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f44:	d212      	bcs.n	8003f6c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	f023 030f 	bic.w	r3, r3, #15
 8003f4e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	085b      	lsrs	r3, r3, #1
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	8bfb      	ldrh	r3, [r7, #30]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	8bfa      	ldrh	r2, [r7, #30]
 8003f68:	60da      	str	r2, [r3, #12]
 8003f6a:	e062      	b.n	8004032 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f72:	e05e      	b.n	8004032 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f74:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d828      	bhi.n	8003fce <UART_SetConfig+0x56a>
 8003f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f84 <UART_SetConfig+0x520>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	08003fa9 	.word	0x08003fa9
 8003f88:	08003fb1 	.word	0x08003fb1
 8003f8c:	08003fb9 	.word	0x08003fb9
 8003f90:	08003fcf 	.word	0x08003fcf
 8003f94:	08003fbf 	.word	0x08003fbf
 8003f98:	08003fcf 	.word	0x08003fcf
 8003f9c:	08003fcf 	.word	0x08003fcf
 8003fa0:	08003fcf 	.word	0x08003fcf
 8003fa4:	08003fc7 	.word	0x08003fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa8:	f7fe fc94 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8003fac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fae:	e014      	b.n	8003fda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fb0:	f7fe fca6 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 8003fb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fb6:	e010      	b.n	8003fda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8004024 <UART_SetConfig+0x5c0>)
 8003fba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fbc:	e00d      	b.n	8003fda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fbe:	f7fe fc1b 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 8003fc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fc4:	e009      	b.n	8003fda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fcc:	e005      	b.n	8003fda <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003fd8:	bf00      	nop
    }

    if (pclk != 0U)
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d028      	beq.n	8004032 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	4a10      	ldr	r2, [pc, #64]	@ (8004028 <UART_SetConfig+0x5c4>)
 8003fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fea:	461a      	mov	r2, r3
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	085b      	lsrs	r3, r3, #1
 8003ff8:	441a      	add	r2, r3
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004002:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	2b0f      	cmp	r3, #15
 8004008:	d910      	bls.n	800402c <UART_SetConfig+0x5c8>
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004010:	d20c      	bcs.n	800402c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	b29a      	uxth	r2, r3
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60da      	str	r2, [r3, #12]
 800401c:	e009      	b.n	8004032 <UART_SetConfig+0x5ce>
 800401e:	bf00      	nop
 8004020:	40008000 	.word	0x40008000
 8004024:	00f42400 	.word	0x00f42400
 8004028:	08004794 	.word	0x08004794
      }
      else
      {
        ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2201      	movs	r2, #1
 8004036:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2201      	movs	r2, #1
 800403e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2200      	movs	r2, #0
 8004046:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2200      	movs	r2, #0
 800404c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800404e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004052:	4618      	mov	r0, r3
 8004054:	3730      	adds	r7, #48	@ 0x30
 8004056:	46bd      	mov	sp, r7
 8004058:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800405c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01a      	beq.n	8004172 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004156:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800415a:	d10a      	bne.n	8004172 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	605a      	str	r2, [r3, #4]
  }
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b098      	sub	sp, #96	@ 0x60
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041b0:	f7fd fb52 	bl	8001858 <HAL_GetTick>
 80041b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d12f      	bne.n	8004224 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041cc:	2200      	movs	r2, #0
 80041ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f88e 	bl	80042f4 <UART_WaitOnFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d022      	beq.n	8004224 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e6:	e853 3f00 	ldrex	r3, [r3]
 80041ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80041fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004204:	e841 2300 	strex	r3, r2, [r1]
 8004208:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800420a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e6      	bne.n	80041de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e063      	b.n	80042ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b04      	cmp	r3, #4
 8004230:	d149      	bne.n	80042c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004232:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423a:	2200      	movs	r2, #0
 800423c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f857 	bl	80042f4 <UART_WaitOnFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d03c      	beq.n	80042c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	623b      	str	r3, [r7, #32]
   return(result);
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004260:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800426a:	633b      	str	r3, [r7, #48]	@ 0x30
 800426c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004272:	e841 2300 	strex	r3, r2, [r1]
 8004276:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e6      	bne.n	800424c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3308      	adds	r3, #8
 8004284:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	60fb      	str	r3, [r7, #12]
   return(result);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3308      	adds	r3, #8
 800429c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800429e:	61fa      	str	r2, [r7, #28]
 80042a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	69b9      	ldr	r1, [r7, #24]
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	617b      	str	r3, [r7, #20]
   return(result);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e5      	bne.n	800427e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e012      	b.n	80042ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3758      	adds	r7, #88	@ 0x58
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	4613      	mov	r3, r2
 8004302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004304:	e04f      	b.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800430c:	d04b      	beq.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430e:	f7fd faa3 	bl	8001858 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	429a      	cmp	r2, r3
 800431c:	d302      	bcc.n	8004324 <UART_WaitOnFlagUntilTimeout+0x30>
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e04e      	b.n	80043c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d037      	beq.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b80      	cmp	r3, #128	@ 0x80
 800433a:	d034      	beq.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b40      	cmp	r3, #64	@ 0x40
 8004340:	d031      	beq.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b08      	cmp	r3, #8
 800434e:	d110      	bne.n	8004372 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2208      	movs	r2, #8
 8004356:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f838 	bl	80043ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2208      	movs	r2, #8
 8004362:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e029      	b.n	80043c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800437c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004380:	d111      	bne.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800438a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f81e 	bl	80043ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2220      	movs	r2, #32
 8004396:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e00f      	b.n	80043c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69da      	ldr	r2, [r3, #28]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4013      	ands	r3, r2
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	bf0c      	ite	eq
 80043b6:	2301      	moveq	r3, #1
 80043b8:	2300      	movne	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	79fb      	ldrb	r3, [r7, #7]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d0a0      	beq.n	8004306 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b095      	sub	sp, #84	@ 0x54
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80043f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e6      	bne.n	80043d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3308      	adds	r3, #8
 800440e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	61fb      	str	r3, [r7, #28]
   return(result);
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800441e:	f023 0301 	bic.w	r3, r3, #1
 8004422:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3308      	adds	r3, #8
 800442a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800442c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800442e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e3      	bne.n	8004408 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004444:	2b01      	cmp	r3, #1
 8004446:	d118      	bne.n	800447a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	60bb      	str	r3, [r7, #8]
   return(result);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f023 0310 	bic.w	r3, r3, #16
 800445c:	647b      	str	r3, [r7, #68]	@ 0x44
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004466:	61bb      	str	r3, [r7, #24]
 8004468:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6979      	ldr	r1, [r7, #20]
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	613b      	str	r3, [r7, #16]
   return(result);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e6      	bne.n	8004448 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800448e:	bf00      	nop
 8004490:	3754      	adds	r7, #84	@ 0x54
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e027      	b.n	8004500 <HAL_UARTEx_DisableFifoMode+0x66>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2224      	movs	r2, #36	@ 0x24
 80044bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0201 	bic.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80044de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004520:	2302      	movs	r3, #2
 8004522:	e02d      	b.n	8004580 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2224      	movs	r2, #36	@ 0x24
 8004530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0201 	bic.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f84f 	bl	8004604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800459c:	2302      	movs	r3, #2
 800459e:	e02d      	b.n	80045fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2224      	movs	r2, #36	@ 0x24
 80045ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f811 	bl	8004604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004610:	2b00      	cmp	r3, #0
 8004612:	d108      	bne.n	8004626 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004624:	e031      	b.n	800468a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004626:	2308      	movs	r3, #8
 8004628:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800462a:	2308      	movs	r3, #8
 800462c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	0e5b      	lsrs	r3, r3, #25
 8004636:	b2db      	uxtb	r3, r3
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	0f5b      	lsrs	r3, r3, #29
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800464e:	7bbb      	ldrb	r3, [r7, #14]
 8004650:	7b3a      	ldrb	r2, [r7, #12]
 8004652:	4911      	ldr	r1, [pc, #68]	@ (8004698 <UARTEx_SetNbDataToProcess+0x94>)
 8004654:	5c8a      	ldrb	r2, [r1, r2]
 8004656:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800465a:	7b3a      	ldrb	r2, [r7, #12]
 800465c:	490f      	ldr	r1, [pc, #60]	@ (800469c <UARTEx_SetNbDataToProcess+0x98>)
 800465e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004660:	fb93 f3f2 	sdiv	r3, r3, r2
 8004664:	b29a      	uxth	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	7b7a      	ldrb	r2, [r7, #13]
 8004670:	4909      	ldr	r1, [pc, #36]	@ (8004698 <UARTEx_SetNbDataToProcess+0x94>)
 8004672:	5c8a      	ldrb	r2, [r1, r2]
 8004674:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004678:	7b7a      	ldrb	r2, [r7, #13]
 800467a:	4908      	ldr	r1, [pc, #32]	@ (800469c <UARTEx_SetNbDataToProcess+0x98>)
 800467c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800467e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004682:	b29a      	uxth	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	080047ac 	.word	0x080047ac
 800469c:	080047b4 	.word	0x080047b4

080046a0 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	ed93 7a06 	vldr	s14, [r3, #24]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80046b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80046c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80046d0:	eeb1 7a67 	vneg.f32	s14, s15
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80046da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80046de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1a      	ldr	r2, [r3, #32]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d006      	beq.n	8004704 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	330c      	adds	r3, #12
 80046fa:	220c      	movs	r2, #12
 80046fc:	2100      	movs	r1, #0
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 f804 	bl	800470c <memset>
  }

}
 8004704:	bf00      	nop
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <memset>:
 800470c:	4402      	add	r2, r0
 800470e:	4603      	mov	r3, r0
 8004710:	4293      	cmp	r3, r2
 8004712:	d100      	bne.n	8004716 <memset+0xa>
 8004714:	4770      	bx	lr
 8004716:	f803 1b01 	strb.w	r1, [r3], #1
 800471a:	e7f9      	b.n	8004710 <memset+0x4>

0800471c <__libc_init_array>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	4d0d      	ldr	r5, [pc, #52]	@ (8004754 <__libc_init_array+0x38>)
 8004720:	4c0d      	ldr	r4, [pc, #52]	@ (8004758 <__libc_init_array+0x3c>)
 8004722:	1b64      	subs	r4, r4, r5
 8004724:	10a4      	asrs	r4, r4, #2
 8004726:	2600      	movs	r6, #0
 8004728:	42a6      	cmp	r6, r4
 800472a:	d109      	bne.n	8004740 <__libc_init_array+0x24>
 800472c:	4d0b      	ldr	r5, [pc, #44]	@ (800475c <__libc_init_array+0x40>)
 800472e:	4c0c      	ldr	r4, [pc, #48]	@ (8004760 <__libc_init_array+0x44>)
 8004730:	f000 f818 	bl	8004764 <_init>
 8004734:	1b64      	subs	r4, r4, r5
 8004736:	10a4      	asrs	r4, r4, #2
 8004738:	2600      	movs	r6, #0
 800473a:	42a6      	cmp	r6, r4
 800473c:	d105      	bne.n	800474a <__libc_init_array+0x2e>
 800473e:	bd70      	pop	{r4, r5, r6, pc}
 8004740:	f855 3b04 	ldr.w	r3, [r5], #4
 8004744:	4798      	blx	r3
 8004746:	3601      	adds	r6, #1
 8004748:	e7ee      	b.n	8004728 <__libc_init_array+0xc>
 800474a:	f855 3b04 	ldr.w	r3, [r5], #4
 800474e:	4798      	blx	r3
 8004750:	3601      	adds	r6, #1
 8004752:	e7f2      	b.n	800473a <__libc_init_array+0x1e>
 8004754:	080047c4 	.word	0x080047c4
 8004758:	080047c4 	.word	0x080047c4
 800475c:	080047c4 	.word	0x080047c4
 8004760:	080047c8 	.word	0x080047c8

08004764 <_init>:
 8004764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004766:	bf00      	nop
 8004768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476a:	bc08      	pop	{r3}
 800476c:	469e      	mov	lr, r3
 800476e:	4770      	bx	lr

08004770 <_fini>:
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004772:	bf00      	nop
 8004774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004776:	bc08      	pop	{r3}
 8004778:	469e      	mov	lr, r3
 800477a:	4770      	bx	lr
