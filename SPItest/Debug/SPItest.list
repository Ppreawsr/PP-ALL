
SPItest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003914  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003aec  08003aec  00004aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b2c  08003b2c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b2c  08003b2c  00004b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b34  08003b34  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b34  08003b34  00004b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b38  08003b38  00004b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b3c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  08003b48  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003b48  0000513c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efa9  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002026  00000000  00000000  00013fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00016010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000941  00000000  00000000  00016c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024681  00000000  00000000  00017549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed7e  00000000  00000000  0003bbca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7e20  00000000  00000000  0004a948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132768  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f0  00000000  00000000  001327ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0013589c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003ad4 	.word	0x08003ad4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003ad4 	.word	0x08003ad4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fb11 	bl	8000b32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f80b 	bl	800052a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8dc 	bl	80006d0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000518:	f000 f852 	bl	80005c0 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 800051c:	f000 f89a 	bl	8000654 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  SPITxRx_Setup();
 8000520:	f000 f966 	bl	80007f0 <SPITxRx_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  writeID();
 8000524:	f000 f97a 	bl	800081c <writeID>
 8000528:	e7fc      	b.n	8000524 <main+0x1c>

0800052a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b094      	sub	sp, #80	@ 0x50
 800052e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000530:	f107 0318 	add.w	r3, r7, #24
 8000534:	2238      	movs	r2, #56	@ 0x38
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f003 fa9f 	bl	8003a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800054c:	2000      	movs	r0, #0
 800054e:	f000 fecf 	bl	80012f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000552:	2302      	movs	r3, #2
 8000554:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000556:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800055a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055c:	2340      	movs	r3, #64	@ 0x40
 800055e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000568:	2304      	movs	r3, #4
 800056a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800056c:	2355      	movs	r3, #85	@ 0x55
 800056e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000570:	2302      	movs	r3, #2
 8000572:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0318 	add.w	r3, r7, #24
 8000580:	4618      	mov	r0, r3
 8000582:	f000 ff69 	bl	8001458 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800058c:	f000 f986 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2303      	movs	r3, #3
 8000596:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2104      	movs	r1, #4
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fa67 	bl	8001a7c <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005b4:	f000 f972 	bl	800089c <Error_Handler>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3750      	adds	r7, #80	@ 0x50
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005c4:	4b21      	ldr	r3, [pc, #132]	@ (800064c <MX_LPUART1_UART_Init+0x8c>)
 80005c6:	4a22      	ldr	r2, [pc, #136]	@ (8000650 <MX_LPUART1_UART_Init+0x90>)
 80005c8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005ca:	4b20      	ldr	r3, [pc, #128]	@ (800064c <MX_LPUART1_UART_Init+0x8c>)
 80005cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005d0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b1e      	ldr	r3, [pc, #120]	@ (800064c <MX_LPUART1_UART_Init+0x8c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <MX_LPUART1_UART_Init+0x8c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005de:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <MX_LPUART1_UART_Init+0x8c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b19      	ldr	r3, [pc, #100]	@ (800064c <MX_LPUART1_UART_Init+0x8c>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b18      	ldr	r3, [pc, #96]	@ (800064c <MX_LPUART1_UART_Init+0x8c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f0:	4b16      	ldr	r3, [pc, #88]	@ (800064c <MX_LPUART1_UART_Init+0x8c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005f6:	4b15      	ldr	r3, [pc, #84]	@ (800064c <MX_LPUART1_UART_Init+0x8c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005fc:	4b13      	ldr	r3, [pc, #76]	@ (800064c <MX_LPUART1_UART_Init+0x8c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000602:	4812      	ldr	r0, [pc, #72]	@ (800064c <MX_LPUART1_UART_Init+0x8c>)
 8000604:	f002 fbcc 	bl	8002da0 <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800060e:	f000 f945 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000612:	2100      	movs	r1, #0
 8000614:	480d      	ldr	r0, [pc, #52]	@ (800064c <MX_LPUART1_UART_Init+0x8c>)
 8000616:	f003 f967 	bl	80038e8 <HAL_UARTEx_SetTxFifoThreshold>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000620:	f000 f93c 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000624:	2100      	movs	r1, #0
 8000626:	4809      	ldr	r0, [pc, #36]	@ (800064c <MX_LPUART1_UART_Init+0x8c>)
 8000628:	f003 f99c 	bl	8003964 <HAL_UARTEx_SetRxFifoThreshold>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000632:	f000 f933 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000636:	4805      	ldr	r0, [pc, #20]	@ (800064c <MX_LPUART1_UART_Init+0x8c>)
 8000638:	f003 f91d 	bl	8003876 <HAL_UARTEx_DisableFifoMode>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000642:	f000 f92b 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000028 	.word	0x20000028
 8000650:	40008000 	.word	0x40008000

08000654 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000658:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_SPI3_Init+0x74>)
 800065a:	4a1c      	ldr	r2, [pc, #112]	@ (80006cc <MX_SPI3_Init+0x78>)
 800065c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800065e:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <MX_SPI3_Init+0x74>)
 8000660:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000664:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000666:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <MX_SPI3_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800066c:	4b16      	ldr	r3, [pc, #88]	@ (80006c8 <MX_SPI3_Init+0x74>)
 800066e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000672:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000674:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <MX_SPI3_Init+0x74>)
 8000676:	2202      	movs	r2, #2
 8000678:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800067a:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <MX_SPI3_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000680:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_SPI3_Init+0x74>)
 8000682:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000686:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <MX_SPI3_Init+0x74>)
 800068a:	2238      	movs	r2, #56	@ 0x38
 800068c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_SPI3_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_SPI3_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <MX_SPI3_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80006a0:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <MX_SPI3_Init+0x74>)
 80006a2:	2207      	movs	r2, #7
 80006a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <MX_SPI3_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006ac:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_SPI3_Init+0x74>)
 80006ae:	2208      	movs	r2, #8
 80006b0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <MX_SPI3_Init+0x74>)
 80006b4:	f001 fe4c 	bl	8002350 <HAL_SPI_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80006be:	f000 f8ed 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200000bc 	.word	0x200000bc
 80006cc:	40003c00 	.word	0x40003c00

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	@ 0x28
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	4b3f      	ldr	r3, [pc, #252]	@ (80007e4 <MX_GPIO_Init+0x114>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ea:	4a3e      	ldr	r2, [pc, #248]	@ (80007e4 <MX_GPIO_Init+0x114>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f2:	4b3c      	ldr	r3, [pc, #240]	@ (80007e4 <MX_GPIO_Init+0x114>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006fe:	4b39      	ldr	r3, [pc, #228]	@ (80007e4 <MX_GPIO_Init+0x114>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	4a38      	ldr	r2, [pc, #224]	@ (80007e4 <MX_GPIO_Init+0x114>)
 8000704:	f043 0320 	orr.w	r3, r3, #32
 8000708:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070a:	4b36      	ldr	r3, [pc, #216]	@ (80007e4 <MX_GPIO_Init+0x114>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	f003 0320 	and.w	r3, r3, #32
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b33      	ldr	r3, [pc, #204]	@ (80007e4 <MX_GPIO_Init+0x114>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	4a32      	ldr	r2, [pc, #200]	@ (80007e4 <MX_GPIO_Init+0x114>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000722:	4b30      	ldr	r3, [pc, #192]	@ (80007e4 <MX_GPIO_Init+0x114>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072e:	4b2d      	ldr	r3, [pc, #180]	@ (80007e4 <MX_GPIO_Init+0x114>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	4a2c      	ldr	r2, [pc, #176]	@ (80007e4 <MX_GPIO_Init+0x114>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073a:	4b2a      	ldr	r3, [pc, #168]	@ (80007e4 <MX_GPIO_Init+0x114>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b27      	ldr	r3, [pc, #156]	@ (80007e4 <MX_GPIO_Init+0x114>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	4a26      	ldr	r2, [pc, #152]	@ (80007e4 <MX_GPIO_Init+0x114>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000752:	4b24      	ldr	r3, [pc, #144]	@ (80007e4 <MX_GPIO_Init+0x114>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2120      	movs	r1, #32
 8000762:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000766:	f000 fd87 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2104      	movs	r1, #4
 800076e:	481e      	ldr	r0, [pc, #120]	@ (80007e8 <MX_GPIO_Init+0x118>)
 8000770:	f000 fd82 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000774:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	4818      	ldr	r0, [pc, #96]	@ (80007ec <MX_GPIO_Init+0x11c>)
 800078c:	f000 fbda 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000790:	2320      	movs	r3, #32
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007aa:	f000 fbcb 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007ae:	2304      	movs	r3, #4
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	4808      	ldr	r0, [pc, #32]	@ (80007e8 <MX_GPIO_Init+0x118>)
 80007c6:	f000 fbbd 	bl	8000f44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	2028      	movs	r0, #40	@ 0x28
 80007d0:	f000 fb1d 	bl	8000e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007d4:	2028      	movs	r0, #40	@ 0x28
 80007d6:	f000 fb34 	bl	8000e42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007da:	bf00      	nop
 80007dc:	3728      	adds	r7, #40	@ 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000
 80007e8:	48000c00 	.word	0x48000c00
 80007ec:	48000800 	.word	0x48000800

080007f0 <SPITxRx_Setup>:

/* USER CODE BEGIN 4 */
void SPITxRx_Setup(){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
    //CS pulse
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 80007f4:	2200      	movs	r2, #0
 80007f6:	2104      	movs	r1, #4
 80007f8:	4807      	ldr	r0, [pc, #28]	@ (8000818 <SPITxRx_Setup+0x28>)
 80007fa:	f000 fd3d 	bl	8001278 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80007fe:	2001      	movs	r0, #1
 8000800:	f000 fa08 	bl	8000c14 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 8000804:	2201      	movs	r2, #1
 8000806:	2104      	movs	r1, #4
 8000808:	4803      	ldr	r0, [pc, #12]	@ (8000818 <SPITxRx_Setup+0x28>)
 800080a:	f000 fd35 	bl	8001278 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800080e:	2001      	movs	r0, #1
 8000810:	f000 fa00 	bl	8000c14 <HAL_Delay>
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	48000c00 	.word	0x48000c00

0800081c <writeID>:

void writeID(){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    if((HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))){
 8000820:	2104      	movs	r1, #4
 8000822:	4812      	ldr	r0, [pc, #72]	@ (800086c <writeID+0x50>)
 8000824:	f000 fd10 	bl	8001248 <HAL_GPIO_ReadPin>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d01c      	beq.n	8000868 <writeID+0x4c>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 800082e:	2200      	movs	r2, #0
 8000830:	2104      	movs	r1, #4
 8000832:	480e      	ldr	r0, [pc, #56]	@ (800086c <writeID+0x50>)
 8000834:	f000 fd20 	bl	8001278 <HAL_GPIO_WritePin>
//            SPITx[0] = 0b01000000;
//            SPITx[1] = 0x15;
            SPITx[0] = 0x65;
 8000838:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <writeID+0x54>)
 800083a:	2265      	movs	r2, #101	@ 0x65
 800083c:	701a      	strb	r2, [r3, #0]
            SPITx[1] = 0x34;
 800083e:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <writeID+0x54>)
 8000840:	2234      	movs	r2, #52	@ 0x34
 8000842:	705a      	strb	r2, [r3, #1]
            SPITx[2] = 0x05;
 8000844:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <writeID+0x54>)
 8000846:	2205      	movs	r2, #5
 8000848:	709a      	strb	r2, [r3, #2]
            SPITx[3] = 0x00;
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <writeID+0x54>)
 800084c:	2200      	movs	r2, #0
 800084e:	70da      	strb	r2, [r3, #3]
            SPITx[4] = 0x02;
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <writeID+0x54>)
 8000852:	2202      	movs	r2, #2
 8000854:	711a      	strb	r2, [r3, #4]
            SPITx[5] = 0x60;
 8000856:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <writeID+0x54>)
 8000858:	2260      	movs	r2, #96	@ 0x60
 800085a:	715a      	strb	r2, [r3, #5]
            HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 6);
 800085c:	2306      	movs	r3, #6
 800085e:	4a05      	ldr	r2, [pc, #20]	@ (8000874 <writeID+0x58>)
 8000860:	4903      	ldr	r1, [pc, #12]	@ (8000870 <writeID+0x54>)
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <writeID+0x5c>)
 8000864:	f001 fe20 	bl	80024a8 <HAL_SPI_TransmitReceive_IT>
    }
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	48000c00 	.word	0x48000c00
 8000870:	2000012c 	.word	0x2000012c
 8000874:	20000120 	.word	0x20000120
 8000878:	200000bc 	.word	0x200000bc

0800087c <HAL_SPI_TxRxCpltCallback>:


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000884:	2201      	movs	r2, #1
 8000886:	2104      	movs	r1, #4
 8000888:	4803      	ldr	r0, [pc, #12]	@ (8000898 <HAL_SPI_TxRxCpltCallback+0x1c>)
 800088a:	f000 fcf5 	bl	8001278 <HAL_GPIO_WritePin>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	48000c00 	.word	0x48000c00

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <Error_Handler+0x8>

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <HAL_MspInit+0x44>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008b2:	4a0e      	ldr	r2, [pc, #56]	@ (80008ec <HAL_MspInit+0x44>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <HAL_MspInit+0x44>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <HAL_MspInit+0x44>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ca:	4a08      	ldr	r2, [pc, #32]	@ (80008ec <HAL_MspInit+0x44>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <HAL_MspInit+0x44>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008de:	f000 fdab 	bl	8001438 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09e      	sub	sp, #120	@ 0x78
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	2254      	movs	r2, #84	@ 0x54
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f003 f8b3 	bl	8003a7c <memset>
  if(huart->Instance==LPUART1)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a1f      	ldr	r2, [pc, #124]	@ (8000998 <HAL_UART_MspInit+0xa8>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d136      	bne.n	800098e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000920:	2320      	movs	r3, #32
 8000922:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4618      	mov	r0, r3
 800092e:	f001 fac1 	bl	8001eb4 <HAL_RCCEx_PeriphCLKConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000938:	f7ff ffb0 	bl	800089c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800093c:	4b17      	ldr	r3, [pc, #92]	@ (800099c <HAL_UART_MspInit+0xac>)
 800093e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000940:	4a16      	ldr	r2, [pc, #88]	@ (800099c <HAL_UART_MspInit+0xac>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <HAL_UART_MspInit+0xac>)
 800094a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b11      	ldr	r3, [pc, #68]	@ (800099c <HAL_UART_MspInit+0xac>)
 8000956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000958:	4a10      	ldr	r2, [pc, #64]	@ (800099c <HAL_UART_MspInit+0xac>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000960:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <HAL_UART_MspInit+0xac>)
 8000962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800096c:	230c      	movs	r3, #12
 800096e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800097c:	230c      	movs	r3, #12
 800097e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000984:	4619      	mov	r1, r3
 8000986:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800098a:	f000 fadb 	bl	8000f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	3778      	adds	r7, #120	@ 0x78
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40008000 	.word	0x40008000
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	@ 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a2c <HAL_SPI_MspInit+0x8c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d130      	bne.n	8000a24 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a30 <HAL_SPI_MspInit+0x90>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000a30 <HAL_SPI_MspInit+0x90>)
 80009c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ce:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <HAL_SPI_MspInit+0x90>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <HAL_SPI_MspInit+0x90>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	4a14      	ldr	r2, [pc, #80]	@ (8000a30 <HAL_SPI_MspInit+0x90>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e6:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <HAL_SPI_MspInit+0x90>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80009f2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a04:	2306      	movs	r3, #6
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4809      	ldr	r0, [pc, #36]	@ (8000a34 <HAL_SPI_MspInit+0x94>)
 8000a10:	f000 fa98 	bl	8000f44 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	2033      	movs	r0, #51	@ 0x33
 8000a1a:	f000 f9f8 	bl	8000e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000a1e:	2033      	movs	r0, #51	@ 0x33
 8000a20:	f000 fa0f 	bl	8000e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	@ 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40003c00 	.word	0x40003c00
 8000a30:	40021000 	.word	0x40021000
 8000a34:	48000800 	.word	0x48000800

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <NMI_Handler+0x4>

08000a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <MemManage_Handler+0x4>

08000a50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8e:	f000 f8a3 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a9a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a9e:	f000 fc03 	bl	80012a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000aac:	4802      	ldr	r0, [pc, #8]	@ (8000ab8 <SPI3_IRQHandler+0x10>)
 8000aae:	f001 fda9 	bl	8002604 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200000bc 	.word	0x200000bc

08000abc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <SystemInit+0x20>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ac6:	4a05      	ldr	r2, [pc, #20]	@ (8000adc <SystemInit+0x20>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ae0:	480d      	ldr	r0, [pc, #52]	@ (8000b18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ae2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae4:	f7ff ffea 	bl	8000abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae8:	480c      	ldr	r0, [pc, #48]	@ (8000b1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000aea:	490d      	ldr	r1, [pc, #52]	@ (8000b20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aec:	4a0d      	ldr	r2, [pc, #52]	@ (8000b24 <LoopForever+0xe>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000af0:	e002      	b.n	8000af8 <LoopCopyDataInit>

08000af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af6:	3304      	adds	r3, #4

08000af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000afc:	d3f9      	bcc.n	8000af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afe:	4a0a      	ldr	r2, [pc, #40]	@ (8000b28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b00:	4c0a      	ldr	r4, [pc, #40]	@ (8000b2c <LoopForever+0x16>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b04:	e001      	b.n	8000b0a <LoopFillZerobss>

08000b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b08:	3204      	adds	r2, #4

08000b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b0c:	d3fb      	bcc.n	8000b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b0e:	f002 ffbd 	bl	8003a8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b12:	f7ff fcf9 	bl	8000508 <main>

08000b16 <LoopForever>:

LoopForever:
    b LoopForever
 8000b16:	e7fe      	b.n	8000b16 <LoopForever>
  ldr   r0, =_estack
 8000b18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b24:	08003b3c 	.word	0x08003b3c
  ldr r2, =_sbss
 8000b28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b2c:	2000013c 	.word	0x2000013c

08000b30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC1_2_IRQHandler>

08000b32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 f95b 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b42:	2000      	movs	r0, #0
 8000b44:	f000 f80e 	bl	8000b64 <HAL_InitTick>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d002      	beq.n	8000b54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	71fb      	strb	r3, [r7, #7]
 8000b52:	e001      	b.n	8000b58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b54:	f7ff fea8 	bl	80008a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b58:	79fb      	ldrb	r3, [r7, #7]

}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b70:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <HAL_InitTick+0x68>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d022      	beq.n	8000bbe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b78:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <HAL_InitTick+0x6c>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <HAL_InitTick+0x68>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b84:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 f966 	bl	8000e5e <HAL_SYSTICK_Config>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d10f      	bne.n	8000bb8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b0f      	cmp	r3, #15
 8000b9c:	d809      	bhi.n	8000bb2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	6879      	ldr	r1, [r7, #4]
 8000ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba6:	f000 f932 	bl	8000e0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <HAL_InitTick+0x70>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	e007      	b.n	8000bc2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	73fb      	strb	r3, [r7, #15]
 8000bb6:	e004      	b.n	8000bc2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	e001      	b.n	8000bc2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bdc:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <HAL_IncTick+0x1c>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <HAL_IncTick+0x20>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	4a03      	ldr	r2, [pc, #12]	@ (8000bf4 <HAL_IncTick+0x1c>)
 8000be8:	6013      	str	r3, [r2, #0]
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	20000138 	.word	0x20000138
 8000bf8:	20000008 	.word	0x20000008

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	@ (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000138 	.word	0x20000138

08000c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff ffee 	bl	8000bfc <HAL_GetTick>
 8000c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c2c:	d004      	beq.n	8000c38 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <HAL_Delay+0x40>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	4413      	add	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c38:	bf00      	nop
 8000c3a:	f7ff ffdf 	bl	8000bfc <HAL_GetTick>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d8f7      	bhi.n	8000c3a <HAL_Delay+0x26>
  {
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000008 	.word	0x20000008

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	@ (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	@ (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db0b      	blt.n	8000ce6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 021f 	and.w	r2, r3, #31
 8000cd4:	4907      	ldr	r1, [pc, #28]	@ (8000cf4 <__NVIC_EnableIRQ+0x38>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2001      	movs	r0, #1
 8000cde:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	@ (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	@ (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	@ 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	@ 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dc4:	d301      	bcc.n	8000dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00f      	b.n	8000dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <SysTick_Config+0x40>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f7ff ff8e 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <SysTick_Config+0x40>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <SysTick_Config+0x40>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff29 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1c:	f7ff ff40 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000e20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	68b9      	ldr	r1, [r7, #8]
 8000e26:	6978      	ldr	r0, [r7, #20]
 8000e28:	f7ff ff90 	bl	8000d4c <NVIC_EncodePriority>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff5f 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff33 	bl	8000cbc <__NVIC_EnableIRQ>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffa4 	bl	8000db4 <SysTick_Config>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2204      	movs	r2, #4
 8000e92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2201      	movs	r2, #1
 8000e98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e047      	b.n	8000f3a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 020e 	bic.w	r2, r2, #14
 8000eb8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 0201 	bic.w	r2, r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ed4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ed8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ede:	f003 021f 	and.w	r2, r3, #31
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000ef6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d00c      	beq.n	8000f1a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f18:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	4798      	blx	r3
    }
  }
  return status;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f52:	e15a      	b.n	800120a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	4013      	ands	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 814c 	beq.w	8001204 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d005      	beq.n	8000f84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d130      	bne.n	8000fe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fba:	2201      	movs	r2, #1
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	091b      	lsrs	r3, r3, #4
 8000fd0:	f003 0201 	and.w	r2, r3, #1
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d017      	beq.n	8001022 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d123      	bne.n	8001076 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	220f      	movs	r2, #15
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	691a      	ldr	r2, [r3, #16]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	08da      	lsrs	r2, r3, #3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	6939      	ldr	r1, [r7, #16]
 8001072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0203 	and.w	r2, r3, #3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 80a6 	beq.w	8001204 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001228 <HAL_GPIO_Init+0x2e4>)
 80010ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010bc:	4a5a      	ldr	r2, [pc, #360]	@ (8001228 <HAL_GPIO_Init+0x2e4>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80010c4:	4b58      	ldr	r3, [pc, #352]	@ (8001228 <HAL_GPIO_Init+0x2e4>)
 80010c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d0:	4a56      	ldr	r2, [pc, #344]	@ (800122c <HAL_GPIO_Init+0x2e8>)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010fa:	d01f      	beq.n	800113c <HAL_GPIO_Init+0x1f8>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a4c      	ldr	r2, [pc, #304]	@ (8001230 <HAL_GPIO_Init+0x2ec>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d019      	beq.n	8001138 <HAL_GPIO_Init+0x1f4>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a4b      	ldr	r2, [pc, #300]	@ (8001234 <HAL_GPIO_Init+0x2f0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d013      	beq.n	8001134 <HAL_GPIO_Init+0x1f0>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a4a      	ldr	r2, [pc, #296]	@ (8001238 <HAL_GPIO_Init+0x2f4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d00d      	beq.n	8001130 <HAL_GPIO_Init+0x1ec>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a49      	ldr	r2, [pc, #292]	@ (800123c <HAL_GPIO_Init+0x2f8>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d007      	beq.n	800112c <HAL_GPIO_Init+0x1e8>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a48      	ldr	r2, [pc, #288]	@ (8001240 <HAL_GPIO_Init+0x2fc>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d101      	bne.n	8001128 <HAL_GPIO_Init+0x1e4>
 8001124:	2305      	movs	r3, #5
 8001126:	e00a      	b.n	800113e <HAL_GPIO_Init+0x1fa>
 8001128:	2306      	movs	r3, #6
 800112a:	e008      	b.n	800113e <HAL_GPIO_Init+0x1fa>
 800112c:	2304      	movs	r3, #4
 800112e:	e006      	b.n	800113e <HAL_GPIO_Init+0x1fa>
 8001130:	2303      	movs	r3, #3
 8001132:	e004      	b.n	800113e <HAL_GPIO_Init+0x1fa>
 8001134:	2302      	movs	r3, #2
 8001136:	e002      	b.n	800113e <HAL_GPIO_Init+0x1fa>
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <HAL_GPIO_Init+0x1fa>
 800113c:	2300      	movs	r3, #0
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	f002 0203 	and.w	r2, r2, #3
 8001144:	0092      	lsls	r2, r2, #2
 8001146:	4093      	lsls	r3, r2
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114e:	4937      	ldr	r1, [pc, #220]	@ (800122c <HAL_GPIO_Init+0x2e8>)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800115c:	4b39      	ldr	r3, [pc, #228]	@ (8001244 <HAL_GPIO_Init+0x300>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001180:	4a30      	ldr	r2, [pc, #192]	@ (8001244 <HAL_GPIO_Init+0x300>)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001186:	4b2f      	ldr	r3, [pc, #188]	@ (8001244 <HAL_GPIO_Init+0x300>)
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011aa:	4a26      	ldr	r2, [pc, #152]	@ (8001244 <HAL_GPIO_Init+0x300>)
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011b0:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <HAL_GPIO_Init+0x300>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001244 <HAL_GPIO_Init+0x300>)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <HAL_GPIO_Init+0x300>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011fe:	4a11      	ldr	r2, [pc, #68]	@ (8001244 <HAL_GPIO_Init+0x300>)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3301      	adds	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	fa22 f303 	lsr.w	r3, r2, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	f47f ae9d 	bne.w	8000f54 <HAL_GPIO_Init+0x10>
  }
}
 800121a:	bf00      	nop
 800121c:	bf00      	nop
 800121e:	371c      	adds	r7, #28
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	40021000 	.word	0x40021000
 800122c:	40010000 	.word	0x40010000
 8001230:	48000400 	.word	0x48000400
 8001234:	48000800 	.word	0x48000800
 8001238:	48000c00 	.word	0x48000c00
 800123c:	48001000 	.word	0x48001000
 8001240:	48001400 	.word	0x48001400
 8001244:	40010400 	.word	0x40010400

08001248 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	4013      	ands	r3, r2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001260:	2301      	movs	r3, #1
 8001262:	73fb      	strb	r3, [r7, #15]
 8001264:	e001      	b.n	800126a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001266:	2300      	movs	r3, #0
 8001268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800126a:	7bfb      	ldrb	r3, [r7, #15]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
 8001284:	4613      	mov	r3, r2
 8001286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001288:	787b      	ldrb	r3, [r7, #1]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800128e:	887a      	ldrh	r2, [r7, #2]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001294:	e002      	b.n	800129c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012b2:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d006      	beq.n	80012cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012be:	4a05      	ldr	r2, [pc, #20]	@ (80012d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f806 	bl	80012d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40010400 	.word	0x40010400

080012d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d141      	bne.n	8001382 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012fe:	4b4b      	ldr	r3, [pc, #300]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800130a:	d131      	bne.n	8001370 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800130c:	4b47      	ldr	r3, [pc, #284]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800130e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001312:	4a46      	ldr	r2, [pc, #280]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001318:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800131c:	4b43      	ldr	r3, [pc, #268]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001324:	4a41      	ldr	r2, [pc, #260]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001326:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800132a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800132c:	4b40      	ldr	r3, [pc, #256]	@ (8001430 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2232      	movs	r2, #50	@ 0x32
 8001332:	fb02 f303 	mul.w	r3, r2, r3
 8001336:	4a3f      	ldr	r2, [pc, #252]	@ (8001434 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001338:	fba2 2303 	umull	r2, r3, r2, r3
 800133c:	0c9b      	lsrs	r3, r3, #18
 800133e:	3301      	adds	r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001342:	e002      	b.n	800134a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3b01      	subs	r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800134a:	4b38      	ldr	r3, [pc, #224]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001356:	d102      	bne.n	800135e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f2      	bne.n	8001344 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800135e:	4b33      	ldr	r3, [pc, #204]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800136a:	d158      	bne.n	800141e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e057      	b.n	8001420 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001370:	4b2e      	ldr	r3, [pc, #184]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001376:	4a2d      	ldr	r2, [pc, #180]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800137c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001380:	e04d      	b.n	800141e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001388:	d141      	bne.n	800140e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800138a:	4b28      	ldr	r3, [pc, #160]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001396:	d131      	bne.n	80013fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001398:	4b24      	ldr	r3, [pc, #144]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800139e:	4a23      	ldr	r2, [pc, #140]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a8:	4b20      	ldr	r3, [pc, #128]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013b0:	4a1e      	ldr	r2, [pc, #120]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2232      	movs	r2, #50	@ 0x32
 80013be:	fb02 f303 	mul.w	r3, r2, r3
 80013c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001434 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	0c9b      	lsrs	r3, r3, #18
 80013ca:	3301      	adds	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ce:	e002      	b.n	80013d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013e2:	d102      	bne.n	80013ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f2      	bne.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013f6:	d112      	bne.n	800141e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e011      	b.n	8001420 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013fc:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001402:	4a0a      	ldr	r2, [pc, #40]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001408:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800140c:	e007      	b.n	800141e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800140e:	4b07      	ldr	r3, [pc, #28]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001416:	4a05      	ldr	r2, [pc, #20]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001418:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800141c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	40007000 	.word	0x40007000
 8001430:	20000000 	.word	0x20000000
 8001434:	431bde83 	.word	0x431bde83

08001438 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4a04      	ldr	r2, [pc, #16]	@ (8001454 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001442:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001446:	6093      	str	r3, [r2, #8]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40007000 	.word	0x40007000

08001458 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e2fe      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d075      	beq.n	8001562 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001476:	4b97      	ldr	r3, [pc, #604]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 030c 	and.w	r3, r3, #12
 800147e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001480:	4b94      	ldr	r3, [pc, #592]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	2b0c      	cmp	r3, #12
 800148e:	d102      	bne.n	8001496 <HAL_RCC_OscConfig+0x3e>
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d002      	beq.n	800149c <HAL_RCC_OscConfig+0x44>
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	2b08      	cmp	r3, #8
 800149a:	d10b      	bne.n	80014b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149c:	4b8d      	ldr	r3, [pc, #564]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d05b      	beq.n	8001560 <HAL_RCC_OscConfig+0x108>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d157      	bne.n	8001560 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e2d9      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014bc:	d106      	bne.n	80014cc <HAL_RCC_OscConfig+0x74>
 80014be:	4b85      	ldr	r3, [pc, #532]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a84      	ldr	r2, [pc, #528]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e01d      	b.n	8001508 <HAL_RCC_OscConfig+0xb0>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x98>
 80014d6:	4b7f      	ldr	r3, [pc, #508]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a7e      	ldr	r2, [pc, #504]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 80014dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b7c      	ldr	r3, [pc, #496]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a7b      	ldr	r2, [pc, #492]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 80014e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0xb0>
 80014f0:	4b78      	ldr	r3, [pc, #480]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a77      	ldr	r2, [pc, #476]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 80014f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b75      	ldr	r3, [pc, #468]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a74      	ldr	r2, [pc, #464]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 8001502:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d013      	beq.n	8001538 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff fb74 	bl	8000bfc <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001518:	f7ff fb70 	bl	8000bfc <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	@ 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e29e      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800152a:	4b6a      	ldr	r3, [pc, #424]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0xc0>
 8001536:	e014      	b.n	8001562 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff fb60 	bl	8000bfc <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001540:	f7ff fb5c 	bl	8000bfc <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b64      	cmp	r3, #100	@ 0x64
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e28a      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001552:	4b60      	ldr	r3, [pc, #384]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0xe8>
 800155e:	e000      	b.n	8001562 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d075      	beq.n	800165a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800156e:	4b59      	ldr	r3, [pc, #356]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001578:	4b56      	ldr	r3, [pc, #344]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2b0c      	cmp	r3, #12
 8001586:	d102      	bne.n	800158e <HAL_RCC_OscConfig+0x136>
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d002      	beq.n	8001594 <HAL_RCC_OscConfig+0x13c>
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2b04      	cmp	r3, #4
 8001592:	d11f      	bne.n	80015d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001594:	4b4f      	ldr	r3, [pc, #316]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_RCC_OscConfig+0x154>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e25d      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ac:	4b49      	ldr	r3, [pc, #292]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	061b      	lsls	r3, r3, #24
 80015ba:	4946      	ldr	r1, [pc, #280]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015c0:	4b45      	ldr	r3, [pc, #276]	@ (80016d8 <HAL_RCC_OscConfig+0x280>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff facd 	bl	8000b64 <HAL_InitTick>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d043      	beq.n	8001658 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e249      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d023      	beq.n	8001624 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015dc:	4b3d      	ldr	r3, [pc, #244]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a3c      	ldr	r2, [pc, #240]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 80015e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fb08 	bl	8000bfc <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f0:	f7ff fb04 	bl	8000bfc <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e232      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001602:	4b34      	ldr	r3, [pc, #208]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160e:	4b31      	ldr	r3, [pc, #196]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	061b      	lsls	r3, r3, #24
 800161c:	492d      	ldr	r1, [pc, #180]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 800161e:	4313      	orrs	r3, r2
 8001620:	604b      	str	r3, [r1, #4]
 8001622:	e01a      	b.n	800165a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001624:	4b2b      	ldr	r3, [pc, #172]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a2a      	ldr	r2, [pc, #168]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 800162a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800162e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fae4 	bl	8000bfc <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001638:	f7ff fae0 	bl	8000bfc <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e20e      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800164a:	4b22      	ldr	r3, [pc, #136]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x1e0>
 8001656:	e000      	b.n	800165a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001658:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d041      	beq.n	80016ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d01c      	beq.n	80016a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166e:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 8001670:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001674:	4a17      	ldr	r2, [pc, #92]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167e:	f7ff fabd 	bl	8000bfc <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001686:	f7ff fab9 	bl	8000bfc <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e1e7      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001698:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 800169a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0ef      	beq.n	8001686 <HAL_RCC_OscConfig+0x22e>
 80016a6:	e020      	b.n	80016ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a8:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 80016aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ae:	4a09      	ldr	r2, [pc, #36]	@ (80016d4 <HAL_RCC_OscConfig+0x27c>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b8:	f7ff faa0 	bl	8000bfc <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016be:	e00d      	b.n	80016dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff fa9c 	bl	8000bfc <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d906      	bls.n	80016dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e1ca      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016dc:	4b8c      	ldr	r3, [pc, #560]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 80016de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1ea      	bne.n	80016c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 80a6 	beq.w	8001844 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016fc:	4b84      	ldr	r3, [pc, #528]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_OscConfig+0x2b4>
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <HAL_RCC_OscConfig+0x2b6>
 800170c:	2300      	movs	r3, #0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00d      	beq.n	800172e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	4b7f      	ldr	r3, [pc, #508]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001716:	4a7e      	ldr	r2, [pc, #504]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171c:	6593      	str	r3, [r2, #88]	@ 0x58
 800171e:	4b7c      	ldr	r3, [pc, #496]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800172a:	2301      	movs	r3, #1
 800172c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172e:	4b79      	ldr	r3, [pc, #484]	@ (8001914 <HAL_RCC_OscConfig+0x4bc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d118      	bne.n	800176c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800173a:	4b76      	ldr	r3, [pc, #472]	@ (8001914 <HAL_RCC_OscConfig+0x4bc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a75      	ldr	r2, [pc, #468]	@ (8001914 <HAL_RCC_OscConfig+0x4bc>)
 8001740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001746:	f7ff fa59 	bl	8000bfc <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174e:	f7ff fa55 	bl	8000bfc <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e183      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001760:	4b6c      	ldr	r3, [pc, #432]	@ (8001914 <HAL_RCC_OscConfig+0x4bc>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d108      	bne.n	8001786 <HAL_RCC_OscConfig+0x32e>
 8001774:	4b66      	ldr	r3, [pc, #408]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800177a:	4a65      	ldr	r2, [pc, #404]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001784:	e024      	b.n	80017d0 <HAL_RCC_OscConfig+0x378>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b05      	cmp	r3, #5
 800178c:	d110      	bne.n	80017b0 <HAL_RCC_OscConfig+0x358>
 800178e:	4b60      	ldr	r3, [pc, #384]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 8001790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001794:	4a5e      	ldr	r2, [pc, #376]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 8001796:	f043 0304 	orr.w	r3, r3, #4
 800179a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800179e:	4b5c      	ldr	r3, [pc, #368]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 80017a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a4:	4a5a      	ldr	r2, [pc, #360]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017ae:	e00f      	b.n	80017d0 <HAL_RCC_OscConfig+0x378>
 80017b0:	4b57      	ldr	r3, [pc, #348]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 80017b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b6:	4a56      	ldr	r2, [pc, #344]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 80017b8:	f023 0301 	bic.w	r3, r3, #1
 80017bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017c0:	4b53      	ldr	r3, [pc, #332]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c6:	4a52      	ldr	r2, [pc, #328]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 80017c8:	f023 0304 	bic.w	r3, r3, #4
 80017cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d016      	beq.n	8001806 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d8:	f7ff fa10 	bl	8000bfc <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e0:	f7ff fa0c 	bl	8000bfc <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e138      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f6:	4b46      	ldr	r3, [pc, #280]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 80017f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0ed      	beq.n	80017e0 <HAL_RCC_OscConfig+0x388>
 8001804:	e015      	b.n	8001832 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001806:	f7ff f9f9 	bl	8000bfc <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800180c:	e00a      	b.n	8001824 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff f9f5 	bl	8000bfc <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e121      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001824:	4b3a      	ldr	r3, [pc, #232]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 8001826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1ed      	bne.n	800180e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001832:	7ffb      	ldrb	r3, [r7, #31]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001838:	4b35      	ldr	r3, [pc, #212]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 800183a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183c:	4a34      	ldr	r2, [pc, #208]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 800183e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001842:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	2b00      	cmp	r3, #0
 800184e:	d03c      	beq.n	80018ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d01c      	beq.n	8001892 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001858:	4b2d      	ldr	r3, [pc, #180]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 800185a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800185e:	4a2c      	ldr	r2, [pc, #176]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001868:	f7ff f9c8 	bl	8000bfc <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001870:	f7ff f9c4 	bl	8000bfc <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e0f2      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001882:	4b23      	ldr	r3, [pc, #140]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 8001884:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ef      	beq.n	8001870 <HAL_RCC_OscConfig+0x418>
 8001890:	e01b      	b.n	80018ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001892:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 8001894:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001898:	4a1d      	ldr	r2, [pc, #116]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 800189a:	f023 0301 	bic.w	r3, r3, #1
 800189e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a2:	f7ff f9ab 	bl	8000bfc <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018aa:	f7ff f9a7 	bl	8000bfc <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e0d5      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018bc:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 80018be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1ef      	bne.n	80018aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 80c9 	beq.w	8001a66 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b0c      	cmp	r3, #12
 80018de:	f000 8083 	beq.w	80019e8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d15e      	bne.n	80019a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a08      	ldr	r2, [pc, #32]	@ (8001910 <HAL_RCC_OscConfig+0x4b8>)
 80018f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff f981 	bl	8000bfc <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fc:	e00c      	b.n	8001918 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fe:	f7ff f97d 	bl	8000bfc <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d905      	bls.n	8001918 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e0ab      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
 8001910:	40021000 	.word	0x40021000
 8001914:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001918:	4b55      	ldr	r3, [pc, #340]	@ (8001a70 <HAL_RCC_OscConfig+0x618>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1ec      	bne.n	80018fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001924:	4b52      	ldr	r3, [pc, #328]	@ (8001a70 <HAL_RCC_OscConfig+0x618>)
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	4b52      	ldr	r3, [pc, #328]	@ (8001a74 <HAL_RCC_OscConfig+0x61c>)
 800192a:	4013      	ands	r3, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6a11      	ldr	r1, [r2, #32]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001934:	3a01      	subs	r2, #1
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	4311      	orrs	r1, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800193e:	0212      	lsls	r2, r2, #8
 8001940:	4311      	orrs	r1, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001946:	0852      	lsrs	r2, r2, #1
 8001948:	3a01      	subs	r2, #1
 800194a:	0552      	lsls	r2, r2, #21
 800194c:	4311      	orrs	r1, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001952:	0852      	lsrs	r2, r2, #1
 8001954:	3a01      	subs	r2, #1
 8001956:	0652      	lsls	r2, r2, #25
 8001958:	4311      	orrs	r1, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800195e:	06d2      	lsls	r2, r2, #27
 8001960:	430a      	orrs	r2, r1
 8001962:	4943      	ldr	r1, [pc, #268]	@ (8001a70 <HAL_RCC_OscConfig+0x618>)
 8001964:	4313      	orrs	r3, r2
 8001966:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001968:	4b41      	ldr	r3, [pc, #260]	@ (8001a70 <HAL_RCC_OscConfig+0x618>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a40      	ldr	r2, [pc, #256]	@ (8001a70 <HAL_RCC_OscConfig+0x618>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001972:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001974:	4b3e      	ldr	r3, [pc, #248]	@ (8001a70 <HAL_RCC_OscConfig+0x618>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4a3d      	ldr	r2, [pc, #244]	@ (8001a70 <HAL_RCC_OscConfig+0x618>)
 800197a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800197e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff f93c 	bl	8000bfc <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff f938 	bl	8000bfc <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e066      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	4b35      	ldr	r3, [pc, #212]	@ (8001a70 <HAL_RCC_OscConfig+0x618>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x530>
 80019a6:	e05e      	b.n	8001a66 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a8:	4b31      	ldr	r3, [pc, #196]	@ (8001a70 <HAL_RCC_OscConfig+0x618>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a30      	ldr	r2, [pc, #192]	@ (8001a70 <HAL_RCC_OscConfig+0x618>)
 80019ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff f922 	bl	8000bfc <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019bc:	f7ff f91e 	bl	8000bfc <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e04c      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ce:	4b28      	ldr	r3, [pc, #160]	@ (8001a70 <HAL_RCC_OscConfig+0x618>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80019da:	4b25      	ldr	r3, [pc, #148]	@ (8001a70 <HAL_RCC_OscConfig+0x618>)
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	4924      	ldr	r1, [pc, #144]	@ (8001a70 <HAL_RCC_OscConfig+0x618>)
 80019e0:	4b25      	ldr	r3, [pc, #148]	@ (8001a78 <HAL_RCC_OscConfig+0x620>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	60cb      	str	r3, [r1, #12]
 80019e6:	e03e      	b.n	8001a66 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e039      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a70 <HAL_RCC_OscConfig+0x618>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f003 0203 	and.w	r2, r3, #3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d12c      	bne.n	8001a62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a12:	3b01      	subs	r3, #1
 8001a14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d123      	bne.n	8001a62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a24:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d11b      	bne.n	8001a62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a34:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d113      	bne.n	8001a62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a44:	085b      	lsrs	r3, r3, #1
 8001a46:	3b01      	subs	r3, #1
 8001a48:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d109      	bne.n	8001a62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a58:	085b      	lsrs	r3, r3, #1
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d001      	beq.n	8001a66 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3720      	adds	r7, #32
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000
 8001a74:	019f800c 	.word	0x019f800c
 8001a78:	feeefffc 	.word	0xfeeefffc

08001a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e11e      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a94:	4b91      	ldr	r3, [pc, #580]	@ (8001cdc <HAL_RCC_ClockConfig+0x260>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d910      	bls.n	8001ac4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b8e      	ldr	r3, [pc, #568]	@ (8001cdc <HAL_RCC_ClockConfig+0x260>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 020f 	bic.w	r2, r3, #15
 8001aaa:	498c      	ldr	r1, [pc, #560]	@ (8001cdc <HAL_RCC_ClockConfig+0x260>)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b8a      	ldr	r3, [pc, #552]	@ (8001cdc <HAL_RCC_ClockConfig+0x260>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e106      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d073      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d129      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad8:	4b81      	ldr	r3, [pc, #516]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0f4      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ae8:	f000 f99e 	bl	8001e28 <RCC_GetSysClockFreqFromPLLSource>
 8001aec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4a7c      	ldr	r2, [pc, #496]	@ (8001ce4 <HAL_RCC_ClockConfig+0x268>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d93f      	bls.n	8001b76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001af6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d033      	beq.n	8001b76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d12f      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b16:	4b72      	ldr	r3, [pc, #456]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b1e:	4a70      	ldr	r2, [pc, #448]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b26:	2380      	movs	r3, #128	@ 0x80
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e024      	b.n	8001b76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d107      	bne.n	8001b44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b34:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0c6      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b44:	4b66      	ldr	r3, [pc, #408]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0be      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b54:	f000 f8ce 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8001b58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4a61      	ldr	r2, [pc, #388]	@ (8001ce4 <HAL_RCC_ClockConfig+0x268>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d909      	bls.n	8001b76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b62:	4b5f      	ldr	r3, [pc, #380]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b6a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b72:	2380      	movs	r3, #128	@ 0x80
 8001b74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b76:	4b5a      	ldr	r3, [pc, #360]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 0203 	bic.w	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4957      	ldr	r1, [pc, #348]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b88:	f7ff f838 	bl	8000bfc <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b90:	f7ff f834 	bl	8000bfc <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e095      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	4b4e      	ldr	r3, [pc, #312]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 020c 	and.w	r2, r3, #12
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d1eb      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d023      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd0:	4b43      	ldr	r3, [pc, #268]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a42      	ldr	r2, [pc, #264]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001bd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bda:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d007      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001be8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001bf0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001bf2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bf6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf8:	4b39      	ldr	r3, [pc, #228]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4936      	ldr	r1, [pc, #216]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2b80      	cmp	r3, #128	@ 0x80
 8001c10:	d105      	bne.n	8001c1e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c12:	4b33      	ldr	r3, [pc, #204]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	4a32      	ldr	r2, [pc, #200]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001c18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c1c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001cdc <HAL_RCC_ClockConfig+0x260>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d21d      	bcs.n	8001c68 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001cdc <HAL_RCC_ClockConfig+0x260>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f023 020f 	bic.w	r2, r3, #15
 8001c34:	4929      	ldr	r1, [pc, #164]	@ (8001cdc <HAL_RCC_ClockConfig+0x260>)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c3c:	f7fe ffde 	bl	8000bfc <HAL_GetTick>
 8001c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7fe ffda 	bl	8000bfc <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e03b      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	4b20      	ldr	r3, [pc, #128]	@ (8001cdc <HAL_RCC_ClockConfig+0x260>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d1ed      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d008      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	4917      	ldr	r1, [pc, #92]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d009      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c92:	4b13      	ldr	r3, [pc, #76]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	490f      	ldr	r1, [pc, #60]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ca6:	f000 f825 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8001caa:	4602      	mov	r2, r0
 8001cac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	490c      	ldr	r1, [pc, #48]	@ (8001ce8 <HAL_RCC_ClockConfig+0x26c>)
 8001cb8:	5ccb      	ldrb	r3, [r1, r3]
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <HAL_RCC_ClockConfig+0x270>)
 8001cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <HAL_RCC_ClockConfig+0x274>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe ff4a 	bl	8000b64 <HAL_InitTick>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40022000 	.word	0x40022000
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	04c4b400 	.word	0x04c4b400
 8001ce8:	08003aec 	.word	0x08003aec
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20000004 	.word	0x20000004

08001cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d102      	bne.n	8001d0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d06:	4b2a      	ldr	r3, [pc, #168]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	e047      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d0c:	4b27      	ldr	r3, [pc, #156]	@ (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d102      	bne.n	8001d1e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d18:	4b26      	ldr	r3, [pc, #152]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	e03e      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d1e:	4b23      	ldr	r3, [pc, #140]	@ (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d136      	bne.n	8001d98 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d2a:	4b20      	ldr	r3, [pc, #128]	@ (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d34:	4b1d      	ldr	r3, [pc, #116]	@ (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3301      	adds	r3, #1
 8001d40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d10c      	bne.n	8001d62 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d48:	4a1a      	ldr	r2, [pc, #104]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d50:	4a16      	ldr	r2, [pc, #88]	@ (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d52:	68d2      	ldr	r2, [r2, #12]
 8001d54:	0a12      	lsrs	r2, r2, #8
 8001d56:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d5a:	fb02 f303 	mul.w	r3, r2, r3
 8001d5e:	617b      	str	r3, [r7, #20]
      break;
 8001d60:	e00c      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d62:	4a13      	ldr	r2, [pc, #76]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6a:	4a10      	ldr	r2, [pc, #64]	@ (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d6c:	68d2      	ldr	r2, [r2, #12]
 8001d6e:	0a12      	lsrs	r2, r2, #8
 8001d70:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d74:	fb02 f303 	mul.w	r3, r2, r3
 8001d78:	617b      	str	r3, [r7, #20]
      break;
 8001d7a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0e5b      	lsrs	r3, r3, #25
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	3301      	adds	r3, #1
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	e001      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d9c:	693b      	ldr	r3, [r7, #16]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	00f42400 	.word	0x00f42400
 8001db4:	016e3600 	.word	0x016e3600

08001db8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	@ (8001dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000000 	.word	0x20000000

08001dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dd4:	f7ff fff0 	bl	8001db8 <HAL_RCC_GetHCLKFreq>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	0a1b      	lsrs	r3, r3, #8
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	4904      	ldr	r1, [pc, #16]	@ (8001df8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001de6:	5ccb      	ldrb	r3, [r1, r3]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	08003afc 	.word	0x08003afc

08001dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e00:	f7ff ffda 	bl	8001db8 <HAL_RCC_GetHCLKFreq>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	0adb      	lsrs	r3, r3, #11
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	4904      	ldr	r1, [pc, #16]	@ (8001e24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e12:	5ccb      	ldrb	r3, [r1, r3]
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40021000 	.word	0x40021000
 8001e24:	08003afc 	.word	0x08003afc

08001e28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3301      	adds	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d10c      	bne.n	8001e66 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e4c:	4a17      	ldr	r2, [pc, #92]	@ (8001eac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e54:	4a14      	ldr	r2, [pc, #80]	@ (8001ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e56:	68d2      	ldr	r2, [r2, #12]
 8001e58:	0a12      	lsrs	r2, r2, #8
 8001e5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	617b      	str	r3, [r7, #20]
    break;
 8001e64:	e00c      	b.n	8001e80 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e66:	4a12      	ldr	r2, [pc, #72]	@ (8001eb0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e70:	68d2      	ldr	r2, [r2, #12]
 8001e72:	0a12      	lsrs	r2, r2, #8
 8001e74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
    break;
 8001e7e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0e5b      	lsrs	r3, r3, #25
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e9a:	687b      	ldr	r3, [r7, #4]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	371c      	adds	r7, #28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	016e3600 	.word	0x016e3600
 8001eb0:	00f42400 	.word	0x00f42400

08001eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 8098 	beq.w	8002002 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed6:	4b43      	ldr	r3, [pc, #268]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10d      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b40      	ldr	r3, [pc, #256]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	4a3f      	ldr	r2, [pc, #252]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eee:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efa:	2301      	movs	r3, #1
 8001efc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001efe:	4b3a      	ldr	r3, [pc, #232]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a39      	ldr	r2, [pc, #228]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f0a:	f7fe fe77 	bl	8000bfc <HAL_GetTick>
 8001f0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f10:	e009      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f12:	f7fe fe73 	bl	8000bfc <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d902      	bls.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	74fb      	strb	r3, [r7, #19]
        break;
 8001f24:	e005      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f26:	4b30      	ldr	r3, [pc, #192]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0ef      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001f32:	7cfb      	ldrb	r3, [r7, #19]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d159      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f38:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01e      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d019      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f54:	4b23      	ldr	r3, [pc, #140]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f60:	4b20      	ldr	r3, [pc, #128]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f66:	4a1f      	ldr	r2, [pc, #124]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f70:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f76:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f80:	4a18      	ldr	r2, [pc, #96]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d016      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f92:	f7fe fe33 	bl	8000bfc <HAL_GetTick>
 8001f96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f98:	e00b      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9a:	f7fe fe2f 	bl	8000bfc <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d902      	bls.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	74fb      	strb	r3, [r7, #19]
            break;
 8001fb0:	e006      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0ec      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001fc0:	7cfb      	ldrb	r3, [r7, #19]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10b      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fc6:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd4:	4903      	ldr	r1, [pc, #12]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fde:	7cfb      	ldrb	r3, [r7, #19]
 8001fe0:	74bb      	strb	r3, [r7, #18]
 8001fe2:	e005      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fec:	7cfb      	ldrb	r3, [r7, #19]
 8001fee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ff0:	7c7b      	ldrb	r3, [r7, #17]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d105      	bne.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff6:	4ba7      	ldr	r3, [pc, #668]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffa:	4aa6      	ldr	r2, [pc, #664]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002000:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800200e:	4ba1      	ldr	r3, [pc, #644]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002014:	f023 0203 	bic.w	r2, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	499d      	ldr	r1, [pc, #628]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002030:	4b98      	ldr	r3, [pc, #608]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002036:	f023 020c 	bic.w	r2, r3, #12
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	4995      	ldr	r1, [pc, #596]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002052:	4b90      	ldr	r3, [pc, #576]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002058:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	498c      	ldr	r1, [pc, #560]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002074:	4b87      	ldr	r3, [pc, #540]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800207a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	4984      	ldr	r1, [pc, #528]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002096:	4b7f      	ldr	r3, [pc, #508]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	497b      	ldr	r1, [pc, #492]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020b8:	4b76      	ldr	r3, [pc, #472]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	4973      	ldr	r1, [pc, #460]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020da:	4b6e      	ldr	r3, [pc, #440]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	496a      	ldr	r1, [pc, #424]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020fc:	4b65      	ldr	r3, [pc, #404]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002102:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4962      	ldr	r1, [pc, #392]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800211e:	4b5d      	ldr	r3, [pc, #372]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002124:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212c:	4959      	ldr	r1, [pc, #356]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00a      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002140:	4b54      	ldr	r3, [pc, #336]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002142:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002146:	f023 0203 	bic.w	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214e:	4951      	ldr	r1, [pc, #324]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002162:	4b4c      	ldr	r3, [pc, #304]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002168:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002170:	4948      	ldr	r1, [pc, #288]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002180:	2b00      	cmp	r3, #0
 8002182:	d015      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002184:	4b43      	ldr	r3, [pc, #268]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	4940      	ldr	r1, [pc, #256]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021a2:	d105      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d015      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021bc:	4b35      	ldr	r3, [pc, #212]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ca:	4932      	ldr	r1, [pc, #200]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021da:	d105      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d015      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021f4:	4b27      	ldr	r3, [pc, #156]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002202:	4924      	ldr	r1, [pc, #144]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800220e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002212:	d105      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002214:	4b1f      	ldr	r3, [pc, #124]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a1e      	ldr	r2, [pc, #120]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800221a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800221e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d015      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800222c:	4b19      	ldr	r3, [pc, #100]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002232:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800223a:	4916      	ldr	r1, [pc, #88]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002246:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800224a:	d105      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800224c:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a10      	ldr	r2, [pc, #64]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002256:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d019      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002264:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	4908      	ldr	r1, [pc, #32]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002282:	d109      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002284:	4b03      	ldr	r3, [pc, #12]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4a02      	ldr	r2, [pc, #8]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800228a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800228e:	60d3      	str	r3, [r2, #12]
 8002290:	e002      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d015      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022a4:	4b29      	ldr	r3, [pc, #164]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b2:	4926      	ldr	r1, [pc, #152]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022c2:	d105      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022c4:	4b21      	ldr	r3, [pc, #132]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a20      	ldr	r2, [pc, #128]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ce:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d015      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80022dc:	4b1b      	ldr	r3, [pc, #108]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ea:	4918      	ldr	r1, [pc, #96]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022fa:	d105      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022fc:	4b13      	ldr	r3, [pc, #76]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a12      	ldr	r2, [pc, #72]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002306:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d015      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002314:	4b0d      	ldr	r3, [pc, #52]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002316:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800231a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002322:	490a      	ldr	r1, [pc, #40]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002332:	d105      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002334:	4b05      	ldr	r3, [pc, #20]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a04      	ldr	r2, [pc, #16]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800233a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800233e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002340:	7cbb      	ldrb	r3, [r7, #18]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000

08002350 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e09d      	b.n	800249e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	2b00      	cmp	r3, #0
 8002368:	d108      	bne.n	800237c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002372:	d009      	beq.n	8002388 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	61da      	str	r2, [r3, #28]
 800237a:	e005      	b.n	8002388 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fafc 	bl	80009a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023c8:	d902      	bls.n	80023d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	e002      	b.n	80023d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80023de:	d007      	beq.n	80023f0 <HAL_SPI_Init+0xa0>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023e8:	d002      	beq.n	80023f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002432:	ea42 0103 	orr.w	r1, r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	0c1b      	lsrs	r3, r3, #16
 800244c:	f003 0204 	and.w	r2, r3, #4
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800246c:	ea42 0103 	orr.w	r1, r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69da      	ldr	r2, [r3, #28]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800248c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80024c0:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024c8:	7dbb      	ldrb	r3, [r7, #22]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d00d      	beq.n	80024ea <HAL_SPI_TransmitReceive_IT+0x42>
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024d4:	d106      	bne.n	80024e4 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d102      	bne.n	80024e4 <HAL_SPI_TransmitReceive_IT+0x3c>
 80024de:	7dbb      	ldrb	r3, [r7, #22]
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d002      	beq.n	80024ea <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80024e4:	2302      	movs	r3, #2
 80024e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024e8:	e07d      	b.n	80025e6 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_SPI_TransmitReceive_IT+0x54>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_SPI_TransmitReceive_IT+0x54>
 80024f6:	887b      	ldrh	r3, [r7, #2]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002500:	e071      	b.n	80025e6 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_SPI_TransmitReceive_IT+0x68>
 800250c:	2302      	movs	r3, #2
 800250e:	e06b      	b.n	80025e8 <HAL_SPI_TransmitReceive_IT+0x140>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b04      	cmp	r3, #4
 8002522:	d003      	beq.n	800252c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2205      	movs	r2, #5
 8002528:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	887a      	ldrh	r2, [r7, #2]
 8002542:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	887a      	ldrh	r2, [r7, #2]
 800254e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	887a      	ldrh	r2, [r7, #2]
 8002556:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002562:	d906      	bls.n	8002572 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4a23      	ldr	r2, [pc, #140]	@ (80025f4 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002568:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4a22      	ldr	r2, [pc, #136]	@ (80025f8 <HAL_SPI_TransmitReceive_IT+0x150>)
 800256e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002570:	e005      	b.n	800257e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4a21      	ldr	r2, [pc, #132]	@ (80025fc <HAL_SPI_TransmitReceive_IT+0x154>)
 8002576:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4a21      	ldr	r2, [pc, #132]	@ (8002600 <HAL_SPI_TransmitReceive_IT+0x158>)
 800257c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002586:	d802      	bhi.n	800258e <HAL_SPI_TransmitReceive_IT+0xe6>
 8002588:	887b      	ldrh	r3, [r7, #2]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d908      	bls.n	80025a0 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	e007      	b.n	80025b0 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80025ae:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ba:	2b40      	cmp	r3, #64	@ 0x40
 80025bc:	d007      	beq.n	80025ce <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80025e4:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80025e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	371c      	adds	r7, #28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	0800298f 	.word	0x0800298f
 80025f8:	080029f5 	.word	0x080029f5
 80025fc:	0800283f 	.word	0x0800283f
 8002600:	080028fd 	.word	0x080028fd

08002604 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10e      	bne.n	8002644 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800262c:	2b00      	cmp	r3, #0
 800262e:	d009      	beq.n	8002644 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	4798      	blx	r3
    return;
 8002642:	e0ce      	b.n	80027e2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d009      	beq.n	8002662 <HAL_SPI_IRQHandler+0x5e>
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002654:	2b00      	cmp	r3, #0
 8002656:	d004      	beq.n	8002662 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4798      	blx	r3
    return;
 8002660:	e0bf      	b.n	80027e2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <HAL_SPI_IRQHandler+0x7e>
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d105      	bne.n	8002682 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80b0 	beq.w	80027e2 <HAL_SPI_IRQHandler+0x1de>
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80aa 	beq.w	80027e2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002694:	2b00      	cmp	r3, #0
 8002696:	d023      	beq.n	80026e0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d011      	beq.n	80026c8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a8:	f043 0204 	orr.w	r2, r3, #4
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	e00b      	b.n	80026e0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]
        return;
 80026de:	e080      	b.n	80027e2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d014      	beq.n	8002714 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00c      	beq.n	8002738 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002722:	f043 0208 	orr.w	r2, r3, #8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800273c:	2b00      	cmp	r3, #0
 800273e:	d04f      	beq.n	80027e0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800274e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d104      	bne.n	800276c <HAL_SPI_IRQHandler+0x168>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d034      	beq.n	80027d6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0203 	bic.w	r2, r2, #3
 800277a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002780:	2b00      	cmp	r3, #0
 8002782:	d011      	beq.n	80027a8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002788:	4a17      	ldr	r2, [pc, #92]	@ (80027e8 <HAL_SPI_IRQHandler+0x1e4>)
 800278a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe fb70 	bl	8000e76 <HAL_DMA_Abort_IT>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d016      	beq.n	80027de <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b4:	4a0c      	ldr	r2, [pc, #48]	@ (80027e8 <HAL_SPI_IRQHandler+0x1e4>)
 80027b6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fb5a 	bl	8000e76 <HAL_DMA_Abort_IT>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80027d4:	e003      	b.n	80027de <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f812 	bl	8002800 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80027dc:	e000      	b.n	80027e0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80027de:	bf00      	nop
    return;
 80027e0:	bf00      	nop
  }
}
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	08002815 	.word	0x08002815

080027ec <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002820:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f7ff ffe5 	bl	8002800 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d923      	bls.n	800289a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285c:	b292      	uxth	r2, r2
 800285e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	1c9a      	adds	r2, r3, #2
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b02      	subs	r3, #2
 8002874:	b29a      	uxth	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d11f      	bne.n	80028c8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	e016      	b.n	80028c8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f103 020c 	add.w	r2, r3, #12
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	7812      	ldrb	r2, [r2, #0]
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10f      	bne.n	80028f4 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80028e2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d102      	bne.n	80028f4 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fa14 	bl	8002d1c <SPI_CloseRxTx_ISR>
    }
  }
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d912      	bls.n	8002934 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002912:	881a      	ldrh	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291e:	1c9a      	adds	r2, r3, #2
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b02      	subs	r3, #2
 800292c:	b29a      	uxth	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002932:	e012      	b.n	800295a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	330c      	adds	r3, #12
 800293e:	7812      	ldrb	r2, [r2, #0]
 8002940:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d110      	bne.n	8002986 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002972:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d102      	bne.n	8002986 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f9cb 	bl	8002d1c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	b292      	uxth	r2, r2
 80029a2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	1c9a      	adds	r2, r3, #2
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10f      	bne.n	80029ec <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029da:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d102      	bne.n	80029ec <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f998 	bl	8002d1c <SPI_CloseRxTx_ISR>
    }
  }
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a00:	881a      	ldrh	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0c:	1c9a      	adds	r2, r3, #2
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d110      	bne.n	8002a4c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a38:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f968 	bl	8002d1c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a64:	f7fe f8ca 	bl	8000bfc <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	4413      	add	r3, r2
 8002a72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a74:	f7fe f8c2 	bl	8000bfc <HAL_GetTick>
 8002a78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a7a:	4b39      	ldr	r3, [pc, #228]	@ (8002b60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	015b      	lsls	r3, r3, #5
 8002a80:	0d1b      	lsrs	r3, r3, #20
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	fb02 f303 	mul.w	r3, r2, r3
 8002a88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a8a:	e054      	b.n	8002b36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a92:	d050      	beq.n	8002b36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a94:	f7fe f8b2 	bl	8000bfc <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d902      	bls.n	8002aaa <SPI_WaitFlagStateUntilTimeout+0x56>
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d13d      	bne.n	8002b26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ab8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ac2:	d111      	bne.n	8002ae8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002acc:	d004      	beq.n	8002ad8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ad6:	d107      	bne.n	8002ae8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ae6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002af0:	d10f      	bne.n	8002b12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e017      	b.n	8002b56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	bf0c      	ite	eq
 8002b46:	2301      	moveq	r3, #1
 8002b48:	2300      	movne	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d19b      	bne.n	8002a8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000000 	.word	0x20000000

08002b64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	@ 0x28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002b76:	f7fe f841 	bl	8000bfc <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	4413      	add	r3, r2
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002b86:	f7fe f839 	bl	8000bfc <HAL_GetTick>
 8002b8a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	330c      	adds	r3, #12
 8002b92:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002b94:	4b3d      	ldr	r3, [pc, #244]	@ (8002c8c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00da      	lsls	r2, r3, #3
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	0d1b      	lsrs	r3, r3, #20
 8002ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002bac:	e060      	b.n	8002c70 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002bb4:	d107      	bne.n	8002bc6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d104      	bne.n	8002bc6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d050      	beq.n	8002c70 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bce:	f7fe f815 	bl	8000bfc <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d902      	bls.n	8002be4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d13d      	bne.n	8002c60 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002bf2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bfc:	d111      	bne.n	8002c22 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c06:	d004      	beq.n	8002c12 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c10:	d107      	bne.n	8002c22 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c2a:	d10f      	bne.n	8002c4c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e010      	b.n	8002c82 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d196      	bne.n	8002bae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3728      	adds	r7, #40	@ 0x28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000000 	.word	0x20000000

08002c90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7ff ff5b 	bl	8002b64 <SPI_WaitFifoStateUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d007      	beq.n	8002cc4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb8:	f043 0220 	orr.w	r2, r3, #32
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e027      	b.n	8002d14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2180      	movs	r1, #128	@ 0x80
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f7ff fec0 	bl	8002a54 <SPI_WaitFlagStateUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cde:	f043 0220 	orr.w	r2, r3, #32
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e014      	b.n	8002d14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7ff ff34 	bl	8002b64 <SPI_WaitFifoStateUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d007      	beq.n	8002d12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d06:	f043 0220 	orr.w	r2, r3, #32
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e000      	b.n	8002d14 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d24:	f7fd ff6a 	bl	8000bfc <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0220 	bic.w	r2, r2, #32
 8002d38:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	2164      	movs	r1, #100	@ 0x64
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff ffa6 	bl	8002c90 <SPI_EndRxTxTransaction>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4e:	f043 0220 	orr.w	r2, r3, #32
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d115      	bne.n	8002d8a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d107      	bne.n	8002d7a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff fd3a 	bl	80027ec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002d78:	e00e      	b.n	8002d98 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fd fd7a 	bl	800087c <HAL_SPI_TxRxCpltCallback>
}
 8002d88:	e006      	b.n	8002d98 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff fd34 	bl	8002800 <HAL_SPI_ErrorCallback>
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e042      	b.n	8002e38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d106      	bne.n	8002dca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7fd fd93 	bl	80008f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2224      	movs	r2, #36	@ 0x24
 8002dce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fb24 	bl	8003438 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f825 	bl	8002e40 <UART_SetConfig>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e01b      	b.n	8002e38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fba3 	bl	800357c <UART_CheckIdleState>
 8002e36:	4603      	mov	r3, r0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e44:	b08c      	sub	sp, #48	@ 0x30
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4baa      	ldr	r3, [pc, #680]	@ (8003118 <UART_SetConfig+0x2d8>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a9f      	ldr	r2, [pc, #636]	@ (800311c <UART_SetConfig+0x2dc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d004      	beq.n	8002eac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002eb6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eca:	f023 010f 	bic.w	r1, r3, #15
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a90      	ldr	r2, [pc, #576]	@ (8003120 <UART_SetConfig+0x2e0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d125      	bne.n	8002f30 <UART_SetConfig+0xf0>
 8002ee4:	4b8f      	ldr	r3, [pc, #572]	@ (8003124 <UART_SetConfig+0x2e4>)
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d81a      	bhi.n	8002f28 <UART_SetConfig+0xe8>
 8002ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef8 <UART_SetConfig+0xb8>)
 8002ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef8:	08002f09 	.word	0x08002f09
 8002efc:	08002f19 	.word	0x08002f19
 8002f00:	08002f11 	.word	0x08002f11
 8002f04:	08002f21 	.word	0x08002f21
 8002f08:	2301      	movs	r3, #1
 8002f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f0e:	e116      	b.n	800313e <UART_SetConfig+0x2fe>
 8002f10:	2302      	movs	r3, #2
 8002f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f16:	e112      	b.n	800313e <UART_SetConfig+0x2fe>
 8002f18:	2304      	movs	r3, #4
 8002f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f1e:	e10e      	b.n	800313e <UART_SetConfig+0x2fe>
 8002f20:	2308      	movs	r3, #8
 8002f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f26:	e10a      	b.n	800313e <UART_SetConfig+0x2fe>
 8002f28:	2310      	movs	r3, #16
 8002f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f2e:	e106      	b.n	800313e <UART_SetConfig+0x2fe>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a7c      	ldr	r2, [pc, #496]	@ (8003128 <UART_SetConfig+0x2e8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d138      	bne.n	8002fac <UART_SetConfig+0x16c>
 8002f3a:	4b7a      	ldr	r3, [pc, #488]	@ (8003124 <UART_SetConfig+0x2e4>)
 8002f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b0c      	cmp	r3, #12
 8002f46:	d82d      	bhi.n	8002fa4 <UART_SetConfig+0x164>
 8002f48:	a201      	add	r2, pc, #4	@ (adr r2, 8002f50 <UART_SetConfig+0x110>)
 8002f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4e:	bf00      	nop
 8002f50:	08002f85 	.word	0x08002f85
 8002f54:	08002fa5 	.word	0x08002fa5
 8002f58:	08002fa5 	.word	0x08002fa5
 8002f5c:	08002fa5 	.word	0x08002fa5
 8002f60:	08002f95 	.word	0x08002f95
 8002f64:	08002fa5 	.word	0x08002fa5
 8002f68:	08002fa5 	.word	0x08002fa5
 8002f6c:	08002fa5 	.word	0x08002fa5
 8002f70:	08002f8d 	.word	0x08002f8d
 8002f74:	08002fa5 	.word	0x08002fa5
 8002f78:	08002fa5 	.word	0x08002fa5
 8002f7c:	08002fa5 	.word	0x08002fa5
 8002f80:	08002f9d 	.word	0x08002f9d
 8002f84:	2300      	movs	r3, #0
 8002f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f8a:	e0d8      	b.n	800313e <UART_SetConfig+0x2fe>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f92:	e0d4      	b.n	800313e <UART_SetConfig+0x2fe>
 8002f94:	2304      	movs	r3, #4
 8002f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f9a:	e0d0      	b.n	800313e <UART_SetConfig+0x2fe>
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fa2:	e0cc      	b.n	800313e <UART_SetConfig+0x2fe>
 8002fa4:	2310      	movs	r3, #16
 8002fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002faa:	e0c8      	b.n	800313e <UART_SetConfig+0x2fe>
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a5e      	ldr	r2, [pc, #376]	@ (800312c <UART_SetConfig+0x2ec>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d125      	bne.n	8003002 <UART_SetConfig+0x1c2>
 8002fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8003124 <UART_SetConfig+0x2e4>)
 8002fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fbc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002fc0:	2b30      	cmp	r3, #48	@ 0x30
 8002fc2:	d016      	beq.n	8002ff2 <UART_SetConfig+0x1b2>
 8002fc4:	2b30      	cmp	r3, #48	@ 0x30
 8002fc6:	d818      	bhi.n	8002ffa <UART_SetConfig+0x1ba>
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d00a      	beq.n	8002fe2 <UART_SetConfig+0x1a2>
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d814      	bhi.n	8002ffa <UART_SetConfig+0x1ba>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <UART_SetConfig+0x19a>
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d008      	beq.n	8002fea <UART_SetConfig+0x1aa>
 8002fd8:	e00f      	b.n	8002ffa <UART_SetConfig+0x1ba>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fe0:	e0ad      	b.n	800313e <UART_SetConfig+0x2fe>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fe8:	e0a9      	b.n	800313e <UART_SetConfig+0x2fe>
 8002fea:	2304      	movs	r3, #4
 8002fec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ff0:	e0a5      	b.n	800313e <UART_SetConfig+0x2fe>
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ff8:	e0a1      	b.n	800313e <UART_SetConfig+0x2fe>
 8002ffa:	2310      	movs	r3, #16
 8002ffc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003000:	e09d      	b.n	800313e <UART_SetConfig+0x2fe>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a4a      	ldr	r2, [pc, #296]	@ (8003130 <UART_SetConfig+0x2f0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d125      	bne.n	8003058 <UART_SetConfig+0x218>
 800300c:	4b45      	ldr	r3, [pc, #276]	@ (8003124 <UART_SetConfig+0x2e4>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003012:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003016:	2bc0      	cmp	r3, #192	@ 0xc0
 8003018:	d016      	beq.n	8003048 <UART_SetConfig+0x208>
 800301a:	2bc0      	cmp	r3, #192	@ 0xc0
 800301c:	d818      	bhi.n	8003050 <UART_SetConfig+0x210>
 800301e:	2b80      	cmp	r3, #128	@ 0x80
 8003020:	d00a      	beq.n	8003038 <UART_SetConfig+0x1f8>
 8003022:	2b80      	cmp	r3, #128	@ 0x80
 8003024:	d814      	bhi.n	8003050 <UART_SetConfig+0x210>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <UART_SetConfig+0x1f0>
 800302a:	2b40      	cmp	r3, #64	@ 0x40
 800302c:	d008      	beq.n	8003040 <UART_SetConfig+0x200>
 800302e:	e00f      	b.n	8003050 <UART_SetConfig+0x210>
 8003030:	2300      	movs	r3, #0
 8003032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003036:	e082      	b.n	800313e <UART_SetConfig+0x2fe>
 8003038:	2302      	movs	r3, #2
 800303a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800303e:	e07e      	b.n	800313e <UART_SetConfig+0x2fe>
 8003040:	2304      	movs	r3, #4
 8003042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003046:	e07a      	b.n	800313e <UART_SetConfig+0x2fe>
 8003048:	2308      	movs	r3, #8
 800304a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800304e:	e076      	b.n	800313e <UART_SetConfig+0x2fe>
 8003050:	2310      	movs	r3, #16
 8003052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003056:	e072      	b.n	800313e <UART_SetConfig+0x2fe>
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a35      	ldr	r2, [pc, #212]	@ (8003134 <UART_SetConfig+0x2f4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d12a      	bne.n	80030b8 <UART_SetConfig+0x278>
 8003062:	4b30      	ldr	r3, [pc, #192]	@ (8003124 <UART_SetConfig+0x2e4>)
 8003064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003068:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800306c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003070:	d01a      	beq.n	80030a8 <UART_SetConfig+0x268>
 8003072:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003076:	d81b      	bhi.n	80030b0 <UART_SetConfig+0x270>
 8003078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800307c:	d00c      	beq.n	8003098 <UART_SetConfig+0x258>
 800307e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003082:	d815      	bhi.n	80030b0 <UART_SetConfig+0x270>
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <UART_SetConfig+0x250>
 8003088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800308c:	d008      	beq.n	80030a0 <UART_SetConfig+0x260>
 800308e:	e00f      	b.n	80030b0 <UART_SetConfig+0x270>
 8003090:	2300      	movs	r3, #0
 8003092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003096:	e052      	b.n	800313e <UART_SetConfig+0x2fe>
 8003098:	2302      	movs	r3, #2
 800309a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800309e:	e04e      	b.n	800313e <UART_SetConfig+0x2fe>
 80030a0:	2304      	movs	r3, #4
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030a6:	e04a      	b.n	800313e <UART_SetConfig+0x2fe>
 80030a8:	2308      	movs	r3, #8
 80030aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ae:	e046      	b.n	800313e <UART_SetConfig+0x2fe>
 80030b0:	2310      	movs	r3, #16
 80030b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030b6:	e042      	b.n	800313e <UART_SetConfig+0x2fe>
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a17      	ldr	r2, [pc, #92]	@ (800311c <UART_SetConfig+0x2dc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d13a      	bne.n	8003138 <UART_SetConfig+0x2f8>
 80030c2:	4b18      	ldr	r3, [pc, #96]	@ (8003124 <UART_SetConfig+0x2e4>)
 80030c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030d0:	d01a      	beq.n	8003108 <UART_SetConfig+0x2c8>
 80030d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030d6:	d81b      	bhi.n	8003110 <UART_SetConfig+0x2d0>
 80030d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030dc:	d00c      	beq.n	80030f8 <UART_SetConfig+0x2b8>
 80030de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030e2:	d815      	bhi.n	8003110 <UART_SetConfig+0x2d0>
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <UART_SetConfig+0x2b0>
 80030e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ec:	d008      	beq.n	8003100 <UART_SetConfig+0x2c0>
 80030ee:	e00f      	b.n	8003110 <UART_SetConfig+0x2d0>
 80030f0:	2300      	movs	r3, #0
 80030f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030f6:	e022      	b.n	800313e <UART_SetConfig+0x2fe>
 80030f8:	2302      	movs	r3, #2
 80030fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030fe:	e01e      	b.n	800313e <UART_SetConfig+0x2fe>
 8003100:	2304      	movs	r3, #4
 8003102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003106:	e01a      	b.n	800313e <UART_SetConfig+0x2fe>
 8003108:	2308      	movs	r3, #8
 800310a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800310e:	e016      	b.n	800313e <UART_SetConfig+0x2fe>
 8003110:	2310      	movs	r3, #16
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003116:	e012      	b.n	800313e <UART_SetConfig+0x2fe>
 8003118:	cfff69f3 	.word	0xcfff69f3
 800311c:	40008000 	.word	0x40008000
 8003120:	40013800 	.word	0x40013800
 8003124:	40021000 	.word	0x40021000
 8003128:	40004400 	.word	0x40004400
 800312c:	40004800 	.word	0x40004800
 8003130:	40004c00 	.word	0x40004c00
 8003134:	40005000 	.word	0x40005000
 8003138:	2310      	movs	r3, #16
 800313a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4aae      	ldr	r2, [pc, #696]	@ (80033fc <UART_SetConfig+0x5bc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	f040 8097 	bne.w	8003278 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800314a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800314e:	2b08      	cmp	r3, #8
 8003150:	d823      	bhi.n	800319a <UART_SetConfig+0x35a>
 8003152:	a201      	add	r2, pc, #4	@ (adr r2, 8003158 <UART_SetConfig+0x318>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	0800317d 	.word	0x0800317d
 800315c:	0800319b 	.word	0x0800319b
 8003160:	08003185 	.word	0x08003185
 8003164:	0800319b 	.word	0x0800319b
 8003168:	0800318b 	.word	0x0800318b
 800316c:	0800319b 	.word	0x0800319b
 8003170:	0800319b 	.word	0x0800319b
 8003174:	0800319b 	.word	0x0800319b
 8003178:	08003193 	.word	0x08003193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800317c:	f7fe fe28 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 8003180:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003182:	e010      	b.n	80031a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003184:	4b9e      	ldr	r3, [pc, #632]	@ (8003400 <UART_SetConfig+0x5c0>)
 8003186:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003188:	e00d      	b.n	80031a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800318a:	f7fe fdb3 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 800318e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003190:	e009      	b.n	80031a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003196:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003198:	e005      	b.n	80031a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80031a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8130 	beq.w	800340e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b2:	4a94      	ldr	r2, [pc, #592]	@ (8003404 <UART_SetConfig+0x5c4>)
 80031b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031b8:	461a      	mov	r2, r3
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	4413      	add	r3, r2
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d305      	bcc.n	80031de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d903      	bls.n	80031e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80031e4:	e113      	b.n	800340e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e8:	2200      	movs	r2, #0
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	60fa      	str	r2, [r7, #12]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	4a84      	ldr	r2, [pc, #528]	@ (8003404 <UART_SetConfig+0x5c4>)
 80031f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2200      	movs	r2, #0
 80031fc:	603b      	str	r3, [r7, #0]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003204:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003208:	f7fd f806 	bl	8000218 <__aeabi_uldivmod>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	020b      	lsls	r3, r1, #8
 800321e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003222:	0202      	lsls	r2, r0, #8
 8003224:	6979      	ldr	r1, [r7, #20]
 8003226:	6849      	ldr	r1, [r1, #4]
 8003228:	0849      	lsrs	r1, r1, #1
 800322a:	2000      	movs	r0, #0
 800322c:	460c      	mov	r4, r1
 800322e:	4605      	mov	r5, r0
 8003230:	eb12 0804 	adds.w	r8, r2, r4
 8003234:	eb43 0905 	adc.w	r9, r3, r5
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	469a      	mov	sl, r3
 8003240:	4693      	mov	fp, r2
 8003242:	4652      	mov	r2, sl
 8003244:	465b      	mov	r3, fp
 8003246:	4640      	mov	r0, r8
 8003248:	4649      	mov	r1, r9
 800324a:	f7fc ffe5 	bl	8000218 <__aeabi_uldivmod>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4613      	mov	r3, r2
 8003254:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800325c:	d308      	bcc.n	8003270 <UART_SetConfig+0x430>
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003264:	d204      	bcs.n	8003270 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6a3a      	ldr	r2, [r7, #32]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	e0ce      	b.n	800340e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003276:	e0ca      	b.n	800340e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003280:	d166      	bne.n	8003350 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003282:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003286:	2b08      	cmp	r3, #8
 8003288:	d827      	bhi.n	80032da <UART_SetConfig+0x49a>
 800328a:	a201      	add	r2, pc, #4	@ (adr r2, 8003290 <UART_SetConfig+0x450>)
 800328c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003290:	080032b5 	.word	0x080032b5
 8003294:	080032bd 	.word	0x080032bd
 8003298:	080032c5 	.word	0x080032c5
 800329c:	080032db 	.word	0x080032db
 80032a0:	080032cb 	.word	0x080032cb
 80032a4:	080032db 	.word	0x080032db
 80032a8:	080032db 	.word	0x080032db
 80032ac:	080032db 	.word	0x080032db
 80032b0:	080032d3 	.word	0x080032d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b4:	f7fe fd8c 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 80032b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032ba:	e014      	b.n	80032e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032bc:	f7fe fd9e 	bl	8001dfc <HAL_RCC_GetPCLK2Freq>
 80032c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032c2:	e010      	b.n	80032e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c4:	4b4e      	ldr	r3, [pc, #312]	@ (8003400 <UART_SetConfig+0x5c0>)
 80032c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032c8:	e00d      	b.n	80032e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ca:	f7fe fd13 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 80032ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032d0:	e009      	b.n	80032e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032d8:	e005      	b.n	80032e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80032e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8090 	beq.w	800340e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	4a44      	ldr	r2, [pc, #272]	@ (8003404 <UART_SetConfig+0x5c4>)
 80032f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032f8:	461a      	mov	r2, r3
 80032fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003300:	005a      	lsls	r2, r3, #1
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	085b      	lsrs	r3, r3, #1
 8003308:	441a      	add	r2, r3
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	2b0f      	cmp	r3, #15
 8003318:	d916      	bls.n	8003348 <UART_SetConfig+0x508>
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003320:	d212      	bcs.n	8003348 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	b29b      	uxth	r3, r3
 8003326:	f023 030f 	bic.w	r3, r3, #15
 800332a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	b29b      	uxth	r3, r3
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	b29a      	uxth	r2, r3
 8003338:	8bfb      	ldrh	r3, [r7, #30]
 800333a:	4313      	orrs	r3, r2
 800333c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	8bfa      	ldrh	r2, [r7, #30]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	e062      	b.n	800340e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800334e:	e05e      	b.n	800340e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003350:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003354:	2b08      	cmp	r3, #8
 8003356:	d828      	bhi.n	80033aa <UART_SetConfig+0x56a>
 8003358:	a201      	add	r2, pc, #4	@ (adr r2, 8003360 <UART_SetConfig+0x520>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003385 	.word	0x08003385
 8003364:	0800338d 	.word	0x0800338d
 8003368:	08003395 	.word	0x08003395
 800336c:	080033ab 	.word	0x080033ab
 8003370:	0800339b 	.word	0x0800339b
 8003374:	080033ab 	.word	0x080033ab
 8003378:	080033ab 	.word	0x080033ab
 800337c:	080033ab 	.word	0x080033ab
 8003380:	080033a3 	.word	0x080033a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003384:	f7fe fd24 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 8003388:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800338a:	e014      	b.n	80033b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800338c:	f7fe fd36 	bl	8001dfc <HAL_RCC_GetPCLK2Freq>
 8003390:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003392:	e010      	b.n	80033b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003394:	4b1a      	ldr	r3, [pc, #104]	@ (8003400 <UART_SetConfig+0x5c0>)
 8003396:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003398:	e00d      	b.n	80033b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800339a:	f7fe fcab 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 800339e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033a0:	e009      	b.n	80033b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033a8:	e005      	b.n	80033b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80033b4:	bf00      	nop
    }

    if (pclk != 0U)
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d028      	beq.n	800340e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	4a10      	ldr	r2, [pc, #64]	@ (8003404 <UART_SetConfig+0x5c4>)
 80033c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033c6:	461a      	mov	r2, r3
 80033c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	085b      	lsrs	r3, r3, #1
 80033d4:	441a      	add	r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	fbb2 f3f3 	udiv	r3, r2, r3
 80033de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	2b0f      	cmp	r3, #15
 80033e4:	d910      	bls.n	8003408 <UART_SetConfig+0x5c8>
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ec:	d20c      	bcs.n	8003408 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60da      	str	r2, [r3, #12]
 80033f8:	e009      	b.n	800340e <UART_SetConfig+0x5ce>
 80033fa:	bf00      	nop
 80033fc:	40008000 	.word	0x40008000
 8003400:	00f42400 	.word	0x00f42400
 8003404:	08003b04 	.word	0x08003b04
      }
      else
      {
        ret = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2201      	movs	r2, #1
 8003412:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2201      	movs	r2, #1
 800341a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2200      	movs	r2, #0
 8003422:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2200      	movs	r2, #0
 8003428:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800342a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800342e:	4618      	mov	r0, r3
 8003430:	3730      	adds	r7, #48	@ 0x30
 8003432:	46bd      	mov	sp, r7
 8003434:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01a      	beq.n	800354e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003536:	d10a      	bne.n	800354e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	605a      	str	r2, [r3, #4]
  }
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b098      	sub	sp, #96	@ 0x60
 8003580:	af02      	add	r7, sp, #8
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800358c:	f7fd fb36 	bl	8000bfc <HAL_GetTick>
 8003590:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b08      	cmp	r3, #8
 800359e:	d12f      	bne.n	8003600 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a8:	2200      	movs	r2, #0
 80035aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f88e 	bl	80036d0 <UART_WaitOnFlagUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d022      	beq.n	8003600 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c2:	e853 3f00 	ldrex	r3, [r3]
 80035c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035e0:	e841 2300 	strex	r3, r2, [r1]
 80035e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e6      	bne.n	80035ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e063      	b.n	80036c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b04      	cmp	r3, #4
 800360c:	d149      	bne.n	80036a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800360e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003616:	2200      	movs	r2, #0
 8003618:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f857 	bl	80036d0 <UART_WaitOnFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d03c      	beq.n	80036a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	e853 3f00 	ldrex	r3, [r3]
 8003634:	623b      	str	r3, [r7, #32]
   return(result);
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800363c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003646:	633b      	str	r3, [r7, #48]	@ 0x30
 8003648:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800364c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800364e:	e841 2300 	strex	r3, r2, [r1]
 8003652:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1e6      	bne.n	8003628 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3308      	adds	r3, #8
 8003660:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	e853 3f00 	ldrex	r3, [r3]
 8003668:	60fb      	str	r3, [r7, #12]
   return(result);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3308      	adds	r3, #8
 8003678:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800367a:	61fa      	str	r2, [r7, #28]
 800367c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367e:	69b9      	ldr	r1, [r7, #24]
 8003680:	69fa      	ldr	r2, [r7, #28]
 8003682:	e841 2300 	strex	r3, r2, [r1]
 8003686:	617b      	str	r3, [r7, #20]
   return(result);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1e5      	bne.n	800365a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2220      	movs	r2, #32
 8003692:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e012      	b.n	80036c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3758      	adds	r7, #88	@ 0x58
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	4613      	mov	r3, r2
 80036de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e0:	e04f      	b.n	8003782 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d04b      	beq.n	8003782 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ea:	f7fd fa87 	bl	8000bfc <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d302      	bcc.n	8003700 <UART_WaitOnFlagUntilTimeout+0x30>
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e04e      	b.n	80037a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	d037      	beq.n	8003782 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b80      	cmp	r3, #128	@ 0x80
 8003716:	d034      	beq.n	8003782 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b40      	cmp	r3, #64	@ 0x40
 800371c:	d031      	beq.n	8003782 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b08      	cmp	r3, #8
 800372a:	d110      	bne.n	800374e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2208      	movs	r2, #8
 8003732:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 f838 	bl	80037aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2208      	movs	r2, #8
 800373e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e029      	b.n	80037a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003758:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800375c:	d111      	bne.n	8003782 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003766:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f81e 	bl	80037aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2220      	movs	r2, #32
 8003772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e00f      	b.n	80037a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69da      	ldr	r2, [r3, #28]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4013      	ands	r3, r2
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	429a      	cmp	r2, r3
 8003790:	bf0c      	ite	eq
 8003792:	2301      	moveq	r3, #1
 8003794:	2300      	movne	r3, #0
 8003796:	b2db      	uxtb	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	429a      	cmp	r2, r3
 800379e:	d0a0      	beq.n	80036e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b095      	sub	sp, #84	@ 0x54
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ba:	e853 3f00 	ldrex	r3, [r3]
 80037be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80037d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037d8:	e841 2300 	strex	r3, r2, [r1]
 80037dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e6      	bne.n	80037b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3308      	adds	r3, #8
 80037ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	e853 3f00 	ldrex	r3, [r3]
 80037f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3308      	adds	r3, #8
 8003806:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003808:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800380a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800380e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003810:	e841 2300 	strex	r3, r2, [r1]
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e3      	bne.n	80037e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003820:	2b01      	cmp	r3, #1
 8003822:	d118      	bne.n	8003856 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	60bb      	str	r3, [r7, #8]
   return(result);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f023 0310 	bic.w	r3, r3, #16
 8003838:	647b      	str	r3, [r7, #68]	@ 0x44
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003842:	61bb      	str	r3, [r7, #24]
 8003844:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	6979      	ldr	r1, [r7, #20]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	613b      	str	r3, [r7, #16]
   return(result);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e6      	bne.n	8003824 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800386a:	bf00      	nop
 800386c:	3754      	adds	r7, #84	@ 0x54
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003876:	b480      	push	{r7}
 8003878:	b085      	sub	sp, #20
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_UARTEx_DisableFifoMode+0x16>
 8003888:	2302      	movs	r3, #2
 800388a:	e027      	b.n	80038dc <HAL_UARTEx_DisableFifoMode+0x66>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2224      	movs	r2, #36	@ 0x24
 8003898:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0201 	bic.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80038ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e02d      	b.n	800395c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2224      	movs	r2, #36	@ 0x24
 800390c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0201 	bic.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f84f 	bl	80039e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003978:	2302      	movs	r3, #2
 800397a:	e02d      	b.n	80039d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2224      	movs	r2, #36	@ 0x24
 8003988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f811 	bl	80039e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d108      	bne.n	8003a02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003a00:	e031      	b.n	8003a66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003a02:	2308      	movs	r3, #8
 8003a04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a06:	2308      	movs	r3, #8
 8003a08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	0e5b      	lsrs	r3, r3, #25
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	0f5b      	lsrs	r3, r3, #29
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a2a:	7bbb      	ldrb	r3, [r7, #14]
 8003a2c:	7b3a      	ldrb	r2, [r7, #12]
 8003a2e:	4911      	ldr	r1, [pc, #68]	@ (8003a74 <UARTEx_SetNbDataToProcess+0x94>)
 8003a30:	5c8a      	ldrb	r2, [r1, r2]
 8003a32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003a36:	7b3a      	ldrb	r2, [r7, #12]
 8003a38:	490f      	ldr	r1, [pc, #60]	@ (8003a78 <UARTEx_SetNbDataToProcess+0x98>)
 8003a3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	7b7a      	ldrb	r2, [r7, #13]
 8003a4c:	4909      	ldr	r1, [pc, #36]	@ (8003a74 <UARTEx_SetNbDataToProcess+0x94>)
 8003a4e:	5c8a      	ldrb	r2, [r1, r2]
 8003a50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003a54:	7b7a      	ldrb	r2, [r7, #13]
 8003a56:	4908      	ldr	r1, [pc, #32]	@ (8003a78 <UARTEx_SetNbDataToProcess+0x98>)
 8003a58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	08003b1c 	.word	0x08003b1c
 8003a78:	08003b24 	.word	0x08003b24

08003a7c <memset>:
 8003a7c:	4402      	add	r2, r0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d100      	bne.n	8003a86 <memset+0xa>
 8003a84:	4770      	bx	lr
 8003a86:	f803 1b01 	strb.w	r1, [r3], #1
 8003a8a:	e7f9      	b.n	8003a80 <memset+0x4>

08003a8c <__libc_init_array>:
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	4d0d      	ldr	r5, [pc, #52]	@ (8003ac4 <__libc_init_array+0x38>)
 8003a90:	4c0d      	ldr	r4, [pc, #52]	@ (8003ac8 <__libc_init_array+0x3c>)
 8003a92:	1b64      	subs	r4, r4, r5
 8003a94:	10a4      	asrs	r4, r4, #2
 8003a96:	2600      	movs	r6, #0
 8003a98:	42a6      	cmp	r6, r4
 8003a9a:	d109      	bne.n	8003ab0 <__libc_init_array+0x24>
 8003a9c:	4d0b      	ldr	r5, [pc, #44]	@ (8003acc <__libc_init_array+0x40>)
 8003a9e:	4c0c      	ldr	r4, [pc, #48]	@ (8003ad0 <__libc_init_array+0x44>)
 8003aa0:	f000 f818 	bl	8003ad4 <_init>
 8003aa4:	1b64      	subs	r4, r4, r5
 8003aa6:	10a4      	asrs	r4, r4, #2
 8003aa8:	2600      	movs	r6, #0
 8003aaa:	42a6      	cmp	r6, r4
 8003aac:	d105      	bne.n	8003aba <__libc_init_array+0x2e>
 8003aae:	bd70      	pop	{r4, r5, r6, pc}
 8003ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab4:	4798      	blx	r3
 8003ab6:	3601      	adds	r6, #1
 8003ab8:	e7ee      	b.n	8003a98 <__libc_init_array+0xc>
 8003aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003abe:	4798      	blx	r3
 8003ac0:	3601      	adds	r6, #1
 8003ac2:	e7f2      	b.n	8003aaa <__libc_init_array+0x1e>
 8003ac4:	08003b34 	.word	0x08003b34
 8003ac8:	08003b34 	.word	0x08003b34
 8003acc:	08003b34 	.word	0x08003b34
 8003ad0:	08003b38 	.word	0x08003b38

08003ad4 <_init>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	bf00      	nop
 8003ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ada:	bc08      	pop	{r3}
 8003adc:	469e      	mov	lr, r3
 8003ade:	4770      	bx	lr

08003ae0 <_fini>:
 8003ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae2:	bf00      	nop
 8003ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ae6:	bc08      	pop	{r3}
 8003ae8:	469e      	mov	lr, r3
 8003aea:	4770      	bx	lr
